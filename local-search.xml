<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java Bean Copy性能对比</title>
    <link href="/posts/14639/"/>
    <url>/posts/14639/</url>
    
    <content type="html"><![CDATA[<h1 id="常用的对象复制方法"><a href="#常用的对象复制方法" class="headerlink" title="常用的对象复制方法"></a>常用的对象复制方法</h1><ul><li><p>Apache BeanUtils</p></li><li><p>Spring BeanUtils</p></li><li><p>Spring BeanCopier</p></li><li><p>Cglib BeanCopier</p></li><li><p>Hutool BeanUtil</p></li><li><p>get/set</p></li></ul><h1 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h1><ul><li><p>Java8</p></li><li><p>4核16G台式机</p></li></ul><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><pre><code class="hljs plain">&lt;!-- Spring BeanUtils, Spring Copier --&gt;&lt;parent&gt;    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;    &lt;version&gt;2.2.7.RELEASE&lt;&#x2F;version&gt;    &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;&lt;&#x2F;parent&gt;</code></pre><pre><code class="hljs plain">&lt;!-- Apache BeanUtils --&gt;&lt;dependency&gt;    &lt;groupId&gt;commons-beanutils&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;commons-beanutils&lt;&#x2F;artifactId&gt;    &lt;version&gt;1.9.4&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;</code></pre><pre><code class="hljs plain">&lt;!-- Cglib --&gt;&lt;dependency&gt;    &lt;groupId&gt;cglib&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;cglib&lt;&#x2F;artifactId&gt;    &lt;version&gt;3.3.0&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;</code></pre><pre><code class="hljs plain">&lt;dependency&gt;    &lt;groupId&gt;cn.hutool&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;hutool-all&lt;&#x2F;artifactId&gt;    &lt;version&gt;5.3.5&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;</code></pre><h1 id="开始测试"><a href="#开始测试" class="headerlink" title="开始测试"></a>开始测试</h1><h2 id="定义两个实体类"><a href="#定义两个实体类" class="headerlink" title="定义两个实体类"></a>定义两个实体类</h2><pre><code class="hljs plain">package xyz.easyboot.demo;import java.math.BigDecimal;import java.time.LocalDateTime;&#x2F;** * @author wujiawei0926@yeah.net * @see * @since 2020&#x2F;5&#x2F;15 *&#x2F;public class FromVo &#123;    public static FromVo create()&#123;        FromVo vo &#x3D; new FromVo();        vo.setDate(LocalDateTime.now());        vo.setMoney(new BigDecimal(10000));        vo.setId(9999);        vo.setName(&quot;演示&quot;);        return vo;    &#125;    private String name;    private Integer id;    private LocalDateTime date;    private BigDecimal money;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name &#x3D; name;    &#125;    public Integer getId() &#123;        return id;    &#125;    public void setId(Integer id) &#123;        this.id &#x3D; id;    &#125;    public LocalDateTime getDate() &#123;        return date;    &#125;    public void setDate(LocalDateTime date) &#123;        this.date &#x3D; date;    &#125;    public BigDecimal getMoney() &#123;        return money;    &#125;    public void setMoney(BigDecimal money) &#123;        this.money &#x3D; money;    &#125;&#125;</code></pre><pre><code class="hljs plain">package xyz.easyboot.demo;import java.math.BigDecimal;import java.time.LocalDateTime;&#x2F;** * @author wujiawei0926@yeah.net * @see * @since 2020&#x2F;5&#x2F;15 *&#x2F;public class ToVo &#123;    public static ToVo create()&#123;        ToVo vo &#x3D; new ToVo();        vo.setDate(LocalDateTime.now());        vo.setMoney(new BigDecimal(10000));        vo.setId(9999);        vo.setName(&quot;演示&quot;);        return vo;    &#125;    private String name;    private Integer id;    private LocalDateTime date;    private BigDecimal money;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name &#x3D; name;    &#125;    public Integer getId() &#123;        return id;    &#125;    public void setId(Integer id) &#123;        this.id &#x3D; id;    &#125;    public LocalDateTime getDate() &#123;        return date;    &#125;    public void setDate(LocalDateTime date) &#123;        this.date &#x3D; date;    &#125;    public BigDecimal getMoney() &#123;        return money;    &#125;    public void setMoney(BigDecimal money) &#123;        this.money &#x3D; money;    &#125;&#125;</code></pre><h2 id="Apache-BeanUtils"><a href="#Apache-BeanUtils" class="headerlink" title="Apache BeanUtils"></a>Apache BeanUtils</h2><pre><code class="hljs plain">package xyz.easyboot.demo;import org.apache.commons.beanutils.BeanUtils;import java.lang.reflect.InvocationTargetException;&#x2F;** * @author wujiawei0926@yeah.net * @see * @since 2020&#x2F;5&#x2F;15 *&#x2F;public class ApacheBeanUtilsDemo &#123;    public static void main(String[] args) throws InvocationTargetException, IllegalAccessException &#123;        for (int j &#x3D; 0; j &lt; 5; j++) &#123;            long start &#x3D; System.currentTimeMillis();            for (int i &#x3D; 0; i &lt; 10000; i++) &#123;                FromVo from &#x3D; FromVo.create();                ToVo to &#x3D; new ToVo();                BeanUtils.copyProperties(to, from);            &#125;            long end &#x3D; System.currentTimeMillis();            System.out.println(&quot;processing: &quot; + (end - start));        &#125;    &#125;&#125;</code></pre><h2 id="Spring-BeanUtils"><a href="#Spring-BeanUtils" class="headerlink" title="Spring BeanUtils"></a>Spring BeanUtils</h2><pre><code class="hljs plain">package xyz.easyboot.demo;import org.springframework.beans.BeanUtils;&#x2F;** * @author wujiawei0926@yeah.net * @see * @since 2020&#x2F;5&#x2F;15 *&#x2F;public class SpringBeanUtilsDemo &#123;    public static void main(String[] args) &#123;        for (int j &#x3D; 0; j &lt; 5; j++) &#123;            long start &#x3D; System.currentTimeMillis();            for (int i &#x3D; 0; i &lt; 10000; i++) &#123;                FromVo from &#x3D; FromVo.create();                ToVo to &#x3D; new ToVo();                BeanUtils.copyProperties(from, to);            &#125;            long end &#x3D; System.currentTimeMillis();            System.out.println(&quot;processing: &quot; + (end - start));        &#125;    &#125;&#125;</code></pre><h2 id="Spring-BeanCopier"><a href="#Spring-BeanCopier" class="headerlink" title="Spring BeanCopier"></a>Spring BeanCopier</h2><pre><code class="hljs plain">package xyz.easyboot.demo;import org.springframework.cglib.beans.BeanCopier;&#x2F;** * @author wujiawei0926@yeah.net * @see * @since 2020&#x2F;5&#x2F;15 *&#x2F;public class SpringBeanCopierDemo &#123;    public static void main(String[] args) &#123;        final BeanCopier copier &#x3D; BeanCopier.create(FromVo.class, ToVo.class, false);        for (int j &#x3D; 0; j &lt; 5; j++) &#123;            long start &#x3D; System.currentTimeMillis();            for (int i &#x3D; 0; i &lt; 10000000; i++) &#123;                FromVo from &#x3D; FromVo.create();                ToVo to &#x3D; new ToVo();                copier.copy(from, to, null);            &#125;            long end &#x3D; System.currentTimeMillis();            System.out.println(end - start);        &#125;    &#125;&#125;</code></pre><h2 id="Cglib-BeanCopier"><a href="#Cglib-BeanCopier" class="headerlink" title="Cglib BeanCopier"></a>Cglib BeanCopier</h2><pre><code class="hljs plain">package xyz.easyboot.demo;import net.sf.cglib.beans.BeanCopier;&#x2F;** * @author wujiawei0926@yeah.net * @see * @since 2020&#x2F;5&#x2F;15 *&#x2F;public class CglibBeanCopierDemo &#123;    public static void main(String[] args) &#123;        final BeanCopier copier &#x3D; BeanCopier.create(FromVo.class, ToVo.class, false);        for (int j &#x3D; 0; j &lt; 5; j++) &#123;            long start &#x3D; System.currentTimeMillis();            for (int i &#x3D; 0; i &lt; 10000000; i++) &#123;                FromVo from &#x3D; FromVo.create();                ToVo to &#x3D; new ToVo();                copier.copy(from, to, null);            &#125;            long end &#x3D; System.currentTimeMillis();            System.out.println(end - start);        &#125;    &#125;&#125;</code></pre><h2 id="Hutool-BeanUtil"><a href="#Hutool-BeanUtil" class="headerlink" title="Hutool BeanUtil"></a>Hutool BeanUtil</h2><pre><code class="hljs plain">package xyz.easyboot.demo;import cn.hutool.core.bean.BeanUtil;&#x2F;** * @author wujiawei0926@yeah.net * @see * @since 2020&#x2F;5&#x2F;21 *&#x2F;public class HutoolBeanUtilDemo &#123;    public static void main(String[] args) &#123;        for (int j &#x3D; 0; j &lt; 10000000; j++) &#123;            long start &#x3D; System.currentTimeMillis();            for (int i &#x3D; 0; i &lt; 10; i++) &#123;                FromVo from &#x3D; FromVo.create();                ToVo to &#x3D; new ToVo();                BeanUtil.copyProperties(from, to);            &#125;            long end &#x3D; System.currentTimeMillis();            System.out.println(end - start);        &#125;    &#125;&#125;</code></pre><h2 id="Get-Set"><a href="#Get-Set" class="headerlink" title="Get/Set"></a>Get/Set</h2><pre><code class="hljs plain">package xyz.easyboot.demo;&#x2F;** * @author wujiawei0926@yeah.net * @see * @since 2020&#x2F;5&#x2F;15 *&#x2F;public class GetSetDemo &#123;    public static void main(String[] args) &#123;        for (int j &#x3D; 0; j &lt; 5; j++) &#123;            long start &#x3D; System.currentTimeMillis();            for (int i &#x3D; 0; i &lt; 10000000; i++) &#123;                FromVo from &#x3D; FromVo.create();                ToVo to &#x3D; new ToVo();                to.setDate(from.getDate());                to.setId(from.getId());                to.setMoney(from.getMoney());                to.setName(from.getName());            &#125;            long end &#x3D; System.currentTimeMillis();            System.out.println(end - start);        &#125;    &#125;&#125;</code></pre><h2 id="测试报告"><a href="#测试报告" class="headerlink" title="测试报告"></a>测试报告</h2><p><img src="https://cdn.easyboot.xyz/bean-copy-record-2.png" srcset="/img/loading.gif" alt="测试报告"></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>可以看到跟网上的结论还是有些区别的，我的测试环境和依赖版本是导致区别的原因之一，当然也可能是我的测试方法不对。</p><ul><li><p>在次数很少的场景下更推荐<code>Spring Beanutils</code></p></li><li><p><code>Spring BeanCopier</code>和<code>Cblib BeanCopier</code>的性能相差无几</p></li><li><p>次数非常多的场景中，<code>get/set</code>、<code>BeanCopier</code>的速度差不多，但考虑到易用性，更推荐使用<code>BeanCopier</code></p></li><li><p><code>Apache Beanutils</code>无疑是最慢的，这点与网上的结论完全一致</p></li><li><p>国产的<code>Hutool BeanUtil</code>在执行次数较少的场景下还是值得一试的，但测试10000000次时出现了明显的速度问题</p></li></ul><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://github.com/wuuJiawei/springboot-demos/tree/master/bean-copy-test/src/main/java/xyz/easyboot/demo" target="_blank" rel="noopener">https://github.com/wuuJiawei/springboot-demos/tree/master/bean-copy-test/src/main/java/xyz/easyboot/demo</a></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://juejin.im/post/5dc2b293e51d456e65283e61" target="_blank" rel="noopener">你还在用BeanUtils进行对象属性拷贝？</a></p><p><a href="https://juejin.im/post/5cc5c07df265da03705fc119" target="_blank" rel="noopener">Java Bean Copy组件的性能比较</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>springboot</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot实现API限流（一）</title>
    <link href="/posts/41511/"/>
    <url>/posts/41511/</url>
    
    <content type="html"><![CDATA[<h1 id="限流算法"><a href="#限流算法" class="headerlink" title="限流算法"></a>限流算法</h1><h2 id="漏桶算法"><a href="#漏桶算法" class="headerlink" title="漏桶算法"></a>漏桶算法</h2><p>漏桶算法很简单，如下图所示，水直接进入漏桶，漏桶按一定的速度出水，当水进入速度过大会直接溢出，由此可以看出漏桶算法的优势在于能够限制数据的传输速率。</p><p>漏桶的出水速度是固定的参数，所以无论并发的请求数是多少，释放出来的速度恒定，无法为某一个单独的流改变端口速率。</p><p>因此其显而易见的缺点就是不能有效利用网络资源，无法承担突发的流量请求，效率偏低。</p><p><img src="https://cdn.easyboot.xyz/%E6%BC%8F%E6%A1%B6%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95.webp" srcset="/img/loading.gif" alt="漏桶算法"></p><h2 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a>令牌桶算法</h2><p>令牌桶的原理也好理解，其实就是系统以一个恒定的速度往桶中放置令牌，当请求进来时，先从桶里拿令牌，成功拿到令牌就通过，当没有令牌时直接被拒绝。</p><p>这些被拒绝的请求，也可以将其存放到队列中，等待桶中生成了足够数量的令牌中再次进行传输。</p><p>可以看出令牌桶与漏桶的区别就在于此，漏桶算法是强制数据的传输速率，而令牌桶不仅能够限制传输速率，同时也可以根据令牌的生成速率，承受突发请求直到令牌生成速率上限。</p><p><img src="https://cdn.easyboot.xyz/%E4%BB%A4%E7%89%8C%E6%A1%B6%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95.webp" srcset="/img/loading.gif" alt="令牌桶算法"></p><h1 id="限流工具"><a href="#限流工具" class="headerlink" title="限流工具"></a>限流工具</h1><h2 id="RateLimiter"><a href="#RateLimiter" class="headerlink" title="RateLimiter"></a>RateLimiter</h2><p>大名鼎鼎的Guava工具包提供了限流工具类<code>RateLimiter</code>，该类基于令牌桶算法实现限流，广泛适用于<strong>单机程序</strong>的限流处理。</p><p>提供一些简单的示例：</p><pre><code class="hljs plain">package com.easyboot.framework.limit;import cn.hutool.core.thread.ThreadUtil;import cn.hutool.json.JSONUtil;import com.google.common.util.concurrent.RateLimiter;import io.rong.models.User;import lombok.extern.slf4j.Slf4j;import org.junit.Test;import java.util.ArrayList;import java.util.List;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;&#x2F;** * Guava令牌桶限流 * * @author wujiawei0926@yeah.net * @see * @since 2020&#x2F;4&#x2F;16 *&#x2F;@Slf4jpublic class GuavaRateLimiter &#123;    @Test    public void useLimit() &#123;        &#x2F;&#x2F; 创建令牌桶：每秒只能2次请求        RateLimiter limiter &#x3D; RateLimiter.create(1.0);        &#x2F;&#x2F; 模拟多个请求        for (int i &#x3D; 0; i &lt; 20; i++) &#123;            double acquire &#x3D; limiter.acquire();            log.info(&quot;获取令牌成功，消耗&#x3D;&quot; + acquire);            List&lt;User&gt; list &#x3D; new ArrayList&lt;&gt;();            for (int j &#x3D; 0; j &lt; 3; j++) &#123;                User user &#x3D; new User(j + &quot;&quot;, &quot;12&quot;, &quot;测试&quot; + j);                list.add(user);            &#125;            log.info(&quot;远程返回：&quot; + JSONUtil.toJsonStr(list));        &#125;        log.info(&quot;结束&quot;);    &#125;    @Test    public void useLimitWithThread()&#123;        RateLimiter limiter &#x3D; RateLimiter.create(2.0);        ExecutorService service &#x3D; Executors.newFixedThreadPool(4);        for (int i &#x3D; 0; i &lt; 20; i++) &#123;            service.submit(()-&gt;&#123;                double acquire &#x3D; limiter.acquire(1);                log.info(&quot;获取令牌成功，消耗&#x3D;&quot; + acquire);                System.out.println(&quot;token &quot;);                ThreadUtil.sleep(100);                log.info(&quot;执行成功&quot;);            &#125;);        &#125;    &#125;    @Test    public void common() &#123;        for (int i &#x3D; 0; i &lt; 20; i++) &#123;            log.info(&quot;开始远程&quot;);            List&lt;User&gt; list &#x3D; new ArrayList&lt;&gt;();            for (int j &#x3D; 0; j &lt; 3; j++) &#123;                User user &#x3D; new User(j + &quot;&quot;, &quot;12&quot;, &quot;测试&quot; + j);                list.add(user);            &#125;            log.info(&quot;远程返回：&quot; + JSONUtil.toJsonStr(list));        &#125;        log.info(&quot;结束&quot;);    &#125;&#125;</code></pre><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p>如果是分布式的应用，需要利用<code>Redis</code>来进行限流，虽然<code>Redis</code>没有提供现成的实现方法，但我们可以通过<code>Lua</code>脚本实现限流功能。</p><pre><code class="hljs plain">private String buildLuaScript() &#123;    StringBuilder lua &#x3D; new StringBuilder();    lua.append( &quot; local key &#x3D; KEYS[1]&quot; );    lua.append( &quot;\nlocal limit &#x3D; tonumber(ARGV[1])&quot; );    lua.append( &quot;\nlocal curentLimit &#x3D; tonumber(redis.call(&#39;get&#39;, key) or \&quot;0\&quot;)&quot; );    lua.append( &quot;\nif curentLimit + 1 &gt; limit then&quot; );    lua.append( &quot;\nreturn 0&quot; );    lua.append( &quot;\nelse&quot; );    lua.append( &quot;\n redis.call(\&quot;INCRBY\&quot;, key, 1)&quot; );    lua.append( &quot;\nredis.call(\&quot;EXPIRE\&quot;, key, ARGV[2])&quot; );    lua.append( &quot;\nreturn curentLimit + 1&quot; );    lua.append( &quot;\nend&quot; );    return lua.toString();&#125;</code></pre><hr><p>下一单元将会讲解<code>SpringBoot</code>实现API限流的完整流程，整个流程将会充分利用<code>AOP</code>特性与线程安全的对象池。</p><p>且看下回分解！</p>]]></content>
    
    
    
    <tags>
      
      <tag>springboot</tag>
      
      <tag>限流</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot定时任务</title>
    <link href="/posts/48906/"/>
    <url>/posts/48906/</url>
    
    <content type="html"><![CDATA[<h1 id="常用的定时任务实现"><a href="#常用的定时任务实现" class="headerlink" title="常用的定时任务实现"></a>常用的定时任务实现</h1><ul><li><p>Quartz：支持单机与分布式的定时任务框架，功能十分强大，但需要额外集成</p></li><li><p>Timer：JDK自带的定时任务，功能单一</p></li><li><p>SpringSchedule：SpringBoot自带，使用方便，功能基本满足需求</p></li></ul><h1 id="创建定时任务"><a href="#创建定时任务" class="headerlink" title="创建定时任务"></a>创建定时任务</h1><p>在SpringBoot项目中，直接使用<code>@Scheduled</code>注解创建定时任务</p><pre><code class="hljs plain">import org.springframework.scheduling.annotation.Scheduled;import org.springframework.stereotype.Service;@Servicepublic class LiveHeartBeatConsumer &#123; @Scheduled(fixedDelay &#x3D; 5000) public void test()&#123;  System.out.println(&quot;test schedule&quot;) &#125;&#125;</code></pre><p>其中<code>@Scheduled</code>有如下属性可供配置：</p><ul><li><code>cron</code>: Cron表达式，举几个栗子</li></ul><blockquote><p>“0 0 * * * *”             表示每小时0分0秒执行一次<br>“*/10 * * * * *”         表示每10秒执行一次<br>“0 0 8-10 * * *”          表示每天8，9，10点执行<br>“0 0/30 8-10 * * *”       表示每天8点到10点，每半小时执行<br>“0 0 9-17 * * MON-FRI”    表示每周一至周五，9点到17点的0分0秒执行<br>“0 0 0 25 12 ?”           表示每年圣诞节（12月25日）0时0分0秒执行</p></blockquote><ul><li><code>zone</code>: 时区，，很少使用</li><li><code>fixedDelay</code>: 上一次任务执行完成后，过多久再次执行，单位ms</li><li><code>fixedDelayString</code>: 同<code>fixedDelay</code>，参数类型为<code>String</code></li><li><code>fixedRate</code>: 按一定的频率执行任务，单位ms</li><li><code>fixedRateString</code>: 同<code>fixedRate</code>，参数类型为<code>String</code></li><li><code>initialDelay</code>: 第一次执行的延迟时间，单位ms</li><li><code>initialDelayString</code>: 同<code>initialDelay</code>，参数类型为<code>String</code></li></ul><h1 id="开启定时任务"><a href="#开启定时任务" class="headerlink" title="开启定时任务"></a>开启定时任务</h1><p>在SpringBoot项目中，使用<code>@EnableScheduling</code>注解开启定时任务</p><pre><code class="hljs plain">import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.context.ConfigurableApplicationContext;import org.springframework.core.env.Environment;import org.springframework.scheduling.annotation.EnableScheduling;import java.net.InetAddress;import java.net.UnknownHostException;&#x2F;** * @author wujiawei0926@yeah.net * @see * @since 2020&#x2F;2&#x2F;10 *&#x2F;@EnableScheduling@SpringBootApplicationpublic class StarterApplication &#123; public static void main(String[] args) throws UnknownHostException &#123;  ConfigurableApplicationContext application &#x3D; SpringApplication.run(StarterApplication.class, args);  Environment env &#x3D; application.getEnvironment();  String ip &#x3D; InetAddress.getLocalHost().getHostAddress();  String port &#x3D; env.getProperty(&quot;server.port&quot;);  String path &#x3D; env.getProperty(&quot;server.servlet.context-path&quot;);  if (path &#x3D;&#x3D; null || &quot;null&quot;.equals(path)) &#123;   path &#x3D; &quot;&quot;;  &#125;  System.out.print(&quot;\n----------------------------------------------------------\n\t&quot; + &quot;Application is running! Access URLs:\n\t&quot; + &quot;Local: \t\thttp:&#x2F;&#x2F;localhost:&quot; + port + path + &quot;&#x2F;\n\t&quot; + &quot;External: \thttp:&#x2F;&#x2F;&quot; + ip + &quot;:&quot; + port + path + &quot;&#x2F;\n\t&quot; + &quot;swagger-ui: \thttp:&#x2F;&#x2F;&quot; + ip + &quot;:&quot; + port + path + &quot;&#x2F;swagger-ui.html\n\t&quot; + &quot;Doc: \t\thttp:&#x2F;&#x2F;&quot; + ip + &quot;:&quot; + port + path + &quot;&#x2F;doc.html\n&quot; + &quot;----------------------------------------------------------&quot;); &#125;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot通过AOP实现数据字典</title>
    <link href="/posts/21205/"/>
    <url>/posts/21205/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是数据字典"><a href="#什么是数据字典" class="headerlink" title="什么是数据字典"></a>什么是数据字典</h1><p>这是一段来自维基百科的解释：</p><blockquote><p>数据字典（英语：data dictionary）是一个自动的或手动的存储数据元的定义和属性的文档。</p><p>指一组对数据流程图中的数据流、数据文件、数据项及处理逻辑进行定义描述的表格。</p></blockquote><p>不难理解，从编程的角度想，数据字典就是程序中存储各种基础、通用属性的东西，类似于性别、用户类型、删除状态等常用的属性，都可以统一由数据字典进行维护。</p><h1 id="为什么要数据字典"><a href="#为什么要数据字典" class="headerlink" title="为什么要数据字典"></a>为什么要数据字典</h1><p>在没有数据字典的程序中，程序员们彼此约定好各个基础属性对应的数值，比方说0是启用、1是关闭，然后在各自在程序中建立常量类或枚举类来进行解析或判断，这么说来，似乎数据字典并没有存在的必要。</p><p>但是前后端分离的时代来临了。每个接口往往都会携带几个基础属性，当服务端开发人员返回各种属性对应的数字后，要么编写一份详尽的文档，要么由前端开发人员对接接口时一遍又一遍的咨询。但是很显然大家都不愿意写文档，那就只能循环你问我答环节。作为一个优秀的程序员，当然是能懒则懒，有什么办法能让服务端开发人员不用写文档，又能让前端知道属性值的含义呢？数据字典应运而生。</p><h1 id="如何设计与开发"><a href="#如何设计与开发" class="headerlink" title="如何设计与开发"></a>如何设计与开发</h1><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p>常见的数据字典表结构有两种。一种是单表结构，通过冗余类型字段实现单表的快速查询与维护。另一种是将类型和数据值拆分成两张表，配合缓存来实现高效查询，虽然有两张表，但是结构更清晰，更容易理解。</p><p>我们这边直接采用第二种设计方案。</p><pre><code class="hljs sql"><span class="hljs-comment">-- 字典类型表</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`sys_dict`</span> (  <span class="hljs-string">`id`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,  <span class="hljs-string">`dict_name`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'字典名称'</span>,  <span class="hljs-string">`dict_code`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'字典编码'</span>,  <span class="hljs-string">`description`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'描述'</span>,  <span class="hljs-string">`del_flag`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'删除状态'</span>,  <span class="hljs-string">`create_by`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'创建人'</span>,  <span class="hljs-string">`create_time`</span> datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'创建时间'</span>,  <span class="hljs-string">`update_by`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'更新人'</span>,  <span class="hljs-string">`update_time`</span> datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'更新时间'</span>,  <span class="hljs-string">`type`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">unsigned</span> zerofill <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'字典类型0为string,1为number'</span>,  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>) <span class="hljs-keyword">USING</span> BTREE,  <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">KEY</span> <span class="hljs-string">`indextable_dict_code`</span> (<span class="hljs-string">`dict_code`</span>) <span class="hljs-keyword">USING</span> BTREE) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8;<span class="hljs-comment">-- 字典数据值表</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`sys_dict_item`</span> (  <span class="hljs-string">`id`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,  <span class="hljs-string">`dict_id`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'字典id'</span>,  <span class="hljs-string">`item_text`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'字典项文本'</span>,  <span class="hljs-string">`item_value`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'字典项值'</span>,  <span class="hljs-string">`description`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'描述'</span>,  <span class="hljs-string">`sort_order`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'排序'</span>,  <span class="hljs-string">`status`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'状态（1启用 0不启用）'</span>,  <span class="hljs-string">`create_by`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,  <span class="hljs-string">`create_time`</span> datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,  <span class="hljs-string">`update_by`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,  <span class="hljs-string">`update_time`</span> datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>) <span class="hljs-keyword">USING</span> BTREE,  <span class="hljs-keyword">KEY</span> <span class="hljs-string">`index_table_dict_id`</span> (<span class="hljs-string">`dict_id`</span>) <span class="hljs-keyword">USING</span> BTREE,  <span class="hljs-keyword">KEY</span> <span class="hljs-string">`index_table_sort_order`</span> (<span class="hljs-string">`sort_order`</span>) <span class="hljs-keyword">USING</span> BTREE,  <span class="hljs-keyword">KEY</span> <span class="hljs-string">`index_table_dict_status`</span> (<span class="hljs-string">`status`</span>) <span class="hljs-keyword">USING</span> BTREE) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8;</code></pre><h2 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h2><p>无论是Mybatis还是JPA，亦或其他任何一种ORM，无非就是新增数据、删除数据、修改数据和查询数据。我们这边主要使用查询，包含几个简单的连表查询，代码上都非常简单，因此不再赘述，看官们可以根据后面的代码进行联想，我也会对每个查询方法进行详细的介绍。</p><h1 id="AOP实现"><a href="#AOP实现" class="headerlink" title="AOP实现"></a>AOP实现</h1><p>// TODO 未完待续</p>]]></content>
    
    
    
    <tags>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS安装Hexo教程</title>
    <link href="/posts/32750/"/>
    <url>/posts/32750/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>自建博客已经有小半个年头，初入门时用wordpress搭建了小站，使用约莫一两个星期之后，深感其加载之慢、系统之臃肿，当然也因为当时能力确实不足，无力驾驭如此成熟的平台，愤而转向solo。</p><p>由b3log组织开发的solo系统，不失为小白入门的选择，优雅的界面设计，轻快的加载速度，让我不断地向周围朋友进行安利。奈何小服务器配置实在太低，装了一个solo之后再想装其他的Java应用时，不免拙荆见肘。恰巧solo的https解析出了些问题，导致博客样式无法正常加载，无奈之下全面拥抱hexo。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="什么是Hexo？"><a href="#什么是Hexo？" class="headerlink" title="什么是Hexo？"></a>什么是Hexo？</h2><p>在安装之前，当然需要先了解清楚Hexo是什么。</p><p>首先，这是一个博客框架，支持生成静态页面，也可以直接以服务器运行。Hexo拥有庞大的用户群体，因此带来了难以数计的开源主题与插件，可玩性丰富，在系统支持的范围内，可以让博客变成任何你想要的模样。</p><p>当然也是有一些缺点的，不过这些缺点对于有些人而言，可能也是缺点，毕竟一万个读者就有一万个哈姆雷特。比如没有wordpress或solo那种简洁明了的管理后台，虽然有插件，但易用性与功能性终究不足（对熟悉solo的我而言），文章的编写需要通过本地编辑器，而发布需要在服务器上执行命令，对于嫌麻烦的人而言，确实是多余的步骤。</p><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">传送门</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装Hexo非常简单，在centos中只需要几条命令，不过在安装前需要确保服务器已经安装了如下应用：</p><ul><li><p>Node.js (Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本)</p><p>不要用 <code>yum</code> 进行安装，它提供的版本低于8.10，建议直接 <code>wget</code> 安装包进行安装。</p></li><li><p>Git</p></li></ul><p>直接 <code>yum</code> 安装即可 </p><p>必备的程序安装完成后，即可通过npm安装Hexo</p><p><code>$ npm install -g hexo-cli</code></p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>安装完成后，执行以下命令进行初始化：</p><pre><code class="hljs plain">$ hexo init &lt;folder&gt;</code></pre><p>这里的 <code>&lt;folder&gt;</code> 指的是安装的目录，比如要安装到 <code>/www/blog</code> ，那么执行的命令应该是 <code>$ hexo init /www/blog</code> </p><p>初始化完成之后可以看到指定的文件夹目录如下：</p><pre><code class="hljs plain">.├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes</code></pre><p>如果网络不好导致themes中没有主题，不要担心，直接去 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo主题站</a> 下载一个上传进去，然后修改 <code>_config.yml</code> 的 <code>theme</code> 为上传上去的主题目录名称。</p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><ul><li>使用服务器运行</li></ul><p><a href="https://hexo.io/zh-cn/docs/server" target="_blank" rel="noopener">官方文档传送门</a></p><p>步骤很简单，如下：</p><pre><code class="hljs plain">$ cd &lt;folder&gt;$ npm install hexp-server --save</code></pre><p>安装完成后输入以下命令启动服务器。</p><pre><code class="hljs plain">$ hexo server</code></pre><p>默认的端口是 <code>4000</code> ，也就是说，这时候可以通过 <code>http://${ip}:4000</code> 访问刚创建的博客。</p><p>如果无法访问，请检查 <code>theme</code> 目录是否为空，如果空，前往 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo主题站</a> 下载一个上传进去，然后修改 <code>_config.yml</code> 的 <code>theme</code> 为上传上去的主题目录名称。</p><p>如果想要更换端口，可以带上 <code>-p</code> 指定其他端口。</p><pre><code class="hljs plain">$ hexo server -p 8080</code></pre><ul><li>使用Nginx访问</li></ul><p>使用 <code>generate</code> 命令生成博客的静态文件。</p><pre><code class="hljs plain">$ cd &lt;folder&gt;$ hexo generate</code></pre><p>执行成功后，可以看到博客目录新增了一个 <code>public</code> 目录，这就是刚才生成的整个博客站点的静态文件。</p><p>修改Nginx配置，新增一个 <code>server</code>，将 <code>root</code> 指向博客的public目录。</p><p>直接贴上我的配置，仅用参考。</p><pre><code class="hljs plain">server&#123;    listen 80;listen 443 ssl http2;    server_name blog.actframework.cn www.easyboot.xyz easyboot.xyz;    index index.php index.html index.htm default.php default.htm default.html;    root &#x2F;www&#x2F;wwwroot&#x2F;hexo.easyboot.xyz&#x2F;public;        #SSL-START SSL相关配置，请勿删除或修改下一行带注释的404规则    #error_page 404&#x2F;404.html;    #HTTP_TO_HTTPS_START    if ($server_port !~ 443)&#123;        rewrite ^(&#x2F;.*)$ https:&#x2F;&#x2F;$host$1 permanent;    &#125;    #HTTP_TO_HTTPS_END    ssl_certificate    &#x2F;www&#x2F;server&#x2F;panel&#x2F;vhost&#x2F;cert&#x2F;blog.zhurongting.com&#x2F;fullchain.pem;    ssl_certificate_key    &#x2F;www&#x2F;server&#x2F;panel&#x2F;vhost&#x2F;cert&#x2F;blog.zhurongting.com&#x2F;privkey.pem;    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;    ssl_prefer_server_ciphers on;    ssl_session_cache shared:SSL:10m;    ssl_session_timeout 10m;    error_page 497  https:&#x2F;&#x2F;$host$request_uri;    #SSL-END        #ERROR-PAGE-START  错误页配置，可以注释、删除或修改    #error_page 404 &#x2F;404.html;    #error_page 502 &#x2F;502.html;    #ERROR-PAGE-END        #PHP-INFO-START  PHP引用配置，可以注释或修改    include enable-php-00.conf;    #PHP-INFO-END        #REWRITE-START URL重写规则引用,修改后将导致面板设置的伪静态规则失效    include &#x2F;www&#x2F;server&#x2F;panel&#x2F;vhost&#x2F;rewrite&#x2F;blog.zhurongting.com.conf;    #REWRITE-END        #禁止访问的文件或目录    location ~ ^&#x2F;(\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md)    &#123;        return 404;    &#125;        #一键申请SSL证书验证目录相关设置    location ~ \.well-known&#123;        allow all;    &#125;        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$    &#123;        expires      30d;        error_log off;        access_log &#x2F;dev&#x2F;null;    &#125;        location ~ .*\.(js|css)?$    &#123;        expires      12h;        error_log off;        access_log &#x2F;dev&#x2F;null;     &#125;    access_log  &#x2F;www&#x2F;wwwlogs&#x2F;blog.zhurongting.com.log;    error_log  &#x2F;www&#x2F;wwwlogs&#x2F;blog.zhurongting.com.error.log;&#125;</code></pre><p>我这里开启了强制 <code>https</code> ，不需要的话直接去掉即可。</p><p>这时候访问 <code>http://$host</code> ，就可以看到博客全貌了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>安装教程</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql保留关键字参考指南</title>
    <link href="/posts/39281/"/>
    <url>/posts/39281/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>mysql中存在大量的关键字和保留字，在设计字段时应即时规避，防止未来可能出现的一系列sql问题。</p><p>笔者正是因为缺乏经验，不清楚这方面约定，耗费了大量精力debug各方源码，徒做无用功。</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="http://www.1024sky.cn/blog/article/1095" target="_blank" rel="noopener">mysql8 参考手册–关键字和保留字</a></p><h1 id="快速查询"><a href="#快速查询" class="headerlink" title="快速查询"></a>快速查询</h1><p>如果您想要快速验证某个字段是否关键字或保留字，鼠标点一下当前页面，然后ctrl+F进行搜索，可以直接定位到对应的内容</p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>ACCESSIBLE （R）</p><p>ACCOUNT</p><p>ACTION</p><p>ACTIVE; 在8.0.14中添加（非保留）</p><p>ADD （R）</p><p>ADMIN; 在8.0.12中变为非保留</p><p>AFTER</p><p>AGAINST</p><p>AGGREGATE</p><p>ALGORITHM</p><p>ALL （R）</p><p>ALTER （R）</p><p>ALWAYS</p><p>ANALYSE; 在8.0.1中删除</p><p>ANALYZE （R）</p><p>AND （R）</p><p>ANY</p><p>ARRAY; 在8.0.17中添加（保留）；在8.0.19中变为非保留</p><p>AS （R）</p><p>ASC （R）</p><p>ASCII</p><p>ASENSITIVE （R）</p><p>AT</p><p>AUTOEXTEND_SIZE</p><p>AUTO_INCREMENT</p><p>AVG</p><p>AVG_ROW_LENGTH</p><p>BACKUP</p><p>BEFORE （R）</p><p>BEGIN</p><p>BETWEEN （R）</p><p>BIGINT （R）</p><p>BINARY （R）</p><p>BINLOG</p><p>BIT</p><p>BLOB （R）</p><p>BLOCK</p><p>BOOL</p><p>BOOLEAN</p><p>BOTH （R）</p><p>BTREE</p><p>BUCKETS; 在8.0.2中添加（非保留）</p><p>BY （R）</p><p>BYTE</p><p>CACHE</p><p>CALL （R）</p><p>CASCADE （R）</p><p>CASCADED</p><p>CASE （R）</p><p>CATALOG_NAME</p><p>CHAIN</p><p>CHANGE （R）</p><p>CHANGED</p><p>CHANNEL</p><p>CHAR （R）</p><p>CHARACTER （R）</p><p>CHARSET</p><p>CHECK （R）</p><p>CHECKSUM</p><p>CIPHER</p><p>CLASS_ORIGIN</p><p>CLIENT</p><p>CLONE; 在8.0.3中添加（非保留）</p><p>CLOSE</p><p>COALESCE</p><p>CODE</p><p>COLLATE （R）</p><p>COLLATION</p><p>COLUMN （R）</p><p>COLUMNS</p><p>COLUMN_FORMAT</p><p>COLUMN_NAME</p><p>COMMENT</p><p>COMMIT</p><p>COMMITTED</p><p>COMPACT</p><p>COMPLETION</p><p>COMPONENT</p><p>COMPRESSED</p><p>COMPRESSION</p><p>CONCURRENT</p><p>CONDITION （R）</p><p>CONNECTION</p><p>CONSISTENT</p><p>CONSTRAINT （R）</p><p>CONSTRAINT_CATALOG</p><p>CONSTRAINT_NAME</p><p>CONSTRAINT_SCHEMA</p><p>CONTAINS</p><p>CONTEXT</p><p>CONTINUE （R）</p><p>CONVERT （R）</p><p>CPU</p><p>CREATE （R）</p><p>CROSS （R）</p><p>CUBE（R）; 在8.0.1中保留</p><p>CUME_DIST（R）; 在8.0.2中添加（保留）</p><p>CURRENT</p><p>CURRENT_DATE （R）</p><p>CURRENT_TIME （R）</p><p>CURRENT_TIMESTAMP （R）</p><p>CURRENT_USER （R）</p><p>CURSOR （R）</p><p>CURSOR_NAME</p><p>DATA</p><p>DATABASE （R）</p><p>DATABASES （R）</p><p>DATAFILE</p><p>DATE</p><p>DATETIME</p><p>DAY</p><p>DAY_HOUR （R）</p><p>DAY_MICROSECOND （R）</p><p>DAY_MINUTE （R）</p><p>DAY_SECOND （R）</p><p>DEALLOCATE</p><p>DEC （R）</p><p>DECIMAL （R）</p><p>DECLARE （R）</p><p>DEFAULT （R）</p><p>DEFAULT_AUTH</p><p>DEFINER</p><p>DEFINITION; 在8.0.4中添加（非保留）</p><p>DELAYED （R）</p><p>DELAY_KEY_WRITE</p><p>DELETE （R）</p><p>DENSE_RANK（R）; 在8.0.2中添加（保留）</p><p>DESC （R）</p><p>DESCRIBE （R）</p><p>DESCRIPTION; 在8.0.4中添加（非保留）</p><p>DES_KEY_FILE; 在8.0.3中删除</p><p>DETERMINISTIC （R）</p><p>DIAGNOSTICS</p><p>DIRECTORY</p><p>DISABLE</p><p>DISCARD</p><p>DISK</p><p>DISTINCT （R）</p><p>DISTINCTROW （R）</p><p>DIV （R）</p><p>DO</p><p>DOUBLE （R）</p><p>DROP （R）</p><p>DUAL （R）</p><p>DUMPFILE</p><p>DUPLICATE</p><p>DYNAMIC</p><p>EACH （R）</p><p>ELSE （R）</p><p>ELSEIF （R）</p><p>EMPTY（R）; 在8.0.4中添加（保留）</p><p>ENABLE</p><p>ENCLOSED （R）</p><p>ENCRYPTION</p><p>END</p><p>ENDS</p><p>ENFORCED; 在8.0.16中添加（非保留）</p><p>ENGINE</p><p>ENGINES</p><p>ENUM</p><p>ERROR</p><p>ERRORS</p><p>ESCAPE</p><p>ESCAPED （R）</p><p>EVENT</p><p>EVENTS</p><p>EVERY</p><p>EXCEPT （R）</p><p>EXCHANGE</p><p>EXCLUDE; 在8.0.2中添加（非保留）</p><p>EXECUTE</p><p>EXISTS （R）</p><p>EXIT （R）</p><p>EXPANSION</p><p>EXPIRE</p><p>EXPLAIN （R）</p><p>EXPORT</p><p>EXTENDED</p><p>EXTENT_SIZE</p><p>FAILED_LOGIN_ATTEMPTS; 在8.0.19中添加（非保留）</p><p>FALSE （R）</p><p>FAST</p><p>FAULTS</p><p>FETCH （R）</p><p>FIELDS</p><p>FILE</p><p>FILE_BLOCK_SIZE</p><p>FILTER</p><p>FIRST</p><p>FIRST_VALUE（R）; 在8.0.2中添加（保留）</p><p>FIXED</p><p>FLOAT （R）</p><p>FLOAT4 （R）</p><p>FLOAT8 （R）</p><p>FLUSH</p><p>FOLLOWING; 在8.0.2中添加（非保留）</p><p>FOLLOWS</p><p>FOR （R）</p><p>FORCE （R）</p><p>FOREIGN （R）</p><p>FORMAT</p><p>FOUND</p><p>FROM （R）</p><p>FULL</p><p>FULLTEXT （R）</p><p>FUNCTION（R）; 在8.0.1中保留</p><p>GENERAL</p><p>GENERATED （R）</p><p>GEOMCOLLECTION; 在8.0.11中添加（非保留）</p><p>GEOMETRY</p><p>GEOMETRYCOLLECTION</p><p>GET （R）</p><p>GET_FORMAT</p><p>GET_MASTER_PUBLIC_KEY; 在8.0.4中添加（保留）；在8.0.11中成为非保留</p><p>GLOBAL</p><p>GRANT （R）</p><p>GRANTS</p><p>GROUP （R）</p><p>GROUPING（R）; 在8.0.1中添加（保留）</p><p>GROUPS（R）; 在8.0.2中添加（保留）</p><p>GROUP_REPLICATION</p><p>HANDLER</p><p>HASH</p><p>HAVING （R）</p><p>HELP</p><p>HIGH_PRIORITY （R）</p><p>HISTOGRAM; 在8.0.2中添加（非保留）</p><p>HISTORY; 在8.0.3中添加（非保留）</p><p>HOST</p><p>HOSTS</p><p>HOUR</p><p>HOUR_MICROSECOND （R）</p><p>HOUR_MINUTE （R）</p><p>HOUR_SECOND （R）</p><p>IDENTIFIED</p><p>IF （R）</p><p>IGNORE （R）</p><p>IGNORE_SERVER_IDS</p><p>IMPORT</p><p>IN （R）</p><p>INACTIVE; 在8.0.14中添加（非保留）</p><p>INDEX （R）</p><p>INDEXES</p><p>INFILE （R）</p><p>INITIAL_SIZE</p><p>INNER （R）</p><p>INOUT （R）</p><p>INSENSITIVE （R）</p><p>INSERT （R）</p><p>INSERT_METHOD</p><p>INSTALL</p><p>INSTANCE</p><p>INT （R）</p><p>INT1 （R）</p><p>INT2 （R）</p><p>INT3 （R）</p><p>INT4 （R）</p><p>INT8 （R）</p><p>INTEGER （R）</p><p>INTERVAL （R）</p><p>INTO （R）</p><p>INVISIBLE</p><p>INVOKER</p><p>IO</p><p>IO_AFTER_GTIDS （R）</p><p>IO_BEFORE_GTIDS （R）</p><p>IO_THREAD</p><p>IPC</p><p>IS （R）</p><p>ISOLATION</p><p>ISSUER</p><p>ITERATE （R）</p><p>JOIN （R）</p><p>JSON</p><p>JSON_TABLE（R）; 在8.0.4中添加（保留）</p><p>JSON_VALUE; 在8.0.21中添加（非保留）</p><p>KEY （R）</p><p>KEYS （R）</p><p>KEY_BLOCK_SIZE</p><p>KILL （R）</p><p>LAG（R）; 在8.0.2中添加（保留）</p><p>LANGUAGE</p><p>LAST</p><p>LAST_VALUE（R）; 在8.0.2中添加（保留）</p><p>LATERAL（R）; 在8.0.14中添加（保留）</p><p>LEAD（R）; 在8.0.2中添加（保留）</p><p>LEADING （R）</p><p>LEAVE （R）</p><p>LEAVES</p><p>LEFT （R）</p><p>LESS</p><p>LEVEL</p><p>LIKE （R）</p><p>LIMIT （R）</p><p>LINEAR （R）</p><p>LINES （R）</p><p>LINESTRING</p><p>LIST</p><p>LOAD （R）</p><p>LOCAL</p><p>LOCALTIME （R）</p><p>LOCALTIMESTAMP （R）</p><p>LOCK （R）</p><p>LOCKED; 在8.0.1中添加（非保留）</p><p>LOCKS</p><p>LOGFILE</p><p>LOGS</p><p>LONG （R）</p><p>LONGBLOB （R）</p><p>LONGTEXT （R）</p><p>LOOP （R）</p><p>LOW_PRIORITY （R）</p><p>MASTER</p><p>MASTER_AUTO_POSITION</p><p>MASTER_BIND （R）</p><p>MASTER_COMPRESSION_ALGORITHMS; 在8.0.18中添加（非保留）</p><p>MASTER_CONNECT_RETRY</p><p>MASTER_DELAY</p><p>MASTER_HEARTBEAT_PERIOD</p><p>MASTER_HOST</p><p>MASTER_LOG_FILE</p><p>MASTER_LOG_POS</p><p>MASTER_PASSWORD</p><p>MASTER_PORT</p><p>MASTER_PUBLIC_KEY_PATH; 在8.0.4中添加（非保留）</p><p>MASTER_RETRY_COUNT</p><p>MASTER_SERVER_ID</p><p>MASTER_SSL</p><p>MASTER_SSL_CA</p><p>MASTER_SSL_CAPATH</p><p>MASTER_SSL_CERT</p><p>MASTER_SSL_CIPHER</p><p>MASTER_SSL_CRL</p><p>MASTER_SSL_CRLPATH</p><p>MASTER_SSL_KEY</p><p>MASTER_SSL_VERIFY_SERVER_CERT （R）</p><p>MASTER_TLS_CIPHERSUITES; 在8.0.19中添加（非保留）</p><p>MASTER_TLS_VERSION</p><p>MASTER_USER</p><p>MASTER_ZSTD_COMPRESSION_LEVEL; 在8.0.18中添加（非保留）</p><p>MATCH （R）</p><p>MAXVALUE （R）</p><p>MAX_CONNECTIONS_PER_HOUR</p><p>MAX_QUERIES_PER_HOUR</p><p>MAX_ROWS</p><p>MAX_SIZE</p><p>MAX_UPDATES_PER_HOUR</p><p>MAX_USER_CONNECTIONS</p><p>MEDIUM</p><p>MEDIUMBLOB （R）</p><p>MEDIUMINT （R）</p><p>MEDIUMTEXT （R）</p><p>MEMBER; 在8.0.17中添加（保留）；在8.0.19中变为非保留</p><p>MEMORY</p><p>MERGE</p><p>MESSAGE_TEXT</p><p>MICROSECOND</p><p>MIDDLEINT （R）</p><p>MIGRATE</p><p>MINUTE</p><p>MINUTE_MICROSECOND （R）</p><p>MINUTE_SECOND （R）</p><p>MIN_ROWS</p><p>MOD （R）</p><p>MODE</p><p>MODIFIES （R）</p><p>MODIFY</p><p>MONTH</p><p>MULTILINESTRING</p><p>MULTIPOINT</p><p>MULTIPOLYGON</p><p>MUTEX</p><p>MYSQL_ERRNO</p><p>NAME</p><p>NAMES</p><p>NATIONAL</p><p>NATURAL （R）</p><p>NCHAR</p><p>NDB</p><p>NDBCLUSTER</p><p>NESTED; 在8.0.4中添加（非保留）</p><p>NETWORK_NAMESPACE; 在8.0.16中添加（非保留）</p><p>NEVER</p><p>NEW</p><p>NEXT</p><p>NO</p><p>NODEGROUP</p><p>NONE</p><p>NOT （R）</p><p>NOWAIT; 在8.0.1中添加（非保留）</p><p>NO_WAIT</p><p>NO_WRITE_TO_BINLOG （R）</p><p>NTH_VALUE（R）; 在8.0.2中添加（保留）</p><p>NTILE（R）; 在8.0.2中添加（保留）</p><p>NULL （R）</p><p>NULLS; 在8.0.2中添加（非保留）</p><p>NUMBER</p><p>NUMERIC （R）</p><p>NVARCHAR</p><p>OF（R）; 在8.0.1中添加（保留）</p><p>OFF; 在8.0.20中添加（非保留）</p><p>OFFSET</p><p>OJ; 在8.0.16中添加（非保留）</p><p>OLD; 在8.0.14中添加（非保留）</p><p>ON （R）</p><p>ONE</p><p>ONLY</p><p>OPEN</p><p>OPTIMIZE （R）</p><p>OPTIMIZER_COSTS （R）</p><p>OPTION （R）</p><p>OPTIONAL; 在8.0.13中添加（非保留）</p><p>OPTIONALLY （R）</p><p>OPTIONS</p><p>OR （R）</p><p>ORDER （R）</p><p>ORDINALITY; 在8.0.4中添加（非保留）</p><p>ORGANIZATION; 在8.0.4中添加（非保留）</p><p>OTHERS; 在8.0.2中添加（非保留）</p><p>OUT （R）</p><p>OUTER （R）</p><p>OUTFILE （R）</p><p>OVER（R）; 在8.0.2中添加（保留）</p><p>OWNER</p><p>PACK_KEYS</p><p>PAGE</p><p>PARSER</p><p>PARTIAL</p><p>PARTITION （R）</p><p>PARTITIONING</p><p>PARTITIONS</p><p>PASSWORD</p><p>PASSWORD_LOCK_TIME; 在8.0.19中添加（非保留）</p><p>PATH; 在8.0.4中添加（非保留）</p><p>PERCENT_RANK（R）; 在8.0.2中添加（保留）</p><p>PERSIST; 在8.0.16中变为非保留</p><p>PERSIST_ONLY; 在8.0.2中添加（保留）；在8.0.16中变为非保留</p><p>PHASE</p><p>PLUGIN</p><p>PLUGINS</p><p>PLUGIN_DIR</p><p>POINT</p><p>POLYGON</p><p>PORT</p><p>PRECEDES</p><p>PRECEDING; 在8.0.2中添加（非保留）</p><p>PRECISION （R）</p><p>PREPARE</p><p>PRESERVE</p><p>PREV</p><p>PRIMARY （R）</p><p>PRIVILEGES</p><p>PRIVILEGE_CHECKS_USER; 在8.0.18中添加（非保留）</p><p>PROCEDURE （R）</p><p>PROCESS; 在8.0.11中添加（非保留）</p><p>PROCESSLIST</p><p>PROFILE</p><p>PROFILES</p><p>PROXY</p><p>PURGE （R）</p><p>QUARTER</p><p>QUERY<br>QUICK<br>RANDOM; 在8.0.18中添加（非保留）</p><p>RANGE （R）</p><p>RANK（R）; 在8.0.2中添加（保留）</p><p>READ （R）</p><p>READS （R）</p><p>READ_ONLY</p><p>READ_WRITE （R）</p><p>REAL （R）</p><p>REBUILD</p><p>RECOVER</p><p>RECURSIVE（R）; 在8.0.1中添加（保留）</p><p>REDOFILE; 在8.0.3中删除</p><p>REDO_BUFFER_SIZE</p><p>REDUNDANT</p><p>REFERENCE; 在8.0.4中添加（非保留）</p><p>REFERENCES （R）</p><p>REGEXP （R）</p><p>RELAY</p><p>RELAYLOG</p><p>RELAY_LOG_FILE</p><p>RELAY_LOG_POS</p><p>RELAY_THREAD</p><p>RELEASE （R）</p><p>RELOAD</p><p>REMOTE; 在8.0.3中添加（非保留）；在8.0.14中删除</p><p>REMOVE</p><p>RENAME （R）</p><p>REORGANIZE</p><p>REPAIR</p><p>REPEAT （R）</p><p>REPEATABLE</p><p>REPLACE （R）</p><p>REPLICATE_DO_DB</p><p>REPLICATE_DO_TABLE</p><p>REPLICATE_IGNORE_DB</p><p>REPLICATE_IGNORE_TABLE</p><p>REPLICATE_REWRITE_DB</p><p>REPLICATE_WILD_DO_TABLE</p><p>REPLICATE_WILD_IGNORE_TABLE</p><p>REPLICATION</p><p>REQUIRE （R）</p><p>REQUIRE_ROW_FORMAT; 在8.0.19中添加（非保留）</p><p>RESET</p><p>RESIGNAL （R）</p><p>RESOURCE; 在8.0.3中添加（非保留）</p><p>RESPECT; 在8.0.2中添加（非保留）</p><p>RESTART; 在8.0.4中添加（非保留）</p><p>RESTORE</p><p>RESTRICT （R）</p><p>RESUME</p><p>RETAIN; 在8.0.14中添加（非保留）</p><p>RETURN （R）</p><p>RETURNED_SQLSTATE</p><p>RETURNING; 在8.0.21中添加（非保留）</p><p>RETURNS</p><p>REUSE; 在8.0.3中添加（非保留）</p><p>REVERSE</p><p>REVOKE （R）</p><p>RIGHT （R）</p><p>RLIKE （R）</p><p>ROLE; 在8.0.1中变为非保留</p><p>ROLLBACK</p><p>ROLLUP</p><p>ROTATE</p><p>ROUTINE</p><p>ROW（R）; 在8.0.2中保留</p><p>ROWS（R）; 在8.0.2中保留</p><p>ROW_COUNT</p><p>ROW_FORMAT</p><p>ROW_NUMBER（R）; 在8.0.2中添加（保留）</p><p>RTREE</p><p>SAVEPOINT</p><p>SCHEDULE</p><p>SCHEMA （R）</p><p>SCHEMAS （R）</p><p>SCHEMA_NAME</p><p>SECOND</p><p>SECONDARY; 在8.0.16中添加（非保留）</p><p>SECONDARY_ENGINE; 在8.0.13中添加（非保留）</p><p>SECONDARY_LOAD; 在8.0.13中添加（非保留）</p><p>SECONDARY_UNLOAD; 在8.0.13中添加（非保留）</p><p>SECOND_MICROSECOND （R）</p><p>SECURITY</p><p>SELECT （R）</p><p>SENSITIVE （R）</p><p>SEPARATOR （R）</p><p>SERIAL</p><p>SERIALIZABLE</p><p>SERVER</p><p>SESSION</p><p>SET （R）</p><p>SHARE</p><p>SHOW （R）</p><p>SHUTDOWN</p><p>SIGNAL （R）</p><p>SIGNED</p><p>SIMPLE</p><p>SKIP; 在8.0.1中添加（非保留）</p><p>SLAVE</p><p>SLOW</p><p>SMALLINT （R）</p><p>SNAPSHOT</p><p>SOCKET</p><p>SOME</p><p>SONAME</p><p>SOUNDS</p><p>SOURCE</p><p>SPATIAL （R）</p><p>SPECIFIC （R）</p><p>SQL （R）</p><p>SQLEXCEPTION （R）</p><p>SQLSTATE （R）</p><p>SQLWARNING （R）</p><p>SQL_AFTER_GTIDS</p><p>SQL_AFTER_MTS_GAPS</p><p>SQL_BEFORE_GTIDS</p><p>SQL_BIG_RESULT （R）</p><p>SQL_BUFFER_RESULT</p><p>SQL_CACHE; 在8.0.3中删除</p><p>SQL_CALC_FOUND_ROWS （R）</p><p>SQL_NO_CACHE</p><p>SQL_SMALL_RESULT （R）</p><p>SQL_THREAD</p><p>SQL_TSI_DAY</p><p>SQL_TSI_HOUR</p><p>SQL_TSI_MINUTE</p><p>SQL_TSI_MONTH</p><p>SQL_TSI_QUARTER</p><p>SQL_TSI_SECOND</p><p>SQL_TSI_WEEK</p><p>SQL_TSI_YEAR</p><p>SRID; 在8.0.3中添加（非保留）</p><p>SSL （R）</p><p>STACKED</p><p>START</p><p>STARTING （R）</p><p>STARTS</p><p>STATS_AUTO_RECALC</p><p>STATS_PERSISTENT</p><p>STATS_SAMPLE_PAGES</p><p>STATUS</p><p>STOP</p><p>STORAGE</p><p>STORED （R）</p><p>STRAIGHT_JOIN （R）</p><p>STREAM; 在8.0.20中添加（非保留）</p><p>STRING</p><p>SUBCLASS_ORIGIN</p><p>SUBJECT</p><p>SUBPARTITION</p><p>SUBPARTITIONS</p><p>SUPER</p><p>SUSPEND</p><p>SWAPS</p><p>SWITCHES</p><p>SYSTEM（R）; 在8.0.3中添加（保留）</p><p>TABLE （R）</p><p>TABLES</p><p>TABLESPACE</p><p>TABLE_CHECKSUM</p><p>TABLE_NAME</p><p>TEMPORARY</p><p>TEMPTABLE</p><p>TERMINATED （R）</p><p>TEXT</p><p>THAN</p><p>THEN （R）</p><p>THREAD_PRIORITY; 在8.0.3中添加（非保留）</p><p>TIES; 在8.0.2中添加（非保留）</p><p>TIME</p><p>TIMESTAMP</p><p>TIMESTAMPADD</p><p>TIMESTAMPDIFF</p><p>TINYBLOB （R）</p><p>TINYINT （R）</p><p>TINYTEXT （R）</p><p>TO （R）</p><p>TRAILING （R）</p><p>TRANSACTION</p><p>TRIGGER （R）</p><p>TRIGGERS</p><p>TRUE （R）</p><p>TRUNCATE</p><p>TYPE</p><p>TYPES</p><p>UNBOUNDED; 在8.0.2中添加（非保留）</p><p>UNCOMMITTED</p><p>UNDEFINED</p><p>UNDO （R）</p><p>UNDOFILE</p><p>UNDO_BUFFER_SIZE</p><p>UNICODE</p><p>UNINSTALL</p><p>UNION （R）</p><p>UNIQUE （R）</p><p>UNKNOWN</p><p>UNLOCK （R）</p><p>UNSIGNED （R）</p><p>UNTIL</p><p>UPDATE （R）</p><p>UPGRADE</p><p>USAGE （R）</p><p>USE （R）</p><p>USER</p><p>USER_RESOURCES</p><p>USE_FRM</p><p>USING （R）</p><p>UTC_DATE （R）</p><p>UTC_TIME （R）</p><p>UTC_TIMESTAMP （R）</p><p>VALIDATION</p><p>VALUE</p><p>VALUES （R）</p><p>VARBINARY （R）</p><p>VARCHAR （R）</p><p>VARCHARACTER （R）</p><p>VARIABLES</p><p>VARYING （R）</p><p>VCPU; 在8.0.3中添加（非保留）</p><p>VIEW</p><p>VIRTUAL （R）</p><p>VISIBLE</p><p>WAIT</p><p>WARNINGS</p><p>WEEK</p><p>WEIGHT_STRING</p><p>WHEN （R）</p><p>WHERE （R）</p><p>WHILE （R）</p><p>WINDOW（R）; 在8.0.2中添加（保留）</p><p>WITH （R）</p><p>WITHOUT</p><p>WORK</p><p>WRAPPER</p><p>WRITE （R）</p><p>X509</p><p>XA</p><p>XID</p><p>XML</p><p>XOR （R）</p><p>YEAR</p><p>YEAR_MONTH （R）</p><p>ZEROFILL （R）</p><p>下表显示了与MySQL 5.7相比在MySQL 8.0中添加的关键字和保留字。保留的关键字标有（R）</p><p>ACTIVE</p><p>ADMIN</p><p>ARRAY</p><p>BUCKETS</p><p>CLONE</p><p>COMPONENT</p><p>CUME_DIST （R）</p><p>DEFINITION</p><p>DENSE_RANK （R）</p><p>DESCRIPTION</p><p>EMPTY （右）</p><p>ENFORCED</p><p>EXCEPT （右）</p><p>EXCLUDE</p><p>FAILED_LOGIN_ATTEMPTS</p><p>FIRST_VALUE （R）<br>FOLLOWING</p><p>GEOMCOLLECTION</p><p>GET_MASTER_PUBLIC_KEY</p><p>GROUPING （R）</p><p>GROUPS （R）</p><p>HISTOGRAM</p><p>HISTORY</p><p>INACTIVE</p><p>INVISIBLE</p><p>JSON_TABLE （R）</p><p>JSON_VALUE</p><p>LAG （R）</p><p>LAST_VALUE （R）</p><p>LATERAL （R）</p><p>LEAD （R）</p><p>LOCKED</p><p>MASTER_COMPRESSION_ALGORITHMS</p><p>MASTER_PUBLIC_KEY_PATH</p><p>MASTER_TLS_CIPHERSUITES</p><p>MASTER_ZSTD_COMPRESSION_LEVEL</p><p>MEMBER</p><p>NESTED</p><p>NETWORK_NAMESPACE</p><p>NOWAIT</p><p>NTH_VALUE （R）</p><p>NTILE （R）</p><p>NULLS</p><p>OF （R）</p><p>OFF</p><p>OJ</p><p>OLD</p><p>OPTIONAL</p><p>ORDINALITY</p><p>ORGANIZATION</p><p>OTHERS</p><p>OVER （R）</p><p>PASSWORD_LOCK_TIME</p><p>PATH</p><p>PERCENT_RANK （R）</p><p>PERSIST</p><p>PERSIST_ONLY</p><p>PRECEDING</p><p>PRIVILEGE_CHECKS_USER</p><p>PROCESS</p><p>RANDOM</p><p>RANK （R）</p><p>RECURSIVE （R）</p><p>REFERENCE</p><p>REQUIRE_ROW_FORMAT</p><p>RESOURCE</p><p>RESPECT</p><p>RESTART</p><p>RETAIN</p><p>RETURNING</p><p>REUSE</p><p>ROLE</p><p>ROW_NUMBER （R）</p><p>SECONDARY</p><p>SECONDARY_ENGINE</p><p>SECONDARY_LOAD</p><p>SECONDARY_UNLOAD</p><p>SKIP</p><p>SRID</p><p>STREAM</p><p>SYSTEM（R）</p><p>THREAD_PRIORITY</p><p>TIES</p><p>UNBOUNDED</p><p>VCPU</p><p>VISIBLE</p><p>WINDOW （R）</p><p>MySQL 8.0删除了关键字和保留字<br>下表显示了与MySQL 5.7相比在MySQL 8.0中删除的关键字和保留词。保留的关键字标有（R）。</p><p>ANALYSE</p><p>DES_KEY_FILE</p><p>PARSE_GCOL_EXPR</p><p>REDOFILE</p><p>SQL_CACHE</p>]]></content>
    
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jackson常用方法总结</title>
    <link href="/posts/41167/"/>
    <url>/posts/41167/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近风闻FastJSON各种安全漏洞，果断更换以性能和灵活性著称的Jackson。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><ul><li>Java对象转JsonNode对象（3种方法）</li></ul><pre><code class="hljs plain">ObjectMapper mapper &#x3D; new ObjectMapper(); String json &#x3D; mapper.writeValueAsString(object);JsonNode jsonNode &#x3D; mapper.readTree(json);</code></pre><pre><code class="hljs plain">JsonNode node &#x3D; objectMapper.valueToTree(map);</code></pre><pre><code class="hljs plain">JsonNode node &#x3D; mapper.convertValue(object, JsonNode.class);</code></pre><ul><li><p>遍历JsonNode</p><pre><code class="hljs plain">JsonNode jsonNode &#x3D;  objectMapper.readTree(json);for (JsonNode node : jsonNode) &#123;log.info(node.toString());&#125;</code></pre></li><li><p>判断JsonNode是否数组</p><pre><code class="hljs plain">JsonNode jsonNode &#x3D;  objectMapper.readTree(json);boolean bool &#x3D; jsonNode.isArray();</code></pre></li><li><p>JsonNode转ArrayNode</p><pre><code class="hljs plain">ArrayNode arrayNode &#x3D; jsonNode.deepCopy();</code></pre></li><li><p>JsonNode更新值</p><pre><code class="hljs plain">&#x2F;&#x2F; 先转ObjectNode，再设置ObjectNode objectNode &#x3D; jsonNode.deepCopy();objectNode.put(&quot;a&quot;, &quot;b&quot;);jsonNode &#x3D; objectNode;</code></pre></li><li><p>ObjectMapper将json字符串转换为泛型List</p><pre><code class="hljs plain">JavaType javaType &#x3D; objectMapper.getTypeFactory().constructCollectionType(ArrayList.class, YourBean.class);List&lt;YourBean&gt; list &#x3D; objectMapper.readValue(json, javaType);</code></pre></li><li><p>asText()和textValue()区别</p></li></ul><ol><li>如果 字段本身的值为 text 类型 的, 那么用 asText() 和 textValue() 获取的结果是一致的;</li><li>如果 字段本身的值不是 text 类型的, 比如上面的 age 应该是数字类型的, 那么 asText() 会将最后的结果 16 转换为text 然后返回, 而 textValue() 则取不到值会返回空null, 此时需要用 intValue() /longValue()/数值类型的取值方法才能取到值;</li><li>同理 如果字段本身不是 int 整数型, 那么asInt() 会将获取的结果尝试转化为 int 然后返回, 而 intValue() 会返回空null;</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>jackson</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TortoiseGit正确使用ssh指南</title>
    <link href="/posts/31938/"/>
    <url>/posts/31938/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前一阵用TortoiseGit Clone SSH地址和Push时出现了一些问题，所幸最终全部解决，但着实费了一番功夫，赶紧来记录一下，避免下次再调到坑里。</p><p>本文将完整记录从生成RSA公钥到最终Push的过程，使用图文结合的方式，保证一看就懂、一学就会（一试就废）。</p><p>本文所有操作都在windows系统上，不提供mac教程（穷）。</p><h1 id="生成RSA公钥"><a href="#生成RSA公钥" class="headerlink" title="生成RSA公钥"></a>生成RSA公钥</h1><p>打开git-bash.exe，输入如下指令：</p><pre><code class="hljs plain">cd ~&#x2F;.ssh</code></pre><p><img src="https://img.hacpai.com/file/2020/04/image-22c37133.png" srcset="/img/loading.gif" alt="image.png"></p><pre><code class="hljs plain">ssh-keygen -t rsa -C &quot;wujiawei0926@yeah.net&quot;</code></pre><p><img src="https://img.hacpai.com/file/2020/04/image-5108dd4e.png" srcset="/img/loading.gif" alt="image.png"></p><p>这里的邮箱，直接填写git配置的邮箱即可。</p><p>输完后回车，会要求输入密码，如果不需要密码的话，直接敲3个回车。</p><p><img src="https://img.hacpai.com/file/2020/04/image-7a9e8de6.png" srcset="/img/loading.gif" alt="image.png"></p><p>生成的rsa公钥在<code>C:\Users\你的账户\.ssh</code>目录中。</p><h1 id="Git仓库中添加RSA公钥"><a href="#Git仓库中添加RSA公钥" class="headerlink" title="Git仓库中添加RSA公钥"></a>Git仓库中添加RSA公钥</h1><p>以Github为例，按图示点击：</p><p><img src="https://img.hacpai.com/file/2020/04/image-d79b3da1.png" srcset="/img/loading.gif" alt="image.png"></p><p><img src="https://img.hacpai.com/file/2020/04/image-544705bc.png" srcset="/img/loading.gif" alt="image.png"></p><p>使用文本编辑器打开<code>id_rsa.pub</code>文件，全选复制内容，如下图：</p><p><img src="https://img.hacpai.com/file/2020/04/image-6a61a6cb.png" srcset="/img/loading.gif" alt="image.png"></p><p>将复制的内容粘贴到Github-Deploy-Key中，如下图：</p><p><img src="https://img.hacpai.com/file/2020/04/image-752b3d0b.png" srcset="/img/loading.gif" alt="image.png"></p><p>注意勾选<code>Allow write access</code>，给予写的权限，点击<code>Add key</code>完成添加。</p><p><img src="https://img.hacpai.com/file/2020/04/image-cc0480f6.png" srcset="/img/loading.gif" alt="image.png"></p><h1 id="配置TortoiseGit-SSH-client"><a href="#配置TortoiseGit-SSH-client" class="headerlink" title="配置TortoiseGit SSH client"></a>配置TortoiseGit SSH client</h1><p><img src="https://img.hacpai.com/file/2020/04/%E5%B0%8F%E4%B9%8C%E9%BE%9F%E8%AE%BE%E7%BD%AESSHClient-e484a85a.png" srcset="/img/loading.gif" alt="小乌龟设置SSHClient.png"></p><p>如图所示，必须修改SSH client文件为git的<code>\usr\bin\ssh.exe</code>，否则会出现权限问题</p><h1 id="Clone"><a href="#Clone" class="headerlink" title="Clone"></a>Clone</h1><p>在文件资源管理器中右键<code>Git clone</code></p><p><img src="https://img.hacpai.com/file/2020/04/image-e0f24a6a.png" srcset="/img/loading.gif" alt="image.png"></p><p>输入ssh地址</p><p><img src="https://img.hacpai.com/file/2020/04/image-58b4d90e.png" srcset="/img/loading.gif" alt="image.png"></p><p>如果出现了下图弹窗，重新全选复制rsa密钥进去，点击OK，再第二个弹窗中输入yes，再点OK即可</p><p><img src="https://img.hacpai.com/file/2020/04/%E5%BC%80%E5%A7%8B%E5%85%8B%E9%9A%86%E8%BE%93%E5%85%A5rsa-96677b79.png" srcset="/img/loading.gif" alt="开始克隆输入rsa.png"></p><p>然后就可以顺利开始Clone了</p><p><img src="https://img.hacpai.com/file/2020/04/%E5%85%8B%E9%9A%86%E4%B8%AD-8dfe3738.png" srcset="/img/loading.gif" alt="克隆中.png"></p><p>完成！</p><p><img src="https://img.hacpai.com/file/2020/04/image-302935e9.png" srcset="/img/loading.gif" alt="image.png"></p><h1 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h1><p>代码commit之后，进行push，步骤与往常一样。</p><p><img src="https://img.hacpai.com/file/2020/04/image-f9e666fa.png" srcset="/img/loading.gif" alt="image.png"></p><p><img src="https://img.hacpai.com/file/2020/04/image-c21ed216.png" srcset="/img/loading.gif" alt="image.png"></p><p>push中</p><p><img src="https://img.hacpai.com/file/2020/04/image-365ee76f.png" srcset="/img/loading.gif" alt="image.png"></p><p>完成！</p><p><img src="https://img.hacpai.com/file/2020/04/image-94774170.png" srcset="/img/loading.gif" alt="image.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis(Plus)结合Redis配置二级缓存</title>
    <link href="/posts/58332/"/>
    <url>/posts/58332/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img.hacpai.com/bing/20200128.jpg?imageView2/1/w/960/h/540/interlace/1/q/100" srcset="/img/loading.gif" alt=""> </p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>众所周知，Mybatis有一级、二级缓存配置。</p><p>一级缓存是SqlSession将每次查询结果保存到Cache中，下次有一样的查询就直接存Cache中获取，避免频繁读写造成数据库资源浪费。</p><p>但是一级缓存终究只是在Cache中，性能相较于EhCache或Redis等有差异，因此我们决定开启二级缓存，并将缓存直接保存到外部Redis中，保证资源的有效利用。</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>本文涉及代码依赖于SpringBoot、Lombok，使用了部分SpringBoot、Lombok的特性，对于Lombok不甚了解的同学可以预先学习一下。</p><h1 id="实现Cache"><a href="#实现Cache" class="headerlink" title="实现Cache"></a>实现Cache</h1><p>通过查看源码可以看到，Mybatis默认实现的缓存全部实现了Cache接口，我们要使用Redis管理缓存，同样需要实现Cache接口。</p><p><img src="https://img.hacpai.com/file/2020/04/image-2bd6584e.png" srcset="/img/loading.gif" alt="image.png"></p><p>但是不要着急，我们新建两个工具类和一个Redis配置类。</p><ul><li><code>RedisUtil</code>：用于维护Redis，实际上是对<code>RedisTemplate</code>进行了再封装</li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.w.common.utils;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<span class="hljs-keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<span class="hljs-keyword">import</span> org.springframework.util.CollectionUtils;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-keyword">import</span> java.util.Set;<span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<span class="hljs-comment">/**</span><span class="hljs-comment"> * redis 工具类</span><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> Scott</span><span class="hljs-comment"> *</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisUtil</span> </span>&#123;<span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;<span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 指定缓存失效时间</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key  键</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> time 时间(秒)</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">expire</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> time)</span> </span>&#123;<span class="hljs-keyword">try</span> &#123;<span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;redisTemplate.expire(key, time, TimeUnit.SECONDS);&#125;<span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();<span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 根据key 获取过期时间</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key 键 不能为null</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 时间(秒) 返回0代表为永久有效</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getExpire</span><span class="hljs-params">(String key)</span> </span>&#123;<span class="hljs-keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 判断key是否存在</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key 键</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> true 存在 false不存在</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasKey</span><span class="hljs-params">(String key)</span> </span>&#123;<span class="hljs-keyword">try</span> &#123;<span class="hljs-keyword">return</span> redisTemplate.hasKey(key);&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();<span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 删除缓存</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key 可以传一个值 或多个</span><span class="hljs-comment"> */</span><span class="hljs-meta">@SuppressWarnings</span>(<span class="hljs-string">"unchecked"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(String... key)</span> </span>&#123;<span class="hljs-keyword">if</span> (key != <span class="hljs-keyword">null</span> &amp;&amp; key.length &gt; <span class="hljs-number">0</span>) &#123;<span class="hljs-keyword">if</span> (key.length == <span class="hljs-number">1</span>) &#123;redisTemplate.delete(key[<span class="hljs-number">0</span>]);&#125; <span class="hljs-keyword">else</span> &#123;redisTemplate.delete(CollectionUtils.arrayToList(key));&#125;&#125;&#125;<span class="hljs-comment">// ============================String=============================</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * 普通缓存获取</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key 键</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 值</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">get</span><span class="hljs-params">(String key)</span> </span>&#123;<span class="hljs-keyword">return</span> key == <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">null</span> : redisTemplate.opsForValue().get(key);&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 普通缓存放入</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key   键</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> value 值</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> true成功 false失败</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">set</span><span class="hljs-params">(String key, Object value)</span> </span>&#123;<span class="hljs-keyword">try</span> &#123;redisTemplate.opsForValue().set(key, value);<span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();<span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 普通缓存放入并设置时间</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key   键</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> value 值</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> true成功 false 失败</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">set</span><span class="hljs-params">(String key, Object value, <span class="hljs-keyword">long</span> time)</span> </span>&#123;<span class="hljs-keyword">try</span> &#123;<span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);&#125; <span class="hljs-keyword">else</span> &#123;set(key, value);&#125;<span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();<span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 递增</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key 键</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> by  要增加几(大于0)</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">incr</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> delta)</span> </span>&#123;<span class="hljs-keyword">if</span> (delta &lt; <span class="hljs-number">0</span>) &#123;<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">"递增因子必须大于0"</span>);&#125;<span class="hljs-keyword">return</span> redisTemplate.opsForValue().increment(key, delta);&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 递减</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key 键</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> by  要减少几(小于0)</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">decr</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> delta)</span> </span>&#123;<span class="hljs-keyword">if</span> (delta &lt; <span class="hljs-number">0</span>) &#123;<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">"递减因子必须大于0"</span>);&#125;<span class="hljs-keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);&#125;<span class="hljs-comment">// ================================Map=================================</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * HashGet</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key  键 不能为null</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> item 项 不能为null</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 值</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">hget</span><span class="hljs-params">(String key, String item)</span> </span>&#123;<span class="hljs-keyword">return</span> redisTemplate.opsForHash().get(key, item);&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 获取hashKey对应的所有键值</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key 键</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 对应的多个键值</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;Object, Object&gt; <span class="hljs-title">hmget</span><span class="hljs-params">(String key)</span> </span>&#123;<span class="hljs-keyword">return</span> redisTemplate.opsForHash().entries(key);&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * HashSet</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key 键</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> map 对应多个键值</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> true 成功 false 失败</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hmset</span><span class="hljs-params">(String key, Map&lt;String, Object&gt; map)</span> </span>&#123;<span class="hljs-keyword">try</span> &#123;redisTemplate.opsForHash().putAll(key, map);<span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();<span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * HashSet 并设置时间</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key  键</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> map  对应多个键值</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> time 时间(秒)</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> true成功 false失败</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hmset</span><span class="hljs-params">(String key, Map&lt;String, Object&gt; map, <span class="hljs-keyword">long</span> time)</span> </span>&#123;<span class="hljs-keyword">try</span> &#123;redisTemplate.opsForHash().putAll(key, map);<span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;expire(key, time);&#125;<span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();<span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 向一张hash表中放入数据,如果不存在将创建</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key   键</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> item  项</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> value 值</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> true 成功 false失败</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hset</span><span class="hljs-params">(String key, String item, Object value)</span> </span>&#123;<span class="hljs-keyword">try</span> &#123;redisTemplate.opsForHash().put(key, item, value);<span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();<span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 向一张hash表中放入数据,如果不存在将创建</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key   键</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> item  项</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> value 值</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> true 成功 false失败</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hset</span><span class="hljs-params">(String key, String item, Object value, <span class="hljs-keyword">long</span> time)</span> </span>&#123;<span class="hljs-keyword">try</span> &#123;redisTemplate.opsForHash().put(key, item, value);<span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;expire(key, time);&#125;<span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();<span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 删除hash表中的值</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key  键 不能为null</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> item 项 可以使多个 不能为null</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">hdel</span><span class="hljs-params">(String key, Object... item)</span> </span>&#123;<span class="hljs-keyword">return</span> redisTemplate.opsForHash().delete(key, item);&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 判断hash表中是否有该项的值</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key  键 不能为null</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> item 项 不能为null</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> true 存在 false不存在</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hHasKey</span><span class="hljs-params">(String key, String item)</span> </span>&#123;<span class="hljs-keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key  键</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> item 项</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> by   要增加几(大于0)</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">hincr</span><span class="hljs-params">(String key, String item, <span class="hljs-keyword">double</span> by)</span> </span>&#123;<span class="hljs-keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * hash递减</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key  键</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> item 项</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> by   要减少记(小于0)</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">hdecr</span><span class="hljs-params">(String key, String item, <span class="hljs-keyword">double</span> by)</span> </span>&#123;<span class="hljs-keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * hash键数量</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hsize</span><span class="hljs-params">(String key)</span> </span>&#123;<span class="hljs-keyword">return</span> redisTemplate.opsForHash().size(key).intValue();&#125;<span class="hljs-comment">// ============================set=============================</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * 根据key获取Set中的所有值</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key 键</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> Set&lt;Object&gt; <span class="hljs-title">sGet</span><span class="hljs-params">(String key)</span> </span>&#123;<span class="hljs-keyword">try</span> &#123;<span class="hljs-keyword">return</span> redisTemplate.opsForSet().members(key);&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();<span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 根据value从一个set中查询,是否存在</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key   键</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> value 值</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> true 存在 false不存在</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">sHasKey</span><span class="hljs-params">(String key, Object value)</span> </span>&#123;<span class="hljs-keyword">try</span> &#123;<span class="hljs-keyword">return</span> redisTemplate.opsForSet().isMember(key, value);&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();<span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 将数据放入set缓存</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key    键</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> values 值 可以是多个</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 成功个数</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">sSet</span><span class="hljs-params">(String key, Object... values)</span> </span>&#123;<span class="hljs-keyword">try</span> &#123;<span class="hljs-keyword">return</span> redisTemplate.opsForSet().add(key, values);&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 将set数据放入缓存</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key    键</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> time   时间(秒)</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> values 值 可以是多个</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 成功个数</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">sSetAndTime</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> time, Object... values)</span> </span>&#123;<span class="hljs-keyword">try</span> &#123;Long count = redisTemplate.opsForSet().add(key, values);<span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;expire(key, time);&#125;<span class="hljs-keyword">return</span> count;&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 获取set缓存的长度</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key 键</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">sGetSetSize</span><span class="hljs-params">(String key)</span> </span>&#123;<span class="hljs-keyword">try</span> &#123;<span class="hljs-keyword">return</span> redisTemplate.opsForSet().size(key);&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 移除值为value的</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key    键</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> values 值 可以是多个</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 移除的个数</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">setRemove</span><span class="hljs-params">(String key, Object... values)</span> </span>&#123;<span class="hljs-keyword">try</span> &#123;Long count = redisTemplate.opsForSet().remove(key, values);<span class="hljs-keyword">return</span> count;&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;&#125;<span class="hljs-comment">// ===============================list=================================</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * 获取list缓存的内容</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key   键</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> start 开始</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> end   结束 0 到 -1代表所有值</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title">lGet</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> start, <span class="hljs-keyword">long</span> end)</span> </span>&#123;<span class="hljs-keyword">try</span> &#123;<span class="hljs-keyword">return</span> redisTemplate.opsForList().range(key, start, end);&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();<span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 获取list缓存的长度</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key 键</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">lGetListSize</span><span class="hljs-params">(String key)</span> </span>&#123;<span class="hljs-keyword">try</span> &#123;<span class="hljs-keyword">return</span> redisTemplate.opsForList().size(key);&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 通过索引 获取list中的值</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key   键</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">lGetIndex</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> index)</span> </span>&#123;<span class="hljs-keyword">try</span> &#123;<span class="hljs-keyword">return</span> redisTemplate.opsForList().index(key, index);&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();<span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 将list放入缓存</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key   键</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> value 值</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> time  时间(秒)</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">lSet</span><span class="hljs-params">(String key, Object value)</span> </span>&#123;<span class="hljs-keyword">try</span> &#123;redisTemplate.opsForList().rightPush(key, value);<span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();<span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 将list放入缓存</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key   键</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> value 值</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> time  时间(秒)</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">lSet</span><span class="hljs-params">(String key, Object value, <span class="hljs-keyword">long</span> time)</span> </span>&#123;<span class="hljs-keyword">try</span> &#123;redisTemplate.opsForList().rightPush(key, value);<span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;expire(key, time);&#125;<span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();<span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 将list放入缓存</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key   键</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> value 值</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> time  时间(秒)</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">lSet</span><span class="hljs-params">(String key, List&lt;Object&gt; value)</span> </span>&#123;<span class="hljs-keyword">try</span> &#123;redisTemplate.opsForList().rightPushAll(key, value);<span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();<span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 将list放入缓存</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key   键</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> value 值</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> time  时间(秒)</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">lSet</span><span class="hljs-params">(String key, List&lt;Object&gt; value, <span class="hljs-keyword">long</span> time)</span> </span>&#123;<span class="hljs-keyword">try</span> &#123;redisTemplate.opsForList().rightPushAll(key, value);<span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;expire(key, time);&#125;<span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();<span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 根据索引修改list中的某条数据</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key   键</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> index 索引</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> value 值</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">lUpdateIndex</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> index, Object value)</span> </span>&#123;<span class="hljs-keyword">try</span> &#123;redisTemplate.opsForList().set(key, index, value);<span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();<span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 移除N个值为value</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key   键</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> count 移除多少个</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> value 值</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 移除的个数</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">lRemove</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> count, Object value)</span> </span>&#123;<span class="hljs-keyword">try</span> &#123;Long remove = redisTemplate.opsForList().remove(key, count, value);<span class="hljs-keyword">return</span> remove;&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;&#125;<span class="hljs-comment">// ===============================sorted set 有序集合=================================</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * 添加一个元素</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> value</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> score</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">zAdd</span><span class="hljs-params">(String key, Object value, <span class="hljs-keyword">double</span> score)</span></span>&#123;redisTemplate.opsForZSet().add(key, value, score);&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 返回有序集中，成员的分数值</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> value</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">zScore</span><span class="hljs-params">(String key, Object value)</span> </span>&#123;Double d = redisTemplate.opsForZSet().score(key, value);d = d == <span class="hljs-keyword">null</span> ? <span class="hljs-number">0L</span> : d;<span class="hljs-keyword">return</span> d;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 判断value在zset中的排名</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> value</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> Long <span class="hljs-title">zRank</span><span class="hljs-params">(String key, Object value)</span> </span>&#123;Long index = redisTemplate.opsForZSet().rank(key, value);index = index == <span class="hljs-keyword">null</span> ? <span class="hljs-number">0L</span> : index;<span class="hljs-keyword">return</span> index;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 查询集合中指定顺序的值和score</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * （start=0 &amp; end = -1）表示获取全部的集合内容</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> start</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> end</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> Set&lt;Object&gt; <span class="hljs-title">zRangeWithScore</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> start, <span class="hljs-keyword">long</span> end)</span> </span>&#123;<span class="hljs-keyword">return</span> redisTemplate.opsForZSet().rangeByScore(key, start, end);&#125;&#125;</code></pre><ul><li><code>SpringContextUtils</code>：维护Spring中的实例</li></ul><pre><code class="hljs plain">package com.w.common.utils;import org.springframework.beans.BeansException;import org.springframework.context.ApplicationContext;import org.springframework.context.ApplicationContextAware;import org.springframework.stereotype.Component;import org.springframework.web.context.request.RequestContextHolder;import org.springframework.web.context.request.ServletRequestAttributes;import javax.servlet.http.HttpServletRequest;@Componentpublic class SpringContextUtils implements ApplicationContextAware &#123;&#x2F;** * 上下文对象实例 *&#x2F;private static ApplicationContext applicationContext;@Overridepublic void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123;SpringContextUtils.applicationContext &#x3D; applicationContext;&#125;&#x2F;** * 获取applicationContext * * @return *&#x2F;public static ApplicationContext getApplicationContext() &#123;return applicationContext;&#125;&#x2F;**  * 获取HttpServletRequest *&#x2F;public static HttpServletRequest getHttpServletRequest() &#123;return ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();&#125;public static String getDomain()&#123;HttpServletRequest request &#x3D; getHttpServletRequest();StringBuffer url &#x3D; request.getRequestURL();return url.delete(url.length() - request.getRequestURI().length(), url.length()).toString();&#125;public static String getOrigin()&#123;HttpServletRequest request &#x3D; getHttpServletRequest();return request.getHeader(&quot;Origin&quot;);&#125;&#x2F;** * 通过name获取 Bean. * * @param name * @return *&#x2F;public static Object getBean(String name) &#123;return getApplicationContext().getBean(name);&#125;&#x2F;** * 通过class获取Bean. * * @param clazz * @param       &lt;T&gt; * @return *&#x2F;public static &lt;T&gt; T getBean(Class&lt;T&gt; clazz) &#123;return getApplicationContext().getBean(clazz);&#125;&#x2F;** * 通过name,以及Clazz返回指定的Bean * * @param name * @param clazz * @param       &lt;T&gt; * @return *&#x2F;public static &lt;T&gt; T getBean(String name, Class&lt;T&gt; clazz) &#123;return getApplicationContext().getBean(name, clazz);&#125;&#125;</code></pre><ul><li><code>RedisConfig</code>：配置Redis的<code>RedisTemplate</code>和<code>CacheManager</code>并载入Spring IOC容器</li></ul><pre><code class="hljs plain">package com.w.common.config;import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;import com.fasterxml.jackson.annotation.PropertyAccessor;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;import org.springframework.cache.CacheManager;import org.springframework.cache.annotation.CachingConfigurerSupport;import org.springframework.cache.annotation.EnableCaching;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.data.redis.cache.RedisCacheConfiguration;import org.springframework.data.redis.cache.RedisCacheManager;import org.springframework.data.redis.cache.RedisCacheWriter;import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.serializer.*;import javax.annotation.Resource;import java.time.Duration;import static java.util.Collections.singletonMap;@Configuration@EnableCaching &#x2F;&#x2F; 开启缓存支持public class RedisConfig extends CachingConfigurerSupport &#123;@Resourceprivate LettuceConnectionFactory lettuceConnectionFactory;&#x2F;** * RedisTemplate配置 * * @param lettuceConnectionFactory * @return *&#x2F;@Beanpublic RedisTemplate&lt;String, Object&gt; redisTemplate(LettuceConnectionFactory lettuceConnectionFactory) &#123;&#x2F;&#x2F; 设置序列化Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer &#x3D; new Jackson2JsonRedisSerializer&lt;Object&gt;(Object.class);ObjectMapper om &#x3D; new ObjectMapper();om.setVisibility(PropertyAccessor.ALL, Visibility.ANY);om.enableDefaultTyping(DefaultTyping.NON_FINAL);jackson2JsonRedisSerializer.setObjectMapper(om);&#x2F;&#x2F; 配置redisTemplateRedisTemplate&lt;String, Object&gt; redisTemplate &#x3D; new RedisTemplate&lt;String, Object&gt;();redisTemplate.setConnectionFactory(lettuceConnectionFactory);RedisSerializer&lt;?&gt; stringSerializer &#x3D; new StringRedisSerializer();redisTemplate.setKeySerializer(stringSerializer);&#x2F;&#x2F; key序列化redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);&#x2F;&#x2F; value序列化redisTemplate.setHashKeySerializer(stringSerializer);&#x2F;&#x2F; Hash key序列化redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);&#x2F;&#x2F; Hash value序列化redisTemplate.afterPropertiesSet();return redisTemplate;&#125;&#x2F;** * 缓存配置管理器 * * @param factory * @return *&#x2F;@Bean()public CacheManager cacheManager(LettuceConnectionFactory factory) &#123;        &#x2F;&#x2F; 配置序列化（缓存默认有效期 6小时）        RedisCacheConfiguration config &#x3D; RedisCacheConfiguration.defaultCacheConfig().entryTtl(Duration.ofHours(6));        RedisCacheConfiguration redisCacheConfiguration &#x3D; config.serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(new StringRedisSerializer()))                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(new GenericJackson2JsonRedisSerializer()));        &#x2F;* 自定义配置test:demo 的超时时间为 5分钟*&#x2F;RedisCacheManager cacheManager &#x3D; RedisCacheManager.builder(RedisCacheWriter.lockingRedisCacheWriter(factory)).cacheDefaults(redisCacheConfiguration).withInitialCacheConfigurations(singletonMap(&quot;test:demo&quot;, RedisCacheConfiguration.defaultCacheConfig().entryTtl(Duration.ofMinutes(5)).disableCachingNullValues())).transactionAware().build();return cacheManager;&#125;&#125;</code></pre><ul><li>上面上个类创建完成后，就可以着手开始<code>MybatisRedisCache</code>类了，代码如下：</li></ul><pre><code class="hljs plain">package com.w.common.config;import com.w.common.utils.RedisUtil;import com.w.common.utils.SpringContextUtils;import lombok.Setter;import org.apache.ibatis.cache.Cache;import org.springframework.stereotype.Component;import java.util.concurrent.locks.ReadWriteLock;import java.util.concurrent.locks.ReentrantReadWriteLock;&#x2F;** * @author wujiawei0926@yeah.net * @see * @since 2020&#x2F;3&#x2F;6 *&#x2F;@Componentpublic class MybatisRedisCache implements Cache &#123;    private RedisUtil redisUtil;    private RedisUtil getRedis()&#123;        return SpringContextUtils.getBean(RedisUtil.class);    &#125;    private final ReadWriteLock readWriteLock &#x3D; new ReentrantReadWriteLock();    &#x2F;**     * 缓存刷新时间（秒）     *&#x2F;    @Setter    private long flushInterval &#x3D; 0L;    private String id;    public MybatisRedisCache() &#123;&#125;    public MybatisRedisCache(final String id) &#123;        if (id &#x3D;&#x3D; null) &#123;            throw new IllegalArgumentException(&quot;Cache instances require an ID&quot;);        &#125;        this.id &#x3D; id;    &#125;    @Override    public String getId() &#123;        return this.id;    &#125;    @Override    public void putObject(Object o, Object o1) &#123;        getRedis().hset(getId(), o.toString(), o1);        if (flushInterval &gt; 0L) &#123;            getRedis().expire(getId(), flushInterval);        &#125;    &#125;    @Override    public Object getObject(Object o) &#123;        return getRedis().hget(getId(), o.toString());    &#125;    @Override    public Object removeObject(Object o) &#123;        return getRedis().hdel(getId(), o);    &#125;    @Override    public void clear() &#123;        getRedis().del(getId());    &#125;    @Override    public int getSize() &#123;        return getRedis().hsize(getId());    &#125;    @Override    public ReadWriteLock getReadWriteLock() &#123;        return readWriteLock;    &#125;&#125;</code></pre><h1 id="添加缓存注解"><a href="#添加缓存注解" class="headerlink" title="添加缓存注解"></a>添加缓存注解</h1><p>缓存类创建完成之后，需要告诉Mybatis使用我们创建好的<code>MybatisRedisCache</code>。</p><p>Mybatis支持两种方式添加缓存注解，以下方案<strong>二选一</strong>即可：</p><ul><li>添加缓存注解<code>@CacheNamespace</code></li></ul><p>在代码中为每个mapper添加缓存注解，声明 implementation <strong>或</strong> eviction 的值为 <code>MybatisRedisCache</code></p><pre><code class="hljs plain">@CacheNamespace(implementation &#x3D; MybatisRedisCache.class,eviction&#x3D;MybatisRedisCache.class)public interface UserMapper extends BaseMapper&lt;User&gt; &#123;&#125;</code></pre><ul><li>在对应的 mapper.xml 中将原有注释修改为链接式声明，以保证 xml 文件里的缓存能够正常</li></ul><pre><code class="hljs plain">&lt;cache-ref namespace&#x3D;&quot;com.w.mapper.UserMapper&quot;&gt;&lt;&#x2F;cache-ref&gt;</code></pre><h1 id="开启缓存"><a href="#开启缓存" class="headerlink" title="开启缓存"></a>开启缓存</h1><p>Mybatis和MybatisPlus都需要在配置文件中开启二级缓存，但略有所不同</p><ul><li>Mybatis</li></ul><pre><code class="hljs plain">mybatis.configuration.cache-enabled&#x3D;true</code></pre><ul><li>MybatisPlus</li></ul><pre><code class="hljs plain">mybatis-plus.configuration.cache-enabled&#x3D;true</code></pre><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>如此这般那般，开启成功，测试一下，完成。</p>]]></content>
    
    
    
    <tags>
      
      <tag>mybatis</tag>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB入门指南</title>
    <link href="/posts/14426/"/>
    <url>/posts/14426/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img.hacpai.com/bing/20190629.jpg?imageView2/1/w/960/h/540/interlace/1/q/100" srcset="/img/loading.gif" alt=""></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近项目中计划引入MongoDB，全面替换Mysql。作为非关系型数据库，要替换关系型数据库，代码改动量不可小觑，并且由于没有实战经验，不免要踩一些坑。</p><p>在这里记录完整的学习和踩坑笔记，一来巩固自身理解、加深记忆，二来为后来者提供学习的平台。</p><p>当然传统上来说，使用非关系型数据库全面替换关系型数据库的操作并不可取，更合理的做法是将两者结合，传统业务使用关系型数据，类似日志、文件存储等增长规模很快的数据切换为非关系型数据库。</p><h1 id="MongoDB是什么"><a href="#MongoDB是什么" class="headerlink" title="MongoDB是什么"></a>MongoDB是什么</h1><p>MongoDB是一种面向文档的数据库数据库管理系统，用C++等语言撰写而成，官方支持的驱动有C,C++,C#,Java,PHP,Python,Go等,加上其他非官方的驱动，基本覆盖市面上的常用语言。</p><p>MongoDB将数据存储在类似JSON的文档中，并且文档中每个json串结构可能有所不同。</p><p>MangoDB可以在不定义结构（文档）的情况下创建记录，这被称为“动态模式”。</p><h1 id="为什么要用MongoDB"><a href="#为什么要用MongoDB" class="headerlink" title="为什么要用MongoDB"></a>为什么要用MongoDB</h1><p>MongoDB能够更快地构建应用程序，处理高度多样化的数据类型，更有效的管理应用程序。</p><p>其简化了开发，可以避免传统的ORM（对象关系映射），即将代码中的对象转换为关系表。</p><p>性能更强劲，这里贴一张知乎上的测试统计：</p><p><img src="https://pic2.zhimg.com/80/v2-22576cbb5359b5daf8347e5286ab8ed5_720w.jpg" srcset="/img/loading.gif" alt=""></p><p>当然最重要的还是大厂都在用，同时为了拓展知识面。</p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>MongoDB中引入了全新的集合、文档机制，首次接触感觉晦涩难懂，但是如果将它和mysql的术语放到一起，就会变得比较容易接受。</p><table><thead><tr><th>SQL术语/概念</th><th>MongoDB术语/概念</th><th>解释/说明</th></tr></thead><tbody><tr><td>database</td><td>database</td><td>数据库</td></tr><tr><td>table</td><td>collection</td><td>数据库表/集合</td></tr><tr><td>row</td><td>document</td><td>数据记录行/文档</td></tr><tr><td>column</td><td>field</td><td>数据字段/域</td></tr><tr><td>index</td><td>index</td><td>索引</td></tr><tr><td>table joins</td><td></td><td>表连接,MongoDB不支持</td></tr><tr><td>primary key</td><td>primary key</td><td>主键,MongoDb自动将_id字段设置为主键</td></tr></tbody></table><p>下图实例，可以更直观了解：</p><p><img src="https://www.runoob.com/wp-content/uploads/2013/10/Figure-1-Mapping-Table-to-Collection-1.png" srcset="/img/loading.gif" alt=""></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>略</p><h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><p>以下内容将讲解连接、增删改查等语法。</p><h3 id="标准URI连接语法"><a href="#标准URI连接语法" class="headerlink" title="标准URI连接语法"></a>标准URI连接语法</h3><pre><code class="hljs plain">mongodb:&#x2F;&#x2F;[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][&#x2F;[database][?options]]</code></pre><ul><li><strong>mongodb://</strong> 这是固定的格式，必须要指定。</li><li><strong>username:password@</strong> 可选项，如果设置，在连接数据库服务器之后，驱动都会尝试登陆这个数据库</li><li><strong>host1</strong> 必须的指定至少一个host, host1 是这个URI唯一要填写的。它指定了要连接服务器的地址。如果要连接复制集，请指定多个主机地址。</li><li><strong>portX</strong> 可选的指定端口，如果不填，默认为27017</li><li>*<em>/database *</em>如果指定username:password@，连接并验证登陆指定数据库。若不指定，默认打开 test 数据库。</li><li><strong>?options</strong> 是连接选项。如果不使用/database，则前面需要加上/。所有连接选项都是键值对name=value，键值对之间通过&amp;或;（分号）隔开</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>感谢以下资料对我的学习和文章的编写提供的不可或缺的帮助，以下排名不分先后。</p><p><a href="https://zh.wikipedia.org/wiki/MongoDB" target="_blank" rel="noopener">维基百科-MongoDB</a></p><p><a href="https://juejin.im/post/5d1883a05188255eea62e096" target="_blank" rel="noopener">掘金-MongoDB快速入门</a></p><p><a href="https://zhuanlan.zhihu.com/p/52810103" target="_blank" rel="noopener">知乎-我为什么放弃MySQL？选择了MongoDB</a></p><p><a href="https://juejin.im/entry/5a18b88951882554b8373e20" target="_blank" rel="noopener">掘金-MySQL 和 MongoDB 对比，一文看全</a></p><p><a href="https://www.runoob.com/mongodb/mongodb-tutorial.html" target="_blank" rel="noopener">菜鸟教程-MandoDB</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>mangodb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>github markdown 支持的 emoji 完整列表</title>
    <link href="/posts/7912/"/>
    <url>/posts/7912/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img.hacpai.com/bing/20190617.jpg?imageView2/1/w/960/h/540/interlace/1/q/100" srcset="/img/loading.gif" alt=""></p><p>People</p><p>| — | — | — |<br>| :bowtie:<code>:bowtie:</code> | 😄<code>:smile:</code> | 😆<code>:laughing:</code> |<br>| 😊<code>:blush:</code> | 😃<code>:smiley:</code> | ☺️<code>:relaxed:</code> |<br>| 😏<code>:smirk:</code> | 😍<code>:heart_eyes:</code> | 😘<code>:kissing_heart:</code> |<br>| 😚<code>:kissing_closed_eyes:</code> | 😳<code>:flushed:</code> | 😌<code>:relieved:</code> |<br>| 😆<code>:satisfied:</code> | 😁<code>:grin:</code> | 😉<code>:wink:</code> |<br>| 😜<code>:stuck_out_tongue_winking_eye:</code> | 😝<code>:stuck_out_tongue_closed_eyes:</code> | 😀<code>:grinning:</code> |<br>| 😗<code>:kissing:</code> | 😙<code>:kissing_smiling_eyes:</code> | 😛<code>:stuck_out_tongue:</code> |<br>| 😴<code>:sleeping:</code> | 😟<code>:worried:</code> | 😦<code>:frowning:</code> |<br>| 😧<code>:anguished:</code> | 😮<code>:open_mouth:</code> | 😬<code>:grimacing:</code> |<br>| 😕<code>:confused:</code> | 😯<code>:hushed:</code> | 😑<code>:expressionless:</code> |<br>| 😒<code>:unamused:</code> | 😅<code>:sweat_smile:</code> | 😓<code>:sweat:</code> |<br>| 😥<code>:disappointed_relieved:</code> | 😩<code>:weary:</code> | 😔<code>:pensive:</code> |<br>| 😞<code>:disappointed:</code> | 😖<code>:confounded:</code> | 😨<code>:fearful:</code> |<br>| 😰<code>:cold_sweat:</code> | 😣<code>:persevere:</code> | 😢<code>:cry:</code> |<br>| 😭<code>:sob:</code> | 😂<code>:joy:</code> | 😲<code>:astonished:</code> |<br>| 😱<code>:scream:</code> | :neckbeard:<code>:neckbeard:</code> | 😫<code>:tired_face:</code> |<br>| 😠<code>:angry:</code> | 😡<code>:rage:</code> | 😤<code>:triumph:</code> |<br>| 😪<code>:sleepy:</code> | 😋<code>:yum:</code> | 😷<code>:mask:</code> |<br>| 😎<code>:sunglasses:</code> | 😵<code>:dizzy_face:</code> | 👿<code>:imp:</code> |<br>| 😈<code>:smiling_imp:</code> | 😐<code>:neutral_face:</code> | 😶<code>:no_mouth:</code> |<br>| 😇<code>:innocent:</code> | 👽<code>:alien:</code> | 💛<code>:yellow_heart:</code> |<br>| 💙<code>:blue_heart:</code> | 💜<code>:purple_heart:</code> | ❤️<code>:heart:</code> |<br>| 💚<code>:green_heart:</code> | 💔<code>:broken_heart:</code> | 💓<code>:heartbeat:</code> |<br>| 💗<code>:heartpulse:</code> | 💕<code>:two_hearts:</code> | 💞<code>:revolving_hearts:</code> |<br>| 💘<code>:cupid:</code> | 💖<code>:sparkling_heart:</code> | ✨<code>:sparkles:</code> |<br>| ⭐️<code>:star:</code> | 🌟<code>:star2:</code> | 💫<code>:dizzy:</code> |<br>| 💥<code>:boom:</code> | 💥<code>:collision:</code> | 💢<code>:anger:</code> |<br>| ❗️<code>:exclamation:</code> | ❓<code>:question:</code> | ❕<code>:grey_exclamation:</code> |<br>| ❔<code>:grey_question:</code> | 💤<code>:zzz:</code> | 💨<code>:dash:</code> |<br>| 💦<code>:sweat_drops:</code> | 🎶<code>:notes:</code> | 🎵<code>:musical_note:</code> |<br>| 🔥<code>:fire:</code> | 💩<code>:hankey:</code> | 💩<code>:poop:</code> |<br>| 💩<code>:shit:</code> | 👍<code>:+1:</code> | 👍<code>:thumbsup:</code> |<br>| 👎<code>:-1:</code> | 👎<code>:thumbsdown:</code> | 👌<code>:ok_hand:</code> |<br>| 👊<code>:punch:</code> | 👊<code>:facepunch:</code> | ✊<code>:fist:</code> |<br>| ✌️<code>:v:</code> | 👋<code>:wave:</code> | ✋<code>:hand:</code> |<br>| ✋<code>:raised_hand:</code> | 👐<code>:open_hands:</code> | ☝️<code>:point_up:</code> |<br>| 👇<code>:point_down:</code> | 👈<code>:point_left:</code> | 👉<code>:point_right:</code> |<br>| 🙌<code>:raised_hands:</code> | 🙏<code>:pray:</code> | 👆<code>:point_up_2:</code> |<br>| 👏<code>:clap:</code> | 💪<code>:muscle:</code> | 🤘<code>:metal:</code> |<br>| 🖕<code>:fu:</code> | 🚶<code>:walking:</code> | 🏃<code>:runner:</code> |<br>| 🏃<code>:running:</code> | 👫<code>:couple:</code> | 👪<code>:family:</code> |<br>| 👬<code>:two_men_holding_hands:</code> | 👭<code>:two_women_holding_hands:</code> | 💃<code>:dancer:</code> |<br>| 👯<code>:dancers:</code> | 🙆<code>:ok_woman:</code> | 🙅<code>:no_good:</code> |<br>| 💁<code>:information_desk_person:</code> | 🙋<code>:raising_hand:</code> | 👰<code>:bride_with_veil:</code> |<br>| 🙎<code>:person_with_pouting_face:</code> | 🙍<code>:person_frowning:</code> | 🙇<code>:bow:</code> |<br>| :couplekiss:<code>:couplekiss:</code> | 💑<code>:couple_with_heart:</code> | 💆<code>:massage:</code> |<br>| 💇<code>:haircut:</code> | 💅<code>:nail_care:</code> | 👦<code>:boy:</code> |<br>| 👧<code>:girl:</code> | 👩<code>:woman:</code> | 👨<code>:man:</code> |<br>| 👶<code>:baby:</code> | 👵<code>:older_woman:</code> | 👴<code>:older_man:</code> |<br>| 👱<code>:person_with_blond_hair:</code> | 👲<code>:man_with_gua_pi_mao:</code> | 👳<code>:man_with_turban:</code> |<br>| 👷<code>:construction_worker:</code> | 👮<code>:cop:</code> | 👼<code>:angel:</code> |<br>| 👸<code>:princess:</code> | 😺<code>:smiley_cat:</code> | 😸<code>:smile_cat:</code> |<br>| 😻<code>:heart_eyes_cat:</code> | 😽<code>:kissing_cat:</code> | 😼<code>:smirk_cat:</code> |<br>| 🙀<code>:scream_cat:</code> | 😿<code>:crying_cat_face:</code> | 😹<code>:joy_cat:</code> |<br>| 😾<code>:pouting_cat:</code> | 👹<code>:japanese_ogre:</code> | 👺<code>:japanese_goblin:</code> |<br>| 🙈<code>:see_no_evil:</code> | 🙉<code>:hear_no_evil:</code> | 🙊<code>:speak_no_evil:</code> |<br>| 💂<code>:guardsman:</code> | 💀<code>:skull:</code> | 🐾<code>:feet:</code> |<br>| 👄<code>:lips:</code> | 💋<code>:kiss:</code> | 💧<code>:droplet:</code> |<br>| 👂<code>:ear:</code> | 👀<code>:eyes:</code> | 👃<code>:nose:</code> |<br>| 👅<code>:tongue:</code> | 💌<code>:love_letter:</code> | 👤<code>:bust_in_silhouette:</code> |<br>| 👥<code>:busts_in_silhouette:</code> | 💬<code>:speech_balloon:</code> | 💭<code>:thought_balloon:</code> |<br>| :feelsgood:<code>:feelsgood:</code> | :finnadie:<code>:finnadie:</code> | :goberserk:<code>:goberserk:</code> |<br>| :godmode:<code>:godmode:</code> | :hurtrealbad:<code>:hurtrealbad:</code> | :rage1:<code>:rage1:</code> |<br>| :rage2:<code>:rage2:</code> | :rage3:<code>:rage3:</code> | :rage4:<code>:rage4:</code> |<br>| :suspect:<code>:suspect:</code> | :trollface: <code>:trollface:</code> |   |</p><p>Nature</p><p>| — | — | — |<br>| ☀️<code>:sunny:</code> | ☔️<code>:umbrella:</code> | ☁️<code>:cloud:</code> |<br>| ❄️<code>:snowflake:</code> | ⛄️<code>:snowman:</code> | ⚡️<code>:zap:</code> |<br>| 🌀<code>:cyclone:</code> | 🌁<code>:foggy:</code> | 🌊<code>:ocean:</code> |<br>| 🐱<code>:cat:</code> | 🐶<code>:dog:</code> | 🐭<code>:mouse:</code> |<br>| 🐹<code>:hamster:</code> | 🐰<code>:rabbit:</code> | 🐺<code>:wolf:</code> |<br>| 🐸<code>:frog:</code> | 🐯<code>:tiger:</code> | 🐨<code>:koala:</code> |<br>| 🐻<code>:bear:</code> | 🐷<code>:pig:</code> | 🐽<code>:pig_nose:</code> |<br>| 🐮<code>:cow:</code> | 🐗<code>:boar:</code> | 🐵<code>:monkey_face:</code> |<br>| 🐒<code>:monkey:</code> | 🐴<code>:horse:</code> | 🐎<code>:racehorse:</code> |<br>| 🐫<code>:camel:</code> | 🐑<code>:sheep:</code> | 🐘<code>:elephant:</code> |<br>| 🐼<code>:panda_face:</code> | 🐍<code>:snake:</code> | 🐦<code>:bird:</code> |<br>| 🐤<code>:baby_chick:</code> | 🐥<code>:hatched_chick:</code> | 🐣<code>:hatching_chick:</code> |<br>| 🐔<code>:chicken:</code> | 🐧<code>:penguin:</code> | 🐢<code>:turtle:</code> |<br>| 🐛<code>:bug:</code> | 🐝<code>:honeybee:</code> | 🐜<code>:ant:</code> |<br>| 🐞<code>:beetle:</code> | 🐌<code>:snail:</code> | 🐙<code>:octopus:</code> |<br>| 🐠<code>:tropical_fish:</code> | 🐟<code>:fish:</code> | 🐳<code>:whale:</code> |<br>| 🐋<code>:whale2:</code> | 🐬<code>:dolphin:</code> | 🐄<code>:cow2:</code> |<br>| 🐏<code>:ram:</code> | 🐀<code>:rat:</code> | 🐃<code>:water_buffalo:</code> |<br>| 🐅<code>:tiger2:</code> | 🐇<code>:rabbit2:</code> | 🐉<code>:dragon:</code> |<br>| 🐐<code>:goat:</code> | 🐓<code>:rooster:</code> | 🐕<code>:dog2:</code> |<br>| 🐖<code>:pig2:</code> | 🐁<code>:mouse2:</code> | 🐂<code>:ox:</code> |<br>| 🐲<code>:dragon_face:</code> | 🐡<code>:blowfish:</code> | 🐊<code>:crocodile:</code> |<br>| 🐪<code>:dromedary_camel:</code> | 🐆<code>:leopard:</code> | 🐈<code>:cat2:</code> |<br>| 🐩<code>:poodle:</code> | 🐾<code>:paw_prints:</code> | 💐<code>:bouquet:</code> |<br>| 🌸<code>:cherry_blossom:</code> | 🌷<code>:tulip:</code> | 🍀<code>:four_leaf_clover:</code> |<br>| 🌹<code>:rose:</code> | 🌻<code>:sunflower:</code> | 🌺<code>:hibiscus:</code> |<br>| 🍁<code>:maple_leaf:</code> | 🍃<code>:leaves:</code> | 🍂<code>:fallen_leaf:</code> |<br>| 🌿<code>:herb:</code> | 🍄<code>:mushroom:</code> | 🌵<code>:cactus:</code> |<br>| 🌴<code>:palm_tree:</code> | 🌲<code>:evergreen_tree:</code> | 🌳<code>:deciduous_tree:</code> |<br>| 🌰<code>:chestnut:</code> | 🌱<code>:seedling:</code> | 🌼<code>:blossom:</code> |<br>| 🌾<code>:ear_of_rice:</code> | 🐚<code>:shell:</code> | 🌐<code>:globe_with_meridians:</code> |<br>| 🌞<code>:sun_with_face:</code> | 🌝<code>:full_moon_with_face:</code> | 🌚<code>:new_moon_with_face:</code> |<br>| 🌑<code>:new_moon:</code> | 🌒<code>:waxing_crescent_moon:</code> | 🌓<code>:first_quarter_moon:</code> |<br>| 🌔<code>:waxing_gibbous_moon:</code> | 🌕<code>:full_moon:</code> | 🌖<code>:waning_gibbous_moon:</code> |<br>| 🌗<code>:last_quarter_moon:</code> | 🌘<code>:waning_crescent_moon:</code> | 🌜<code>:last_quarter_moon_with_face:</code> |<br>| 🌛<code>:first_quarter_moon_with_face:</code> | 🌔<code>:moon:</code> | 🌍<code>:earth_africa:</code> |<br>| 🌎<code>:earth_americas:</code> | 🌏<code>:earth_asia:</code> | 🌋<code>:volcano:</code> |<br>| 🌌<code>:milky_way:</code> | ⛅️<code>:partly_sunny:</code> | :octocat: <code>:octocat:</code> |<br>| :squirrel:<code>:squirrel:</code> |   |   |</p><p>Objects</p><p>| — | — | — |<br>| 🎍<code>:bamboo:</code> | 💝<code>:gift_heart:</code> | 🎎<code>:dolls:</code> |<br>| 🎒<code>:school_satchel:</code> | 🎓<code>:mortar_board:</code> | 🎏<code>:flags:</code> |<br>| 🎆<code>:fireworks:</code> | 🎇<code>:sparkler:</code> | 🎐<code>:wind_chime:</code> |<br>| 🎑<code>:rice_scene:</code> | 🎃<code>:jack_o_lantern:</code> | 👻<code>:ghost:</code> |<br>| 🎅<code>:santa:</code> | 🎄<code>:christmas_tree:</code> | 🎁<code>:gift:</code> |<br>| 🔔<code>:bell:</code> | 🔕<code>:no_bell:</code> | 🎋<code>:tanabata_tree:</code> |<br>| 🎉<code>:tada:</code> | 🎊<code>:confetti_ball:</code> | 🎈<code>:balloon:</code> |<br>| 🔮<code>:crystal_ball:</code> | 💿<code>:cd:</code> | 📀<code>:dvd:</code> |<br>| 💾<code>:floppy_disk:</code> | 📷<code>:camera:</code> | 📹<code>:video_camera:</code> |<br>| 🎥<code>:movie_camera:</code> | 💻<code>:computer:</code> | 📺<code>:tv:</code> |<br>| 📱<code>:iphone:</code> | ☎️<code>:phone:</code> | ☎️<code>:telephone:</code> |<br>| 📞<code>:telephone_receiver:</code> | 📟<code>:pager:</code> | 📠<code>:fax:</code> |<br>| 💽<code>:minidisc:</code> | 📼<code>:vhs:</code> | 🔉<code>:sound:</code> |<br>| 🔈<code>:speaker:</code> | 🔇<code>:mute:</code> | 📢<code>:loudspeaker:</code> |<br>| 📣<code>:mega:</code> | ⌛️<code>:hourglass:</code> | ⏳<code>:hourglass_flowing_sand:</code> |<br>| ⏰<code>:alarm_clock:</code> | ⌚️<code>:watch:</code> | 📻<code>:radio:</code> |<br>| 📡<code>:satellite:</code> | ➿<code>:loop:</code> | 🔍<code>:mag:</code> |<br>| 🔎<code>:mag_right:</code> | 🔓<code>:unlock:</code> | 🔒<code>:lock:</code> |<br>| 🔏<code>:lock_with_ink_pen:</code> | 🔐<code>:closed_lock_with_key:</code> | 🔑<code>:key:</code> |<br>| 💡<code>:bulb:</code> | 🔦<code>:flashlight:</code> | 🔆<code>:high_brightness:</code> |<br>| 🔅<code>:low_brightness:</code> | 🔌<code>:electric_plug:</code> | 🔋<code>:battery:</code> |<br>| 📲<code>:calling:</code> | ✉️<code>:email:</code> | 📫<code>:mailbox:</code> |<br>| 📮<code>:postbox:</code> | 🛀<code>:bath:</code> | 🛁<code>:bathtub:</code> |<br>| 🚿<code>:shower:</code> | 🚽<code>:toilet:</code> | 🔧<code>:wrench:</code> |<br>| 🔩<code>:nut_and_bolt:</code> | 🔨<code>:hammer:</code> | 💺<code>:seat:</code> |<br>| 💰<code>:moneybag:</code> | 💴<code>:yen:</code> | 💵<code>:dollar:</code> |<br>| 💷<code>:pound:</code> | 💶<code>:euro:</code> | 💳<code>:credit_card:</code> |<br>| 💸<code>:money_with_wings:</code> | 📧<code>:e-mail:</code> | 📥<code>:inbox_tray:</code> |<br>| 📤<code>:outbox_tray:</code> | ✉️<code>:envelope:</code> | 📨<code>:incoming_envelope:</code> |<br>| 📯<code>:postal_horn:</code> | 📪<code>:mailbox_closed:</code> | 📬<code>:mailbox_with_mail:</code> |<br>| 📭<code>:mailbox_with_no_mail:</code> | 🚪<code>:door:</code> | 🚬<code>:smoking:</code> |<br>| 💣<code>:bomb:</code> | 🔫<code>:gun:</code> | 🔪<code>:hocho:</code> |<br>| 💊<code>:pill:</code> | 💉<code>:syringe:</code> | 📄<code>:page_facing_up:</code> |<br>| 📃<code>:page_with_curl:</code> | 📑<code>:bookmark_tabs:</code> | 📊<code>:bar_chart:</code> |<br>| 📈<code>:chart_with_upwards_trend:</code> | 📉<code>:chart_with_downwards_trend:</code> | 📜<code>:scroll:</code> |<br>| 📋<code>:clipboard:</code> | 📆<code>:calendar:</code> | 📅<code>:date:</code> |<br>| 📇<code>:card_index:</code> | 📁<code>:file_folder:</code> | 📂<code>:open_file_folder:</code> |<br>| ✂️<code>:scissors:</code> | 📌<code>:pushpin:</code> | 📎<code>:paperclip:</code> |<br>| ✒️<code>:black_nib:</code> | ✏️<code>:pencil2:</code> | 📏<code>:straight_ruler:</code> |<br>| 📐<code>:triangular_ruler:</code> | 📕<code>:closed_book:</code> | 📗<code>:green_book:</code> |<br>| 📘<code>:blue_book:</code> | 📙<code>:orange_book:</code> | 📓<code>:notebook:</code> |<br>| 📔<code>:notebook_with_decorative_cover:</code> | 📒<code>:ledger:</code> | 📚<code>:books:</code> |<br>| 🔖<code>:bookmark:</code> | 📛<code>:name_badge:</code> | 🔬<code>:microscope:</code> |<br>| 🔭<code>:telescope:</code> | 📰<code>:newspaper:</code> | 🏈<code>:football:</code> |<br>| 🏀<code>:basketball:</code> | ⚽️<code>:soccer:</code> | ⚾️<code>:baseball:</code> |<br>| 🎾<code>:tennis:</code> | 🎱<code>:8ball:</code> | 🏉<code>:rugby_football:</code> |<br>| 🎳<code>:bowling:</code> | ⛳️<code>:golf:</code> | 🚵<code>:mountain_bicyclist:</code> |<br>| 🚴<code>:bicyclist:</code> | 🏇<code>:horse_racing:</code> | 🏂<code>:snowboarder:</code> |<br>| 🏊<code>:swimmer:</code> | 🏄<code>:surfer:</code> | 🎿<code>:ski:</code> |<br>| ♠️<code>:spades:</code> | ♥️<code>:hearts:</code> | ♣️<code>:clubs:</code> |<br>| ♦️<code>:diamonds:</code> | 💎<code>:gem:</code> | 💍<code>:ring:</code> |<br>| 🏆<code>:trophy:</code> | 🎼<code>:musical_score:</code> | 🎹<code>:musical_keyboard:</code> |<br>| 🎻<code>:violin:</code> | 👾<code>:space_invader:</code> | 🎮<code>:video_game:</code> |<br>| 🃏<code>:black_joker:</code> | 🎴<code>:flower_playing_cards:</code> | 🎲<code>:game_die:</code> |<br>| 🎯<code>:dart:</code> | 🀄️<code>:mahjong:</code> | 🎬<code>:clapper:</code> |<br>| 📝<code>:memo:</code> | 📝<code>:pencil:</code> | 📖<code>:book:</code> |<br>| 🎨<code>:art:</code> | 🎤<code>:microphone:</code> | 🎧<code>:headphones:</code> |<br>| 🎺<code>:trumpet:</code> | 🎷<code>:saxophone:</code> | 🎸<code>:guitar:</code> |<br>| 👞<code>:shoe:</code> | 👡<code>:sandal:</code> | 👠<code>:high_heel:</code> |<br>| 💄<code>:lipstick:</code> | 👢<code>:boot:</code> | 👕<code>:shirt:</code> |<br>| 👕<code>:tshirt:</code> | 👔<code>:necktie:</code> | 👚<code>:womans_clothes:</code> |<br>| 👗<code>:dress:</code> | 🎽<code>:running_shirt_with_sash:</code> | 👖<code>:jeans:</code> |<br>| 👘<code>:kimono:</code> | 👙<code>:bikini:</code> | 🎀<code>:ribbon:</code> |<br>| 🎩<code>:tophat:</code> | 👑<code>:crown:</code> | 👒<code>:womans_hat:</code> |<br>| 👞<code>:mans_shoe:</code> | 🌂<code>:closed_umbrella:</code> | 💼<code>:briefcase:</code> |<br>| 👜<code>:handbag:</code> | 👝<code>:pouch:</code> | 👛<code>:purse:</code> |<br>| 👓<code>:eyeglasses:</code> | 🎣<code>:fishing_pole_and_fish:</code> | ☕️<code>:coffee:</code> |<br>| 🍵<code>:tea:</code> | 🍶<code>:sake:</code> | 🍼<code>:baby_bottle:</code> |<br>| 🍺<code>:beer:</code> | 🍻<code>:beers:</code> | 🍸<code>:cocktail:</code> |<br>| 🍹<code>:tropical_drink:</code> | 🍷<code>:wine_glass:</code> | 🍴<code>:fork_and_knife:</code> |<br>| 🍕<code>:pizza:</code> | 🍔<code>:hamburger:</code> | 🍟<code>:fries:</code> |<br>| 🍗<code>:poultry_leg:</code> | 🍖<code>:meat_on_bone:</code> | 🍝<code>:spaghetti:</code> |<br>| 🍛<code>:curry:</code> | 🍤<code>:fried_shrimp:</code> | 🍱<code>:bento:</code> |<br>| 🍣<code>:sushi:</code> | 🍥<code>:fish_cake:</code> | 🍙<code>:rice_ball:</code> |<br>| 🍘<code>:rice_cracker:</code> | 🍚<code>:rice:</code> | 🍜<code>:ramen:</code> |<br>| 🍲<code>:stew:</code> | 🍢<code>:oden:</code> | 🍡<code>:dango:</code> |<br>| 🥚<code>:egg:</code> | 🍞<code>:bread:</code> | 🍩<code>:doughnut:</code> |<br>| 🍮<code>:custard:</code> | 🍦<code>:icecream:</code> | 🍨<code>:ice_cream:</code> |<br>| 🍧<code>:shaved_ice:</code> | 🎂<code>:birthday:</code> | 🍰<code>:cake:</code> |<br>| 🍪<code>:cookie:</code> | 🍫<code>:chocolate_bar:</code> | 🍬<code>:candy:</code> |<br>| 🍭<code>:lollipop:</code> | 🍯<code>:honey_pot:</code> | 🍎<code>:apple:</code> |<br>| 🍏<code>:green_apple:</code> | 🍊<code>:tangerine:</code> | 🍋<code>:lemon:</code> |<br>| 🍒<code>:cherries:</code> | 🍇<code>:grapes:</code> | 🍉<code>:watermelon:</code> |<br>| 🍓<code>:strawberry:</code> | 🍑<code>:peach:</code> | 🍈<code>:melon:</code> |<br>| 🍌<code>:banana:</code> | 🍐<code>:pear:</code> | 🍍<code>:pineapple:</code> |<br>| 🍠<code>:sweet_potato:</code> | 🍆<code>:eggplant:</code> | 🍅<code>:tomato:</code> |<br>| 🌽<code>:corn:</code> |   |   |</p><p>Places</p><p>| — | — | — |<br>| 🏠<code>:house:</code> | 🏡<code>:house_with_garden:</code> | 🏫<code>:school:</code> |<br>| 🏢<code>:office:</code> | 🏣<code>:post_office:</code> | 🏥<code>:hospital:</code> |<br>| 🏦<code>:bank:</code> | 🏪<code>:convenience_store:</code> | 🏩<code>:love_hotel:</code> |<br>| 🏨<code>:hotel:</code> | 💒<code>:wedding:</code> | ⛪️<code>:church:</code> |<br>| 🏬<code>:department_store:</code> | 🏤<code>:european_post_office:</code> | 🌇<code>:city_sunrise:</code> |<br>| 🌆<code>:city_sunset:</code> | 🏯<code>:japanese_castle:</code> | 🏰<code>:european_castle:</code> |<br>| ⛺️<code>:tent:</code> | 🏭<code>:factory:</code> | 🗼<code>:tokyo_tower:</code> |<br>| 🗾<code>:japan:</code> | 🗻<code>:mount_fuji:</code> | 🌄<code>:sunrise_over_mountains:</code> |<br>| 🌅<code>:sunrise:</code> | 🌠<code>:stars:</code> | 🗽<code>:statue_of_liberty:</code> |<br>| 🌉<code>:bridge_at_night:</code> | 🎠<code>:carousel_horse:</code> | 🌈<code>:rainbow:</code> |<br>| 🎡<code>:ferris_wheel:</code> | ⛲️<code>:fountain:</code> | 🎢<code>:roller_coaster:</code> |<br>| 🚢<code>:ship:</code> | 🚤<code>:speedboat:</code> | ⛵️<code>:boat:</code> |<br>| ⛵️<code>:sailboat:</code> | 🚣<code>:rowboat:</code> | ⚓️<code>:anchor:</code> |<br>| 🚀<code>:rocket:</code> | ✈️<code>:airplane:</code> | 🚁<code>:helicopter:</code> |<br>| 🚂<code>:steam_locomotive:</code> | 🚊<code>:tram:</code> | 🚞<code>:mountain_railway:</code> |<br>| 🚲<code>:bike:</code> | 🚡<code>:aerial_tramway:</code> | 🚟<code>:suspension_railway:</code> |<br>| 🚠<code>:mountain_cableway:</code> | 🚜<code>:tractor:</code> | 🚙<code>:blue_car:</code> |<br>| 🚘<code>:oncoming_automobile:</code> | 🚗<code>:car:</code> | 🚗<code>:red_car:</code> |<br>| 🚕<code>:taxi:</code> | 🚖<code>:oncoming_taxi:</code> | 🚛<code>:articulated_lorry:</code> |<br>| 🚌<code>:bus:</code> | 🚍<code>:oncoming_bus:</code> | 🚨<code>:rotating_light:</code> |<br>| 🚓<code>:police_car:</code> | 🚔<code>:oncoming_police_car:</code> | 🚒<code>:fire_engine:</code> |<br>| 🚑<code>:ambulance:</code> | 🚐<code>:minibus:</code> | 🚚<code>:truck:</code> |<br>| 🚋<code>:train:</code> | 🚉<code>:station:</code> | 🚆<code>:train2:</code> |<br>| 🚅<code>:bullettrain_front:</code> | 🚄<code>:bullettrain_side:</code> | 🚈<code>:light_rail:</code> |<br>| 🚝<code>:monorail:</code> | 🚃<code>:railway_car:</code> | 🚎<code>:trolleybus:</code> |<br>| 🎫<code>:ticket:</code> | ⛽️<code>:fuelpump:</code> | 🚦<code>:vertical_traffic_light:</code> |<br>| 🚥<code>:traffic_light:</code> | ⚠️<code>:warning:</code> | 🚧<code>:construction:</code> |<br>| 🔰<code>:beginner:</code> | 🏧<code>:atm:</code> | 🎰<code>:slot_machine:</code> |<br>| 🚏<code>:busstop:</code> | 💈<code>:barber:</code> | ♨️<code>:hotsprings:</code> |<br>| 🏁<code>:checkered_flag:</code> | 🎌<code>:crossed_flags:</code> | 🏮<code>:izakaya_lantern:</code> |<br>| 🗿<code>:moyai:</code> | 🎪<code>:circus_tent:</code> | 🎭<code>:performing_arts:</code> |<br>| 📍<code>:round_pushpin:</code> | 🚩<code>:triangular_flag_on_post:</code> | 🇯🇵<code>:jp:</code> |<br>| 🇰🇷<code>:kr:</code> | 🇨🇳<code>:cn:</code> | 🇺🇸<code>:us:</code> |<br>| 🇫🇷<code>:fr:</code> | 🇪🇸<code>:es:</code> | 🇮🇹<code>:it:</code> |<br>| 🇷🇺<code>:ru:</code> | 🇬🇧<code>:gb:</code> | 🇬🇧<code>:uk:</code> |<br>| 🇩🇪<code>:de:</code> |   |   |</p><p>Symbols</p><p>| — | — | — |<br>| 1️⃣<code>:one:</code> | 2️⃣<code>:two:</code> | 3️⃣<code>:three:</code> |<br>| 4️⃣<code>:four:</code> | 5️⃣<code>:five:</code> | 6️⃣<code>:six:</code> |<br>| 7️⃣<code>:seven:</code> | 8️⃣<code>:eight:</code> | 9️⃣<code>:nine:</code> |<br>| 🔟<code>:keycap_ten:</code> | 🔢<code>:1234:</code> | 0️⃣<code>:zero:</code> |<br>| #️⃣<code>:hash:</code> | 🔣<code>:symbols:</code> | ◀️<code>:arrow_backward:</code> |<br>| ⬇️<code>:arrow_down:</code> | ▶️<code>:arrow_forward:</code> | ⬅️<code>:arrow_left:</code> |<br>| 🔠<code>:capital_abcd:</code> | 🔡<code>:abcd:</code> | 🔤<code>:abc:</code> |<br>| ↙️<code>:arrow_lower_left:</code> | ↘️<code>:arrow_lower_right:</code> | ➡️<code>:arrow_right:</code> |<br>| ⬆️<code>:arrow_up:</code> | ↖️<code>:arrow_upper_left:</code> | ↗️<code>:arrow_upper_right:</code> |<br>| ⏬<code>:arrow_double_down:</code> | ⏫<code>:arrow_double_up:</code> | 🔽<code>:arrow_down_small:</code> |<br>| ⤵️<code>:arrow_heading_down:</code> | ⤴️<code>:arrow_heading_up:</code> | ↩️<code>:leftwards_arrow_with_hook:</code> |<br>| ↪️<code>:arrow_right_hook:</code> | ↔️<code>:left_right_arrow:</code> | ↕️<code>:arrow_up_down:</code> |<br>| 🔼<code>:arrow_up_small:</code> | 🔃<code>:arrows_clockwise:</code> | 🔄<code>:arrows_counterclockwise:</code> |<br>| ⏪<code>:rewind:</code> | ⏩<code>:fast_forward:</code> | ℹ️<code>:information_source:</code> |<br>| 🆗<code>:ok:</code> | 🔀<code>:twisted_rightwards_arrows:</code> | 🔁<code>:repeat:</code> |<br>| 🔂<code>:repeat_one:</code> | 🆕<code>:new:</code> | 🔝<code>:top:</code> |<br>| 🆙<code>:up:</code> | 🆒<code>:cool:</code> | 🆓<code>:free:</code> |<br>| 🆖<code>:ng:</code> | 🎦<code>:cinema:</code> | 🈁<code>:koko:</code> |<br>| 📶<code>:signal_strength:</code> | 🈹<code>:u5272:</code> | 🈴<code>:u5408:</code> |<br>| 🈺<code>:u55b6:</code> | 🈯️<code>:u6307:</code> | 🈷️<code>:u6708:</code> |<br>| 🈶<code>:u6709:</code> | 🈵<code>:u6e80:</code> | 🈚️<code>:u7121:</code> |<br>| 🈸<code>:u7533:</code> | 🈳<code>:u7a7a:</code> | 🈲<code>:u7981:</code> |<br>| 🈂️<code>:sa:</code> | 🚻<code>:restroom:</code> | 🚹<code>:mens:</code> |<br>| 🚺<code>:womens:</code> | 🚼<code>:baby_symbol:</code> | 🚭<code>:no_smoking:</code> |<br>| 🅿️<code>:parking:</code> | ♿️<code>:wheelchair:</code> | 🚇<code>:metro:</code> |<br>| 🛄<code>:baggage_claim:</code> | :accept:<code>:accept:</code> | 🚾<code>:wc:</code> |<br>| 🚰<code>:potable_water:</code> | 🚮<code>:put_litter_in_its_place:</code> | ㊙️<code>:secret:</code> |<br>| ㊗️<code>:congratulations:</code> | Ⓜ️<code>:m:</code> | 🛂<code>:passport_control:</code> |<br>| 🛅<code>:left_luggage:</code> | 🛃<code>:customs:</code> | 🉐<code>:ideograph_advantage:</code> |<br>| 🆑<code>:cl:</code> | 🆘<code>:sos:</code> | 🆔<code>:id:</code> |<br>| 🚫<code>:no_entry_sign:</code> | 🔞<code>:underage:</code> | 📵<code>:no_mobile_phones:</code> |<br>| 🚯<code>:do_not_litter:</code> | 🚱<code>:non-potable_water:</code> | 🚳<code>:no_bicycles:</code> |<br>| 🚷<code>:no_pedestrians:</code> | 🚸<code>:children_crossing:</code> | ⛔️<code>:no_entry:</code> |<br>| ✳️<code>:eight_spoked_asterisk:</code> | ✴️<code>:eight_pointed_black_star:</code> | 💟<code>:heart_decoration:</code> |<br>| 🆚<code>:vs:</code> | 📳<code>:vibration_mode:</code> | 📴<code>:mobile_phone_off:</code> |<br>| 💹<code>:chart:</code> | 💱<code>:currency_exchange:</code> | ♈️<code>:aries:</code> |<br>| ♉️<code>:taurus:</code> | ♊️<code>:gemini:</code> | ♋️<code>:cancer:</code> |<br>| ♌️<code>:leo:</code> | ♍️<code>:virgo:</code> | ♎️<code>:libra:</code> |<br>| ♏️<code>:scorpius:</code> | ♐️<code>:sagittarius:</code> | ♑️<code>:capricorn:</code> |<br>| ♒️<code>:aquarius:</code> | ♓️<code>:pisces:</code> | ⛎<code>:ophiuchus:</code> |<br>| 🔯<code>:six_pointed_star:</code> | ❎<code>:negative_squared_cross_mark:</code> | 🅰️<code>:a:</code> |<br>| 🅱️<code>:b:</code> | 🆎<code>:ab:</code> | 🅾️<code>:o2:</code> |<br>| 💠<code>:diamond_shape_with_a_dot_inside:</code> | ♻️<code>:recycle:</code> | 🔚<code>:end:</code> |<br>| 🔛<code>:on:</code> | 🔜<code>:soon:</code> | 🕐<code>:clock1:</code> |<br>| 🕜<code>:clock130:</code> | 🕙<code>:clock10:</code> | 🕥<code>:clock1030:</code> |<br>| 🕚<code>:clock11:</code> | 🕦<code>:clock1130:</code> | 🕛<code>:clock12:</code> |<br>| 🕧<code>:clock1230:</code> | 🕑<code>:clock2:</code> | 🕝<code>:clock230:</code> |<br>| 🕒<code>:clock3:</code> | 🕞<code>:clock330:</code> | 🕓<code>:clock4:</code> |<br>| 🕟<code>:clock430:</code> | 🕔<code>:clock5:</code> | 🕠<code>:clock530:</code> |<br>| 🕕<code>:clock6:</code> | 🕡<code>:clock630:</code> | 🕖<code>:clock7:</code> |<br>| 🕢<code>:clock730:</code> | 🕗<code>:clock8:</code> | 🕣<code>:clock830:</code> |<br>| 🕘<code>:clock9:</code> | 🕤<code>:clock930:</code> | 💲<code>:heavy_dollar_sign:</code> |<br>| ©️<code>:copyright:</code> | ®️<code>:registered:</code> | ™️<code>:tm:</code> |<br>| ❌<code>:x:</code> | ❗️<code>:heavy_exclamation_mark:</code> | ‼️<code>:bangbang:</code> |<br>| ⁉️<code>:interrobang:</code> | ⭕️<code>:o:</code> | ✖️<code>:heavy_multiplication_x:</code> |<br>| ➕<code>:heavy_plus_sign:</code> | ➖<code>:heavy_minus_sign:</code> | ➗<code>:heavy_division_sign:</code> |<br>| 💮<code>:white_flower:</code> | 💯<code>:100:</code> | ✔️<code>:heavy_check_mark:</code> |<br>| ☑️<code>:ballot_box_with_check:</code> | 🔘<code>:radio_button:</code> | 🔗<code>:link:</code> |<br>| ➰<code>:curly_loop:</code> | 〰️<code>:wavy_dash:</code> | 〽️<code>:part_alternation_mark:</code> |<br>| 🔱<code>:trident:</code> | :black_square:<code>:black_square:</code> | :white_square:<code>:white_square:</code> |<br>| ✅<code>:white_check_mark:</code> | 🔲<code>:black_square_button:</code> | 🔳<code>:white_square_button:</code> |<br>| ⚫️<code>:black_circle:</code> | ⚪️<code>:white_circle:</code> | 🔴<code>:red_circle:</code> |<br>| 🔵<code>:large_blue_circle:</code> | 🔷<code>:large_blue_diamond:</code> | 🔶<code>:large_orange_diamond:</code> |<br>| 🔹<code>:small_blue_diamond:</code> | 🔸<code>:small_orange_diamond:</code> | 🔺<code>:small_red_triangle:</code> |<br>| 🔻<code>:small_red_triangle_down:</code> | :shipit:<code>:shipit:</code> |   |</p><p>来自：<a href="https://gist.github.com/rxaviers/7360908#file-gistfile1-md" target="_blank" rel="noopener">https://gist.github.com/rxaviers/7360908#file-gistfile1-md</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>emoji</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shiro使用多个Realm实现多种登录方式</title>
    <link href="/posts/62725/"/>
    <url>/posts/62725/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>大部分场景下，我们都会在项目中实现自定义 <code>Realm</code> 搭配 <code>UsernamePasswordToken</code> 来完成用户的登录认证流程，但是如果登录方式包括“第三方登录”、“手机号登录”等，仅凭 <code>UsernamePasswordToken</code> 就难以实现了，因为以上的两种登录方式都是免密登录，而  <code>UsernamePasswordToken</code> 却必须要有 <code>username</code> 和 <code>password</code>，因此需要自定义多个 Realm 和 Token 才能实现上述功能。</p><p>本文只会实现第三方登录，以此为例，列位看官可以尝试修改代码实现自己的业务逻辑。</p><p>另外，本文篇幅较长，代码量较多，看官们一定要耐心看完，万一漏写或写错了部分代码，耽误的可是更多的时间。</p><h3 id="创建自定义-Token"><a href="#创建自定义-Token" class="headerlink" title="创建自定义 Token"></a>创建自定义 Token</h3><p>网上很多文章都继承 <code>UsernamePasswordToken</code> 来创建自己的 Token，但我不建议这样写，如果继承 <code>UsernamePasswordToken</code> ，在后面的操作中会变得相对麻烦。</p><p>我们直接查看 <code>UsernamePasswordToken</code> 的源码，可以看到它实现了 <code>HostAuthenticationToken</code> 和 <code>RememberMeAuthenticationToken</code> ，而这两个类又分别实现了 <code>AuthenticationToken</code> ，因此在这里我们直接实现 <code>AuthenticationToken</code> 即可，同时重写 <code>getPrincipal()</code> 和 <code>getCredentials()</code> 两个方法。</p><pre><code class="hljs plain">import org.apache.shiro.authc.AuthenticationToken;&#x2F;** * 第三方授权登录凭证 * 注意这里要实现AuthenticationToken，不能继承UsernamePasswordToken * 同时重写getPrincipal()和getCredentials()两个方法 * @author wujiawei0926@yeah.net *&#x2F;public class OAuth2UserToken implements AuthenticationToken &#123;    &#x2F;**     *  授权类型     *  这里可以使用枚举      *&#x2F;    private String type;    &#x2F;&#x2F; 第三方登录后获取的用户信息    private OAuth2User user;    public OAuth2UserToken(final String type, final OAuth2User user) &#123;        this.type &#x3D; type;        this.user &#x3D; user;    &#125;    @Override    public Object getPrincipal() &#123;        return this.getUser();    &#125;    @Override    public Object getCredentials() &#123;        return this.getUser().getOpenid();    &#125;    public String getType() &#123;        return type;    &#125;    public void setType(String type) &#123;        this.type &#x3D; type;    &#125;    public OAuth2User getUser() &#123;        return user;    &#125;    public void setUser(OAuth2User user) &#123;        this.user &#x3D; user;    &#125;    &#x2F;**     * 用户信息类，用于新用户注册     * 可根据自己的具体业务进行拓展     *&#x2F;    public static class OAuth2User &#123;        public OAuth2User()&#123;&#125;;        private String openid;        private String username;        private String nickname;        private String avatar;        private String email;        private String remark;        private Integer sex;        public String getOpenid() &#123;            return openid;        &#125;        public void setOpenid(String openid) &#123;            this.openid &#x3D; openid;        &#125;        public String getUsername() &#123;            return username;        &#125;        public void setUsername(String username) &#123;            this.username &#x3D; username;        &#125;        public String getNickname() &#123;            return nickname;        &#125;        public void setNickname(String nickname) &#123;            this.nickname &#x3D; nickname;        &#125;        public String getAvatar() &#123;            return avatar;        &#125;        public void setAvatar(String avatar) &#123;            this.avatar &#x3D; avatar;        &#125;        public String getEmail() &#123;            return email;        &#125;        public void setEmail(String email) &#123;            this.email &#x3D; email;        &#125;        public String getRemark() &#123;            return remark;        &#125;        public void setRemark(String remark) &#123;            this.remark &#x3D; remark;        &#125;        public Integer getSex() &#123;            return sex;        &#125;        public void setSex(Integer sex) &#123;            this.sex &#x3D; sex;        &#125;    &#125;&#125;</code></pre><h3 id="创建多个-Realm"><a href="#创建多个-Realm" class="headerlink" title="创建多个 Realm"></a>创建多个 Realm</h3><p>创建 Realm 时，必须重写 <code>supports()</code> 方法，在后面起到了至关重要的作用。</p><p>作为演示，本文创建的 Realm 都没有做权限的授权，即 <code>doGetAuthorizationInfo()</code> 没有做具体的实现，列位看官需要加上自己的权限授权业务。</p><p>首先是传统的 <code>UserRealm</code> ，相信列位看官对这个类都很熟悉，因此这里不再赘述，直接贴上代码：</p><pre><code class="hljs plain">import com.*.dao.UserDao;import com.*.model.User;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.*;import org.apache.shiro.authz.AuthorizationInfo;import org.apache.shiro.authz.SimpleAuthorizationInfo;import org.apache.shiro.realm.AuthorizingRealm;import org.apache.shiro.subject.PrincipalCollection;import org.springframework.beans.factory.annotation.Autowired;&#x2F;** * Shiro认证和授权 * @author wujiawei0926@yeah.net *&#x2F;public class UserRealm extends AuthorizingRealm &#123;    @Autowired    private UserDao userService;    &#x2F;**     * 一定要重写support()方法，在后面的身份验证器中会用到     * @param token     * @return     *&#x2F;    @Override    public boolean supports(AuthenticationToken token) &#123;        return token instanceof UsernamePasswordToken;    &#125;    &#x2F;**     * 授权     *&#x2F;    @Override    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123;        User user &#x3D; (User) SecurityUtils.getSubject().getPrincipal();        SimpleAuthorizationInfo authorizationInfo &#x3D; new SimpleAuthorizationInfo();        return authorizationInfo;    &#125;    &#x2F;**     * 认证     *&#x2F;    @Override    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123;        String username &#x3D; (String) authenticationToken.getPrincipal();        User user &#x3D; userService.findByUsername(username);        if (user &#x3D;&#x3D; null) &#123;            throw new UnknownAccountException(); &#x2F;&#x2F; 账号不存在        &#125;        if (user.getDisabled() &#x3D;&#x3D; 1) &#123;            throw new LockedAccountException();        &#125;        if (user.getUserType() !&#x3D; 0) &#123;            throw new ConcurrentAccessException();        &#125;        SimpleAuthenticationInfo authenticationInfo &#x3D; new SimpleAuthenticationInfo(user, user.getPassword(), getName());        return authenticationInfo;    &#125;&#125;</code></pre><p>然后创建我们的免密登陆 Realm，与 <code>UserRealm</code> 相同，继承 <code>AuthorizingRealm</code> 即可，同样的，也要重写 <code>supports()</code> 方法，并且再多重写一个 <code>getName()</code> 方法，在后面也会用到。</p><p>用户登录的方法写在 <code>doGetAuthenticationInfo</code> 中，通过校验 <code>openid</code>，实现老用户的登录和新用户的注册，下面贴上代码：</p><pre><code class="hljs plain">import com.*.dao.UserDao;import com.w.module.base.model.User;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.*;import org.apache.shiro.authz.AuthorizationInfo;import org.apache.shiro.authz.SimpleAuthorizationInfo;import org.apache.shiro.realm.AuthorizingRealm;import org.apache.shiro.subject.PrincipalCollection;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;&#x2F;*** 自定义第三方登录授权Realm* @author wujiawei0926@yeah.net*&#x2F;public class OAuth2UserRealm extends AuthorizingRealm &#123;   public static final String REALM_NAME &#x3D; &quot;oauth2_user_realm&quot;;   @Autowired   private UserDao userDao;   @Override   public String getName() &#123;       return REALM_NAME;   &#125;   &#x2F;**    * 检查是否支持该Realm    * 一定要重写support()方法，在后面的身份验证器中会用到    * @param token    * @return    *&#x2F;   @Override   public boolean supports(AuthenticationToken token) &#123;       return token instanceof OAuth2UserToken;   &#125;   &#x2F;**    * 授权    * @param principalCollection    * @return    *&#x2F;   @Override   protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123;       User user &#x3D; (User) SecurityUtils.getSubject().getPrincipal();       SimpleAuthorizationInfo authorizationInfo &#x3D; new SimpleAuthorizationInfo();       return authorizationInfo;   &#125;   &#x2F;**    * 认证    * 在这个方法中，完成老用户的登录与新用户的注册    * @param authenticationToken    * @return    * @throws AuthenticationException    *&#x2F;   @Override   protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123;       OAuth2UserToken token &#x3D; (OAuth2UserToken)authenticationToken;       OAuth2UserToken.OAuth2User oAuth2User &#x3D; token.getUser();       &#x2F;&#x2F; 校验openid       if (oAuth2User &#x3D;&#x3D; null) &#123;           throw new AuthenticationException();       &#125;       &#x2F;&#x2F; 根据openid查询用户数据       String openid &#x3D; oAuth2User.getOpenid();       User user &#x3D; null;       switch (token.getType()) &#123;           case &quot;qq&quot;:               user &#x3D; userDao.findByQqOpenid(openid);               break;           case &quot;weixin&quot;:               user &#x3D; userDao.findByWxOpenid(openid);               break;           default:               break;       &#125;       if (user &#x3D;&#x3D; null) &#123;           &#x2F;&#x2F; TODO 获取oAuth2User中用户信息进行注册       &#125;       if (user.getDisabled() &#x3D;&#x3D; 1) &#123;           &#x2F;&#x2F; 账号被拉黑           throw new LockedAccountException();       &#125;       &#x2F;&#x2F; 完成登录，注意这里传的principal和credentials       &#x2F;&#x2F; principal: OAuth2UserToken类中getPrincipal()的返回值       &#x2F;&#x2F; credentials: OAuth2UserToken类中getCredentials()的返回值       SimpleAuthenticationInfo authenticationInfo &#x3D; new SimpleAuthenticationInfo(user, openid, getName());       return authenticationInfo;   &#125;&#125;</code></pre><h3 id="创建自定义-ModularRealmAuthenticator"><a href="#创建自定义-ModularRealmAuthenticator" class="headerlink" title="创建自定义 ModularRealmAuthenticator"></a>创建自定义 ModularRealmAuthenticator</h3><p><code>Token</code> 和 <code>Realm</code> 创建完成之后，需要再创建一个 <code>ModularRealmAuthenticator</code> 来进行绑定操作，让程序知道碰到这个 <code>Token</code> 时进入对应的 <code>Realm</code>。</p><p>这步其实很简单，只需要重写 <code>doMultiRealmAuthentication(Collection&lt;Realm&gt; realms, AuthenticationToken token)</code> 方法，该方法有两个参数，其中 <code>realms</code> 是 <code>ShiroConfig</code> 中配置的所有 realm 集合，<code>token</code> 就是登录时传入的用户信息 token，在我们这边只会是 <code>UsernamePasswordToken</code> 或 <code>OAuth2UserToken</code>。</p><p>在 <code>doMultiRealmAuthentication()</code> 方法中遍历所有的 realm，通过每个 realm 的 <code>supports()</code> 方法来进行匹配。</p><pre><code class="hljs plain">package com.w.common.config.shiro;import org.apache.shiro.authc.AuthenticationInfo;import org.apache.shiro.authc.AuthenticationToken;import org.apache.shiro.authc.pam.ModularRealmAuthenticator;import org.apache.shiro.authc.pam.UnsupportedTokenException;import org.apache.shiro.realm.Realm;import java.util.Collection;&#x2F;** * 自定义身份验证器，根据登录使用的Token匹配调用对应的Realm * @author wujiawei0926@yeah.net *&#x2F;public class CustomModularRealmAuthenticator extends ModularRealmAuthenticator &#123;    &#x2F;**     * 自定义Realm的分配策略     * 通过realm.supports()方法匹配对应的Realm，因此才要在Realm中重写supports()方法     * @param realms     * @param token     * @return     *&#x2F;    @Override    protected AuthenticationInfo doMultiRealmAuthentication(Collection&lt;Realm&gt; realms, AuthenticationToken token) &#123;        &#x2F;&#x2F; 判断getRealms()是否返回为空        assertRealmsConfigured();        &#x2F;&#x2F; 通过supports()方法，匹配对应的Realm        Realm uniqueRealm &#x3D; null;        for (Realm realm : realms) &#123;            if (realm.supports(token)) &#123;                uniqueRealm &#x3D; realm;                break;            &#125;        &#125;        if (uniqueRealm &#x3D;&#x3D; null) &#123;            throw new UnsupportedTokenException();        &#125;        return uniqueRealm.getAuthenticationInfo(token);    &#125;&#125;</code></pre><h3 id="配置-ShiroConfig"><a href="#配置-ShiroConfig" class="headerlink" title="配置 ShiroConfig"></a>配置 ShiroConfig</h3><p><code>ShiroConfig</code> 中需要添加或修改一下配置：</p><ol><li><code>modularRealmAuthenticator</code>，告诉 Shiro，以后使用我们自定义的身份验证器：</li></ol><pre><code class="hljs plain">&#x2F;** * 针对多Realm，使用自定义身份验证器 * @return *&#x2F;@Beanpublic ModularRealmAuthenticator modularRealmAuthenticator()&#123;    CustomModularRealmAuthenticator authenticator &#x3D; new CustomModularRealmAuthenticator();    authenticator.setAuthenticationStrategy(new AtLeastOneSuccessfulStrategy());    return authenticator;&#125;</code></pre><ol><li><code>realm</code>，把创建的所有 realm 都注册到 bean 中：</li></ol><pre><code class="hljs plain">&#x2F;** * 免密授权登录 * @return *&#x2F;@Beanpublic OAuth2UserRealm oAuth2UserRealm()&#123;    OAuth2UserRealm realm &#x3D; new OAuth2UserRealm();    &#x2F;&#x2F; 不需要加密，直接返回    return realm;&#125;@Beanpublic UserRealm userRealm() &#123;    UserRealm userRealm &#x3D; new UserRealm();    userRealm.setCredentialsMatcher(credentialsMatcher());    return userRealm;&#125;</code></pre><ol><li><code>securityManager</code>，让安全管理器使用我们创建的身份验证器，并添加所有的 realm：</li></ol><pre><code class="hljs plain">@Bean(name &#x3D; &quot;securityManager&quot;)public DefaultWebSecurityManager securityManager() &#123;    DefaultWebSecurityManager securityManager &#x3D; new DefaultWebSecurityManager();    securityManager.setCacheManager(cacheManager());    securityManager.setSessionManager(sessionManager());    &#x2F;&#x2F; 设置验证器为自定义验证器    securityManager.setAuthenticator(modularRealmAuthenticator());    &#x2F;&#x2F; 设置Realms    List&lt;Realm&gt; realms &#x3D; new ArrayList&lt;&gt;(2);    realms.add(userRealm());    realms.add(oAuth2UserRealm());    securityManager.setRealms(realms);    return securityManager;&#125;</code></pre><p>最后把我的 <code>ShiroConfig</code> 完整代码奉上，各位参考即可：</p><pre><code class="hljs plain">import com.*.config.filter.MyLoginFilter;import com.*.config.filter.MyLogoutFilter;import org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy;import org.apache.shiro.authc.pam.ModularRealmAuthenticator;import org.apache.shiro.cache.ehcache.EhCacheManager;import org.apache.shiro.realm.Realm;import org.apache.shiro.session.mgt.eis.MemorySessionDAO;import org.apache.shiro.session.mgt.eis.SessionDAO;import org.apache.shiro.spring.LifecycleBeanPostProcessor;import org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;import org.apache.shiro.spring.web.ShiroFilterFactoryBean;import org.apache.shiro.web.mgt.DefaultWebSecurityManager;import org.apache.shiro.web.session.mgt.DefaultWebSessionManager;import org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;import org.springframework.boot.web.servlet.FilterRegistrationBean;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.DependsOn;import org.springframework.web.filter.DelegatingFilterProxy;import javax.servlet.Filter;import java.util.ArrayList;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;&#x2F;** * shiro框架配置 *&#x2F;@Configurationpublic class ShiroConfig &#123;    @Bean(name &#x3D; &quot;shiroFilter&quot;)    public ShiroFilterFactoryBean shiroFilter(DefaultWebSecurityManager securityManager) &#123;        ShiroFilterFactoryBean shiroFilter &#x3D; new ShiroFilterFactoryBean();        shiroFilter.setSecurityManager(securityManager);        &#x2F;&#x2F; 登录配置        shiroFilter.setLoginUrl(&quot;login&quot;);        shiroFilter.setSuccessUrl(&quot;system&quot;);        shiroFilter.setUnauthorizedUrl(&quot;&#x2F;error?code&#x3D;403&quot;);        &#x2F;&#x2F; 自定义过滤器        Map&lt;String, Filter&gt; filtersMap &#x3D; new LinkedHashMap&lt;&gt;();        filtersMap.put(&quot;access&quot;, new MyLoginFilter());        filtersMap.put(&quot;mylogout&quot;, new MyLogoutFilter());        shiroFilter.setFilters(filtersMap);        &#x2F;&#x2F; 拦截配置        Map&lt;String, String&gt; filterChainDefinitions &#x3D; new LinkedHashMap&lt;&gt;();        filterChainDefinitions.put(&quot;&#x2F;logout&quot;, &quot;mylogout&quot;);        filterChainDefinitions.put(&quot;&#x2F;system&#x2F;**&quot;, &quot;access,authc&quot;);        filterChainDefinitions.put(&quot;&#x2F;**&quot;, &quot;anon&quot;);        shiroFilter.setFilterChainDefinitionMap(filterChainDefinitions);        return shiroFilter;    &#125;    @Bean(name &#x3D; &quot;securityManager&quot;)    public DefaultWebSecurityManager securityManager() &#123;        DefaultWebSecurityManager securityManager &#x3D; new DefaultWebSecurityManager();        securityManager.setCacheManager(cacheManager());        securityManager.setSessionManager(sessionManager());        &#x2F;&#x2F; 设置验证器为自定义验证器        securityManager.setAuthenticator(modularRealmAuthenticator());        &#x2F;&#x2F; 设置Realms        List&lt;Realm&gt; realms &#x3D; new ArrayList&lt;&gt;(2);        realms.add(userRealm());        realms.add(oAuth2UserRealm());        securityManager.setRealms(realms);        return securityManager;    &#125;    &#x2F;**     * 针对多Realm，使用自定义身份验证器     * @return     *&#x2F;    @Bean    public ModularRealmAuthenticator modularRealmAuthenticator()&#123;        CustomModularRealmAuthenticator authenticator &#x3D; new CustomModularRealmAuthenticator();        authenticator.setAuthenticationStrategy(new AtLeastOneSuccessfulStrategy());        return authenticator;    &#125;    &#x2F;**     * 免密授权登录     * @return     *&#x2F;    @Bean    public OAuth2UserRealm oAuth2UserRealm()&#123;        OAuth2UserRealm realm &#x3D; new OAuth2UserRealm();        &#x2F;&#x2F; 不需要加密，直接返回        return realm;    &#125;    @Bean    @DependsOn(&quot;lifecycleBeanPostProcessor&quot;)    public UserRealm userRealm() &#123;        UserRealm userRealm &#x3D; new UserRealm();        userRealm.setCredentialsMatcher(credentialsMatcher());        return userRealm;    &#125;    @Bean    public DefaultWebSessionManager sessionManager()&#123;        DefaultWebSessionManager manager &#x3D; new DefaultWebSessionManager();        manager.setSessionDAO(sessionDAO());        manager.setGlobalSessionTimeout(10800000);        manager.setDeleteInvalidSessions(true);        manager.setSessionValidationSchedulerEnabled(true);        manager.setSessionValidationInterval(10800000);        return manager;    &#125;    @Bean    public SessionDAO sessionDAO()&#123;        return new MemorySessionDAO();    &#125;    @Bean(name &#x3D; &quot;cacheManager&quot;)    public EhCacheManager cacheManager() &#123;        EhCacheManager cacheManager &#x3D; new EhCacheManager();        cacheManager.setCacheManagerConfigFile(&quot;classpath:shiro&#x2F;ehcache-shiro.xml&quot;);        return cacheManager;    &#125;    @Bean(name &#x3D; &quot;credentialsMatcher&quot;)    public CredentialsMatcher credentialsMatcher() &#123;        return new CredentialsMatcher();    &#125;    @Bean(name &#x3D; &quot;lifecycleBeanPostProcessor&quot;)    public LifecycleBeanPostProcessor lifecycleBeanPostProcessor() &#123;        LifecycleBeanPostProcessor lifecycleBeanPostProcessor &#x3D; new LifecycleBeanPostProcessor();        return lifecycleBeanPostProcessor;    &#125;    &#x2F;**     * shiro里实现的Advisor类,用来拦截注解的方法 .     *&#x2F;    @Bean    public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor() &#123;        AuthorizationAttributeSourceAdvisor advisor &#x3D; new AuthorizationAttributeSourceAdvisor();        advisor.setSecurityManager(securityManager());        return advisor;    &#125;    @Bean    @DependsOn(&#123;&quot;lifecycleBeanPostProcessor&quot;&#125;)    public DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator() &#123;        DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator &#x3D; new DefaultAdvisorAutoProxyCreator();        advisorAutoProxyCreator.setProxyTargetClass(true);        return advisorAutoProxyCreator;    &#125;    @Bean    public FilterRegistrationBean delegatingFilterProxy()&#123;        FilterRegistrationBean filterRegistrationBean &#x3D; new FilterRegistrationBean();        DelegatingFilterProxy proxy &#x3D; new DelegatingFilterProxy();        proxy.setTargetFilterLifecycle(true);        proxy.setTargetBeanName(&quot;shiroFilter&quot;);        filterRegistrationBean.setFilter(proxy);        return filterRegistrationBean;    &#125;&#125;</code></pre><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>上面都配置好之后，终于到了登录。</p><p>这时候就很简单了，在登录方法中，实例化对应的 Token，然后调用 subject 的 <code>login()</code> 方法，及时捕获异常，没有排除异常代表登录认证成功。</p><p>例如传统的账号密码登录，这里的 <code>username</code> 和 <code>password</code> 就是前端传的值：</p><pre><code class="hljs plain">try &#123;    UsernamePasswordToken token &#x3D; new UsernamePasswordToken(username, password);    SecurityUtils.getSubject().login(token);    return Result.ok(&quot;登录成功&quot;);&#125; catch (IncorrectCredentialsException ice) &#123;    return Result.error(&quot;密码错误&quot;);&#125; catch (UnknownAccountException uae) &#123;    return Result.error(&quot;账号不存在&quot;);&#125; catch (LockedAccountException e) &#123;    return Result.error(&quot;账号被锁定&quot;);&#125; catch (ExcessiveAttemptsException eae) &#123;    return Result.error(&quot;操作频繁，请稍后再试&quot;);&#125; catch (ConcurrentAccessException cae) &#123;    return Result.error(&quot;没有权限，无法登陆&quot;);&#125;</code></pre><p>而第三方登录就实例化 <code>OAuth2UserToken</code>，将第三方平台的类型及其回调的 openid 等信息保存到 token 中，然后调用 subject 的 <code>login()</code> 方法：</p><pre><code class="hljs plain">&#x2F;&#x2F; 实例化自定义的授权TokenOAuth2UserToken.OAuth2User oAuth2User &#x3D; new OAuth2UserToken.OAuth2User();oAuth2User.setOpenid(authUser.getUuid());oAuth2User.setNickname(authUser.getNickname());OAuth2UserToken userToken &#x3D; new OAuth2UserToken(type, oAuth2User);&#x2F;&#x2F; 调用login方法SecurityUtils.getSubject().login(userToken);servletResponse.sendRedirect(&quot;&#x2F;&quot;);</code></pre><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>将上面代码全部写好之后，启动项目，尝试用户名密码登录和第三方免密登录，如果没有问题则大功告成，如果报错了，看官应注意检查是否遗漏代码。</p><p>同时注意，上面的代码切忌照搬，还是以理解为主。</p><p>如果存在疑问，或者有任何的建议，欢迎评论留言！</p>]]></content>
    
    
    
    <tags>
      
      <tag>Shiro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uniapp真机调试技巧</title>
    <link href="/posts/57668/"/>
    <url>/posts/57668/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>使用 uniapp 开 Android 与 iOS 应用，使用模拟器只能测 Android，iOS 无法有效测试，并且模拟器跟真机仍然有差异，所以做 app 开发一定要做真机调试，否则各种兼容性问题会十分棘手。</p><p>看到网上很多人云亦云的文章，要么要复杂，要么不做所云。无意中在 bilibili 上看到了 uniapp 的视频，详细讲解了如何 HbuilderX 如何进行真机调试，并且步骤简单，几分钟就可以上手。</p><p>下面进入正文。</p><h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><p>安卓设备各家的 OS 都有差异，但差异不会很大。这里 以坚果 Pro 为例。</p><p>首先在手机的设置中打开 <code>开发者选项</code>，具体如何打开，网上一查就知道了。</p><p><img src="https://img.hacpai.com/file/2020/02/image-e7efc861.png" srcset="/img/loading.gif" alt="image.png"></p><p>进入开发者选项，把红框标识的几个选项全部开启，并且将<code>USB使用方式</code>修改为<code>传输文件</code>。</p><p><img src="https://img.hacpai.com/file/2020/02/image-accd9b94.png" srcset="/img/loading.gif" alt="image.png"></p><p>这时候掏出数据线，连接电脑。</p><p>打开HBuilderX</p><p><img src="https://img.hacpai.com/file/2020/02/image-8e9adcf1.png" srcset="/img/loading.gif" alt="image.png"></p><p>可以看到在<code>运行</code>里面有了安卓设备，点击运行即可。</p><h1 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h1><ol><li>下载 iTunes</li></ol><p><a href="https://www.apple.com/itunes/" target="_blank" rel="noopener">https://www.apple.com/itunes/</a> 直接在官网进行下载安装</p><p>安装完成后直接打开</p><ol start="2"><li>使用数据线，将 iOS 设备连接电脑</li></ol><p>连接成功后，iTunes 上会显示你的设备名称</p><p><img src="https://img.hacpai.com/file/2020/02/image-ea1d3b72.png" srcset="/img/loading.gif" alt="image.png"></p><p>在左侧的设备栏出现你的设备后，说明连接成功</p><ol start="3"><li>打开 HbuilderX</li></ol><p><img src="https://img.hacpai.com/file/2020/02/image-0e3ebbe8.png" srcset="/img/loading.gif" alt="image.png"><br>点击<code>运行</code>-&gt;<code>运行-[设备：***]</code></p><p>点击后控制台会出现如下信息，这时候静候片刻便可以在你的 iOS 设备上看到一个名为<code>HBuilder</code>的 app</p><p>这时候不要着急</p><p>打开<code>设置</code>-<code>通用</code>-<code>设备管理</code>，里面有一个企业级应用，点进去，再点<code>信任</code></p><p>回到桌面，打开<code>HBuilder</code>app，开始真机调试。</p>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>uniapp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>axios发送post请求时如何提交表单参数？</title>
    <link href="/posts/32978/"/>
    <url>/posts/32978/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>axios默认使用<code>application/json</code>格式进行参数传递，但是后台需要的是k-v格式，所以需要对axios的请求参数进行配置，此处提供两种常用方法，我更推荐<strong>方法二</strong>。</p><h1 id="方法一：-配置transformRequest"><a href="#方法一：-配置transformRequest" class="headerlink" title="方法一： 配置transformRequest"></a>方法一： 配置<code>transformRequest</code></h1><pre><code class="hljs plain">import axios from &#39;axios&#39;</code></pre><pre><code class="hljs plain">axios(&#123;  method: &#39;post&#39;,  url: &#39;xxx&#39;,  &#x2F;&#x2F; 利用 transformRequest 进行转换配置  transformRequest: [    function(oldData)&#123;      let x &#x3D; &#39;&#39;      for (let item in oldData)&#123;        x +&#x3D; encodeURIComponent(item) + &#39;&#x3D;&#39; + encodeURIComponent(oldData[item]) + &#39;&amp;&#39;      &#125;      x&#x3D; x.slice(0, -1)      return x    &#125;  ],  headers: &#123;    &#39;Content-Type&#39;: &#39;application&#x2F;x-www-form-urlencoded&#39;  &#125;,  data: dataObj,&#125;)</code></pre><p>其中<code>encodeURIComponent</code>是JavaScript内置的函数。</p><h1 id="方法二：利用qs-stringify-转换data"><a href="#方法二：利用qs-stringify-转换data" class="headerlink" title="方法二：利用qs.stringify()转换data"></a>方法二：利用<code>qs.stringify()</code>转换data</h1><pre><code class="hljs plain">import axios from &#39;axios&#39;import qs from &#39;qs&#39; &#x2F;&#x2F;在安装axios时，默认就安装了</code></pre><pre><code class="hljs plain">axios(&#123;  method: &#39;post&#39;,  url: &#39;xxx&#39;,  headers: &#123;    &#39;Content-Type&#39;: &#39;application&#x2F;x-www-form-urlencoded&#39;  &#125;,  data: qs.stringify(data)&#125;)</code></pre><h1 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h1><p>如果将参数改成form-data格式，一旦参数中存在object，提交的数据会被encode成[object object]，目前还没有很好的解决办法，只能通过<code>JSON.stringify()</code>将object格式化成字符串再提交到后端，由后端进行解析处理。</p>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>前端</tag>
      
      <tag>axios</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS 应用签名证书的区别</title>
    <link href="/posts/17362/"/>
    <url>/posts/17362/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img.hacpai.com/bing/20190324.jpg?imageView2/1/w/960/h/540/interlace/1/q/100" srcset="/img/loading.gif" alt=""></p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>最近用 uniapp 做了个 iOS 的应用，在打包时却被 iOS 的证书难住了，查阅了许多资料之后基本算是搞清楚了 iOS 几种证书的区别。</p><p>当然，打包时碰到的问题远不止这些，后面还会再写几篇文章讲开发者账号的购买与各种签名文件的生成，尤其是 使用 windows 的同学千万不可错过。</p><p>这篇文章转载自蒲公英的文档中心，如果涉及侵权请及时联系我，我会将文章进行删除。</p><p>主要是这篇文档写的实在详细且有效，帮了我大忙！</p><p>直接贴上地址：<a href="https://www.pgyer.com/doc/view/app_developer_account" target="_blank" rel="noopener">https://www.pgyer.com/doc/view/app_developer_account</a></p><h3 id="iOS-应用的证书选择"><a href="#iOS-应用的证书选择" class="headerlink" title="iOS 应用的证书选择"></a>iOS 应用的证书选择</h3><p>对于一个未上线 App Store 的应用，一般来说，开发者如果需要将应用安装到某些用户的设备上，就需要将应用导出为这些设备可以直接安装的安装包（.ipa文件），安装包能否正确导出，是决定了应用能否被正确安装到设备上的关键因素。其中，最关键的一个因素是，导出安装包时，应用所使用的证书（即：签名方式）。</p><p>开发者可以选择如下两种方式的证书签名方式，来导出应用安装包：</p><ol><li>Ad-hoc 方式</li><li>In-house 方式</li></ol><p>其中，具体使用哪种方式，取决于开发者拥有苹果开发者账号的类型。例如，如果开发者拥有的是苹果个人开发者账号，则可以使用 Ad-hoc 方式；如果拥有的是苹果企业开发者账号，则可以使用 In-house 方式。关于苹果开发者账号支持的证书类型，请见下表：</p><table><thead><tr><th align="center">账号类型</th><th align="center">价格</th><th align="center">可以发布AppStore?</th><th align="center">可以通过蒲公英安装?</th><th align="center">支持安装设备数量</th><th align="center">申请条件</th><th align="center">证书类型</th></tr></thead><tbody><tr><td align="center">个人账号</td><td align="center">$99</td><td align="center">可以</td><td align="center">可以</td><td align="center">100</td><td align="center">无限制</td><td align="center"><strong>Ad Hoc</strong>, App Store</td></tr><tr><td align="center">公司账号</td><td align="center">$99</td><td align="center">可以</td><td align="center">可以</td><td align="center">100</td><td align="center">DUNS编码</td><td align="center"><strong>Ad Hoc</strong>, App Store</td></tr><tr><td align="center">企业账号</td><td align="center">$299</td><td align="center">不可以</td><td align="center">可以</td><td align="center">无限制</td><td align="center">DUNS编码</td><td align="center"><strong>Ad Hoc</strong>, <strong>In House</strong></td></tr><tr><td align="center">教育账号</td><td align="center">$0</td><td align="center">可以</td><td align="center">可以</td><td align="center">100</td><td align="center">教育机构</td><td align="center"><strong>Ad Hoc</strong>, App Store</td></tr></tbody></table><p>关于导出时，具体的操作方式，请查看：<a href="https://www.pgyer.com/doc/view/build_ipa" target="_blank" rel="noopener">打包 iOS 的 IPA 文件</a></p><h3 id="三种证书签名的区别"><a href="#三种证书签名的区别" class="headerlink" title="三种证书签名的区别"></a>三种证书签名的区别</h3><p>到目前为止，苹果为 iOS 应用共提供了三种类型的证书签名方式，每一种都有独特的用途。这三种分别是：</p><ol><li>Ad-hoc</li><li>In-house</li><li>App-Store</li></ol><p>蒲公英会根据打包证书的不同，分别显示为<code>内测版</code>、<code>企业版</code>、<code>App-Store版</code>。</p><p>关于这三种类型的证书，区别如下表所示：</p><table><thead><tr><th align="center">证书名称</th><th align="center">蒲公英显示</th><th align="center">蒲公英支持的安装范围</th><th align="center">支持的苹果开发者类型</th></tr></thead><tbody><tr><td align="center">Ad-hoc</td><td align="center">内测版</td><td align="center">需要把设备UDID添加到证书才可安装</td><td align="center">个人账号、公司账号、教育账号、企业账号</td></tr><tr><td align="center">In-house</td><td align="center">企业版</td><td align="center">任何iOS设备均可安装</td><td align="center">企业账号</td></tr><tr><td align="center">App-Store</td><td align="center">App-Store</td><td align="center">只能通过App Store安装</td><td align="center">个人账号、公司账号、教育账号</td></tr></tbody></table><p>当一个 iOS 的应用上传到蒲公英后，蒲公英会显示出这个应用是使用哪种方式的证书来签名打包的。如图所示：</p><p><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"></a><a href="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" target="_blank" rel="noopener"><img src="https://static.pgyer.com/image/view/admin_images/45d797e7bd71579be13bee08e2268417" srcset="/img/loading.gif" alt="证书类型"></a></p><p>同时，在应用下载页面、应用管理页面中，也可以看到某个应用的打包方式。</p><p><em>注：此文仅适用于 iOS 类型的应用。</em></p>]]></content>
    
    
    
    <tags>
      
      <tag>ios开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA通过java-agent实现永久破解</title>
    <link href="/posts/34402/"/>
    <url>/posts/34402/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img.hacpai.com/bing/20180815.jpg?imageView2/1/w/960/h/540/interlace/1/q/100" srcset="/img/loading.gif" alt=""></p><blockquote><p>IDEA 最近又出了新手段封掉了一大批激活码，但常言道“道高一尺，魔高一丈”，本篇将介绍如何使用 java-agent 补丁将 IDEA 注册到 2089 年。<br>所有版本的激活步骤大同小异，可能在界面上会有差异，本文以 2019.3 版本为例。</p></blockquote><p><strong>👍 👍 👍 必须通过 IDEA 菜单修改 javaagent 参数，千万不要在 bin 目录下面改</strong></p><ol><li>打开 IDEA<br>如果一上来就要激活，并且没有 <code>Evaluate for free</code> 按钮，不要担心，点击 <code>Exit</code>，再重新启动，就会出现 <code>Evaluate for free</code>，点击进行试用</li><li>下载 java-agent.jar<br><a href="https://img.hacpai.com/file/2020/01/jetbrainsagent-52066666.jar" target="_blank" rel="noopener">点击下载：jetbrains-agent.jar</a><br>下载完成后，将 jar 包拷贝到特定目录，推荐使用 <code>idea\bin</code> 目录，但是切记，<strong>👍 目录中不能包含中文</strong></li><li>修改 vmoption，添加 <code>-javaagent</code> 参数<br><img src="https://img.hacpai.com/file/2020/01/image-9db16a0c.png" srcset="/img/loading.gif" alt="image.png"></li></ol><p><img src="https://img.hacpai.com/file/2020/01/image-d98f3d04.png" srcset="/img/loading.gif" alt="image.png"></p><pre><code class="hljs plain">-javaagent:E:\soft\program\IntelliJ IDEA\javaagent\jetbrains-agent.jar</code></pre><p>后面的路径就是上面下载的 jar 包存放的路径</p><ol><li>重启 IDEA，填写激活码<br><img src="https://img.hacpai.com/file/2020/01/image-85851711.png" srcset="/img/loading.gif" alt="image.png"></li></ol><p><img src="https://img.hacpai.com/file/2020/01/image-d8837daf.png" srcset="/img/loading.gif" alt="image.png"></p><p>通过下面页面可以获得专属的 Activation code</p><p>需要 GitHub 授权登录，GitHub 账号注册需要超过 7 天</p><p>将使用你的 GitHub 用户名作为 License name</p><p>链接：<a href="https://zhile.io/custom/license" target="_blank" rel="noopener">Get your license</a></p><h2 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h2><h3 id="Your-activation-code-could-not-be-validated-error-1653219"><a href="#Your-activation-code-could-not-be-validated-error-1653219" class="headerlink" title="Your activation code could not be validated (error 1653219)"></a>Your activation code could not be validated (error 1653219)</h3><p><a href="https://www.exception.site/essay/your-activation-code-could-not-be-validated-error-1653219" target="_blank" rel="noopener">https://www.exception.site/essay/your-activation-code-could-not-be-validated-error-1653219</a></p><h3 id="出现其他问题"><a href="#出现其他问题" class="headerlink" title="出现其他问题"></a>出现其他问题</h3><p><a href="https://img.hacpai.com/file/2020/02/jetbrainsagentlatest-5496539a.zip" target="_blank" rel="noopener">jetbrainsagentlatest.zip</a></p><p>尝试使用上面这个 jetbrain</p>]]></content>
    
    
    
    <tags>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>卧槽！IDEA还能这么用！</title>
    <link href="/posts/8014/"/>
    <url>/posts/8014/</url>
    
    <content type="html"><![CDATA[<blockquote><p>原文链接： <a href="https://www.cnblogs.com/javastack/p/11230120.html" target="_blank" rel="noopener">Intellij IDEA 智能补全的 10 个姿势，太牛逼了。。</a></p></blockquote><h2 id="1、快速打印输出"><a href="#1、快速打印输出" class="headerlink" title="1、快速打印输出"></a>1、快速打印输出</h2><p>除了用 sout 开头快速生成，还能在后面快速生成。</p><p><img src="http://img.javastack.cn/sout.gif" srcset="/img/loading.gif" alt="null"></p><h2 id="2、快速定义局部变量"><a href="#2、快速定义局部变量" class="headerlink" title="2、快速定义局部变量"></a>2、快速定义局部变量</h2><p>在字符串或者数字……后面输入 .var，回车，IDEA会自动推断并快速定义一个局部变量，不过它是 final 类型的。</p><p><img src="http://img.javastack.cn/var.gif" srcset="/img/loading.gif" alt="null"></p><h2 id="3、快速定义成员变量"><a href="#3、快速定义成员变量" class="headerlink" title="3、快速定义成员变量"></a>3、快速定义成员变量</h2><p>在值后面输入.field，可以快速定义一个成员变量，如果当前方法是静态的，那生成的变量也是静态的。</p><p><img src="http://img.javastack.cn/field.gif" srcset="/img/loading.gif" alt="null"></p><h2 id="4、快速格式化字符串"><a href="#4、快速格式化字符串" class="headerlink" title="4、快速格式化字符串"></a>4、快速格式化字符串</h2><p>在字符串后面输入.format，回车，IDEA会自动生成 String.format…语句，牛逼吧！</p><p><img src="http://img.javastack.cn/format.gif" srcset="/img/loading.gif" alt="null"></p><h2 id="5、快速判断（非）空"><a href="#5、快速判断（非）空" class="headerlink" title="5、快速判断（非）空"></a>5、快速判断（非）空</h2><pre><code class="hljs plain">if (xx !&#x3D; null)if (xx &#x3D;&#x3D; null)</code></pre><p>像上面这种判断空/非空的情况非常多吧，其实可以快速生成 if 判断语句块，非空：.notnull 或者 .nn，空：.null。</p><p><img src="http://img.javastack.cn/null.gif" srcset="/img/loading.gif" alt="null"></p><h2 id="6、快速取反判断"><a href="#6、快速取反判断" class="headerlink" title="6、快速取反判断"></a>6、快速取反判断</h2><p>输入 .not 可以让布尔值快速取反，再输入 .if 可快速生成 if 判断语句块。</p><p><img src="http://img.javastack.cn/notif.gif" srcset="/img/loading.gif" alt="null"></p><h2 id="7、快速遍历集合"><a href="#7、快速遍历集合" class="headerlink" title="7、快速遍历集合"></a>7、快速遍历集合</h2><p>下面是几种 for 循环语句的快速生成演示，.for, .fori, .forr 都可以满足你的要求。</p><p><img src="http://img.javastack.cn/for.gif" srcset="/img/loading.gif" alt="null"></p><h2 id="8、快速返回值"><a href="#8、快速返回值" class="headerlink" title="8、快速返回值"></a>8、快速返回值</h2><p>在值后面输入.return，可以让当前值快速返回。</p><p><img src="http://img.javastack.cn/return.gif" srcset="/img/loading.gif" alt="null"></p><h2 id="9、快速生成同步锁"><a href="#9、快速生成同步锁" class="headerlink" title="9、快速生成同步锁"></a>9、快速生成同步锁</h2><p>在对象后面输入.synchronized，可以快速生成该对象的同步锁语句块。</p><p><img src="http://img.javastack.cn/synchronized.gif" srcset="/img/loading.gif" alt="null"></p><h2 id="10、快速生成JDK8语句"><a href="#10、快速生成JDK8语句" class="headerlink" title="10、快速生成JDK8语句"></a>10、快速生成JDK8语句</h2><p>下面演示的是快速生成 Lambda 以及 Optional 语句。</p><p><img src="http://img.javastack.cn/jdk8.gif" srcset="/img/loading.gif" alt="null"></p><p> 涨姿势了吧。</p>]]></content>
    
    
    
    <tags>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>npm install 报错：Maximum call stack size exceeded</title>
    <link href="/posts/40581/"/>
    <url>/posts/40581/</url>
    
    <content type="html"><![CDATA[<blockquote><p>很多人说直接升级npm或降级即可，但是我尝试之后发现无效，找了不少博客与论坛，终于解决了这个问题。在这里记录一下，以免下次再次被难住。</p></blockquote><ol><li>首先尝试升降级npm，如果可行的话，那么下文就都不必在看</li></ol><p>降级 ：<code>npm install -g npm@5.4.0</code><br>升级 ： <code>npm install -g npm</code></p><ol start="2"><li>如果升降级不能解决问题，需要清理一下缓存<pre><code class="hljs plain">npm cache clean --force</code></pre>清理过之后，再执行<code>npm install</code>就不再报错了</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>npm</tag>
      
      <tag>报错处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>maven打包时跳过单元测试的方法</title>
    <link href="/posts/52666/"/>
    <url>/posts/52666/</url>
    
    <content type="html"><![CDATA[<blockquote><p>初入门时，面向百度编程；水平愈高后，面向谷歌编程。可奈何英文水平属实太差，转来转去还是逃不出这个大圈。</p></blockquote><h3 id="1-添加properties"><a href="#1-添加properties" class="headerlink" title="1. 添加properties"></a>1. 添加properties</h3><p>网络上使用这种方法的人较少， 但却是我个人最推荐的方法，不用写命令行，不用改build，还是所有maven插件通用。<br>直接上代码：</p><pre><code class="hljs plain">&lt;properties&gt;    &lt;maven.test.skip&gt;true&lt;&#x2F;maven.test.skip&gt;&lt;&#x2F;properties&gt;</code></pre><h3 id="2-使用mvn命令"><a href="#2-使用mvn命令" class="headerlink" title="2. 使用mvn命令"></a>2. 使用mvn命令</h3><p>使用mvn命令打包项目，不难，但个人感觉不够优雅，而且没有充分发挥IDE的作用、</p><pre><code class="hljs plain">mvn clean package -DskipTests</code></pre><h3 id="3-修改"><a href="#3-修改" class="headerlink" title="3. 修改-"></a>3. 修改<build>-<plugin></h3><p>这种方式是我最不喜欢的，并且没有实地测试，所以谨慎使用！</p><pre><code class="hljs plain">&lt;build&gt;  &lt;plugins&gt;&lt;plugin&gt;                &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;                &lt;artifactId&gt;maven-surefire-plugin&lt;&#x2F;artifactId&gt;                &lt;configuration&gt;                    &lt;skip&gt;true&lt;&#x2F;skip&gt;                &lt;&#x2F;configuration&gt;        &lt;&#x2F;plugin&gt;   &lt;&#x2F;plugins&gt;&lt;build&gt;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何使用 idea 远程调试 Java 代码</title>
    <link href="/posts/37829/"/>
    <url>/posts/37829/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img.hacpai.com/bing/20190724.jpg?imageView2/1/w/960/h/540/interlace/1/q/100" srcset="/img/loading.gif" alt=""></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>前段时间程序部署到生产环境后出现了一些不可预见的问题，只会输出日志再分析的我苦不堪言，偶然发现 idea 可以直接对程序进行远程调试，实在方便的很。</p><p>不过远程调试对网络的要求比较高，如果网络不是十分流畅，调试时的卡顿也会比较麻烦。</p><p>参考文章：<a href="https://www.cnblogs.com/krockey/p/5056945.html" target="_blank" rel="noopener">https://www.cnblogs.com/krockey/p/5056945.html</a></p><h1 id="启动脚本配置"><a href="#启动脚本配置" class="headerlink" title="启动脚本配置"></a>启动脚本配置</h1><p>想要让程序支持远程调试功能，只需要在启动时加上特定的 JVM 参数，根据 JDK 版本的不同，有如下几种脚本：</p><ul><li>大于 1.4.x<br><code>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=4001</code></li><li>等于 1.4.x<br><code>-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=4001</code></li><li>小于 1.4.x<br><code>-Xnoagent -Djava.compiler=NONE -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=4001</code></li></ul><p>最后的<code>4001</code>就是远程调试端口，可以任意修改。如果生产环境是云服务器，还要放行防火墙和安全组。</p><h1 id="IDEA-配置"><a href="#IDEA-配置" class="headerlink" title="IDEA 配置"></a>IDEA 配置</h1><p>idea 配置非常简单，按下图步骤操作：</p><p><img src="https://img.hacpai.com/file/2020/02/image-fc0cf595.png" srcset="/img/loading.gif" alt="image.png"></p><p><img src="https://img.hacpai.com/file/2020/02/image-b4886b2b.png" srcset="/img/loading.gif" alt="image.png"></p><p><img src="https://img.hacpai.com/file/2020/02/image-530b186c.png" srcset="/img/loading.gif" alt="image.png"></p><p>全部修改完成后，点击“OK”</p><h1 id="开始远程调试"><a href="#开始远程调试" class="headerlink" title="开始远程调试"></a>开始远程调试</h1><p><img src="https://img.hacpai.com/file/2020/02/image-ab34719c.png" srcset="/img/loading.gif" alt="image.png"></p><p>点击图中的 debug ，当 console 窗口中打印出 <code>Connected to the target VM, address: 127.0.0.1:4001&#39;, transport: &#39;socket&#39;</code>代表连接成功，这时候在代码里加上断点，再对生产环境的程序发起请求，就会自动执行到断点处了。</p><p>需要注意，远程调试的是生产环境的代码，即便修改了本地代码，调试时也不会执行，所以要<strong>保证生产环境的代码与本地一致</strong>。</p>]]></content>
    
    
    
    <tags>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过ResponseBodyAdvice对接口返回值进行加密</title>
    <link href="/posts/51602/"/>
    <url>/posts/51602/</url>
    
    <content type="html"><![CDATA[<blockquote><p>如果正在使用SpringBoot框架，那么来对地方了，如果是其他框架，那么看官就需要另外查阅资料</p></blockquote><h1 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h1><p>  对接口返回值进行加密，必须兼容老版本接口，而老版本接口不应加密，同时加密支持开关</p><h1 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h1><blockquote><p>其实有很多种方式都可以实现上述功能，例如AOP、Filter等，我这边直接使用ResponseBodyAdvice对返回值进行修改</p></blockquote><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>新建<code>EncryptResponseAdvice</code>类，添加<code>@ControllerAdvice</code>注解，并设置<code>basePackage</code>为新接口所在的包</p><pre><code class="hljs plain">package com.w.module.api.advice;import com.w.module.api.Encrypt;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.core.MethodParameter;import org.springframework.http.MediaType;import org.springframework.http.converter.HttpMessageConverter;import org.springframework.http.server.ServerHttpRequest;import org.springframework.http.server.ServerHttpResponse;import org.springframework.web.bind.annotation.ControllerAdvice;import org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice;@ControllerAdvice(basePackages &#x3D; &quot;com.w.module.api&quot;)public class EncryptResponseAdvice implements ResponseBodyAdvice&lt;Object&gt; &#123;    @Value(&quot;$&#123;system.api.encrypt&#125;&quot;)    private Boolean isEncrypt;    @Autowired    private Encrypt encrypt;    @Override    public boolean supports(MethodParameter returnType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType) &#123;        return true;    &#125;    @Override    public Object beforeBodyWrite(Object body, MethodParameter returnType, MediaType selectedContentType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; selectedConverterType, ServerHttpRequest request, ServerHttpResponse response) &#123;        Object result &#x3D; body;        if (isEncrypt) &#123;            result &#x3D; encrypt.build(body);        &#125;        return result;    &#125;&#125;</code></pre><p>因为需要配置加密的开关，所以这里使用<code>@Value</code>来获取<code>application.properties</code>中的加密配置 <code>system.api.encrypt=true</code>。</p><p>另外贴上加密工具类<code>Encrypt.java</code></p><pre><code class="hljs plain">package com.w.module.api;import cn.hutool.crypto.asymmetric.KeyType;import cn.hutool.crypto.asymmetric.RSA;import cn.hutool.json.JSONUtil;import org.springframework.stereotype.Component;@Componentpublic class Encrypt &#123;    String PRIVATE_KEY &#x3D; &quot;xxxxxx&quot;;    String PUBLIC_KEY &#x3D; &quot;xxxx&quot;;    public Object build(Object result)&#123;        if (result !&#x3D; null) &#123;            RSA rsa &#x3D; new RSA(PRIVATE_KEY, PUBLIC_KEY);            String json&#x3D; JSONUtil.toJsonStr(result);            String encryptBase64 &#x3D; rsa.encryptBase64(json, KeyType.PublicKey);            result &#x3D; encryptBase64;        &#125;        return result;    &#125;&#125;</code></pre><p>这个类中引用了<code>hutool</code>的部分工具类，<code>hutool</code>的版本是<code>5.1.0</code></p><pre><code class="hljs plain">&lt;dependency&gt;      &lt;groupId&gt;cn.hutool&lt;&#x2F;groupId&gt;      &lt;artifactId&gt;hutool-all&lt;&#x2F;artifactId&gt;     &lt;version&gt;5.1.0&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS安装RocketMQ</title>
    <link href="/posts/64833/"/>
    <url>/posts/64833/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img.hacpai.com/bing/20180906.jpg?imageView2/1/w/960/h/540/interlace/1/q/100" srcset="/img/loading.gif" alt=""></p><h1 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h1><p>在进行安装之前，您需要预先安装以下软件：</p><ol><li>建议使用64位Linux/Unix/Mac操作系统；</li><li>64位JDK 1.8+;</li><li>Maven 3.2.x（<a href="https://easyboot.xyz/articles/2019/11/22/1574392882856.html" target="_blank" rel="noopener">点击查看安装教程</a>）；</li><li>4G以上的可用磁盘</li></ol><h1 id="下载和构建"><a href="#下载和构建" class="headerlink" title="下载和构建"></a>下载和构建</h1><ol><li>点击<a href="https://archive.apache.org/dist/rocketmq/4.4.0/rocketmq-all-4.4.0-source-release.zip" target="_blank" rel="noopener">此处</a>下载4.4.0版本压缩包</li><li>上传压缩包到服务器指定位置，以<code>/www/wwwroot</code>为例</li><li>执行以下命令以解压压缩包并进行构建<pre><code class="hljs plain">&gt; cd &#x2F;www&#x2F;wwwroot&gt; unzip rocketmq-all-4.4.0-source-release.zip&gt; cd rocketmq-all-4.4.0&#x2F;&#x2F;&#x2F;这一步会比较慢，泡杯茶静候片刻&gt; mvn -Prelease-all -DskipTests clean install -U&gt; cd distribution&#x2F;target&#x2F;apache-rocketmq</code></pre></li></ol><h1 id="修改默认配置"><a href="#修改默认配置" class="headerlink" title="修改默认配置"></a>修改默认配置</h1><ol><li>RocketMQ默认分配的内存比较大，如果可用资源有限的话，需要先修改JVM的参数配置</li><li>进入<code>bin</code>目录，编辑<code>runserver.sh</code>，将<code>JAVA_OPT</code>修改为<code>JAVA_OPT=&quot;${JAVA_OPT} -server -Xms256m -Xmx256m -Xmn256m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</code>，我这边修改的是256MB，如果是生产环境的话，建议还是在4G左右，保证稳定使用</li><li>编辑<code>runbroker.sh</code>，修改<code>JAVA_OPT</code>为<code>JAVA_OPT=&quot;${JAVA_OPT} -server -Xms256m -Xmx256m -Xmn256m&quot;</code></li></ol><h1 id="启动-Name-Server"><a href="#启动-Name-Server" class="headerlink" title="启动 Name Server"></a>启动 Name Server</h1><pre><code class="hljs plain">&gt; nohup sh bin&#x2F;mqnamesrv &amp;&#x2F;&#x2F;执行 jps 查看进程，显示当前所有java进程pid&gt; jps23126 Jps23004 NamesrvStartup14716 -- process information unavailable&#x2F;&#x2F;查看日志确保服务已正常启动&gt; tail -f ~&#x2F;logs&#x2F;rocketmqlogs&#x2F;namesrv.log2019-11-27 09:41:45 INFO main - tls.client.keyPath &#x3D; null2019-11-27 09:41:45 INFO main - tls.client.keyPassword &#x3D; null2019-11-27 09:41:45 INFO main - tls.client.certPath &#x3D; null2019-11-27 09:41:45 INFO main - tls.client.authServer &#x3D; false2019-11-27 09:41:45 INFO main - tls.client.trustCertPath &#x3D; null2019-11-27 09:41:45 INFO main - Using OpenSSL provider2019-11-27 09:41:45 INFO main - SSLContext created for server2019-11-27 09:41:45 INFO NettyEventExecutor - NettyEventExecutor service started2019-11-27 09:41:45 INFO main - The Name Server boot success. serializeType&#x3D;JSON2019-11-27 09:41:45 INFO FileWatchService - FileWatchService service started</code></pre><h1 id="启动-Broker"><a href="#启动-Broker" class="headerlink" title="启动 Broker"></a>启动 Broker</h1><pre><code class="hljs plain">&gt; nohup sh bin&#x2F;mqbroker -n localhost:9876 autoCreateTopicEnable&#x3D;true &amp;&#x2F;&#x2F; jps查看Java进程&gt; jps27576 BrokerStartup23004 NamesrvStartup27740 Jps14716 -- process information unavailable&#x2F;&#x2F; 查看日志确保服务已正常启动&gt;  tail -f ~&#x2F;logs&#x2F;rocketmqlogs&#x2F;broker.log2019-11-27 10:25:05 INFO PullRequestHoldService - PullRequestHoldService service started2019-11-27 10:25:05 INFO brokerOutApi_thread_1 - register broker to name server localhost:9876 OK2019-11-27 10:25:05 INFO main - Start transaction service!2019-11-27 10:25:05 INFO main - The broker[localhost.localdomain, 192.168.0.101:10911] boot success. serializeType&#x3D;JSON and name server is localhost:9876</code></pre><blockquote><p>其中Name Server和Broker的日志文件存放在<code>/root/logs/rocketmqlogs/</code>目录中</p></blockquote><h1 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h1><p>在发送/接收消息之前，我们需要告诉客户端名称服务器的位置。RocketMQ提供了多种方法来实现这一目标。为简单起见，我们使用环境变量<code>NAMESRV_ADDR</code>。</p><pre><code class="hljs plain">&gt; export NAMESRV_ADDR&#x3D;localhost:9876&gt; sh bin&#x2F;tools.sh org.apache.rocketmq.example.quickstart.ProducerSendResult [sendStatus&#x3D;SEND_OK, msgId&#x3D; ...&gt; sh bin&#x2F;tools.sh org.apache.rocketmq.example.quickstart.ConsumerConsumeMessageThread_%d Receive New Messages: [MessageExt...</code></pre><h1 id="停止服务"><a href="#停止服务" class="headerlink" title="停止服务"></a>停止服务</h1><pre><code class="hljs plain">&gt; sh bin&#x2F;mqshutdown brokerThe mqbroker(36695) is running...Send shutdown request to mqbroker(36695) OK&gt; sh bin&#x2F;mqshutdown namesrvThe mqnamesrv(36664) is running...Send shutdown request to mqnamesrv(36664) OK</code></pre><h1 id="安装可视化管理页面"><a href="#安装可视化管理页面" class="headerlink" title="安装可视化管理页面"></a>安装可视化管理页面</h1><ol><li>点击<a href="https://github.com/apache/rocketmq-externals.git" target="_blank" rel="noopener">此处</a>前往github下载RocketMQ拓展程序，其中<code>rocketmq-console</code>为可视化管理页面程序</li><li>修改<code>application.properties</code>的<code>rocketmq.config.namesrvAddr</code>为<code>服务器IP:9876</code></li><li>使用mvn构建或使用IDE打开项目</li><li>运行程序</li><li>浏览器打开<code>http://localhost:8080</code>就可以看到ActiveMQ的管理页面<br><img src="https://img.hacpai.com/file/2019/11/image-cf9b9067.png" srcset="/img/loading.gif" alt="image.png"></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>安装教程</tag>
      
      <tag>rocketmq</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS安装Jenkins</title>
    <link href="/posts/6397/"/>
    <url>/posts/6397/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img.hacpai.com/bing/20190210.jpg?imageView2/1/w/960/h/540/interlace/1/q/100" srcset="/img/loading.gif" alt=""></p><h1 id="CentOS安装Jenkins"><a href="#CentOS安装Jenkins" class="headerlink" title="CentOS安装Jenkins"></a>CentOS安装Jenkins</h1><blockquote><p>原文来源于 <a href="https://segmentfault.com/a/1190000004639325" target="_blank" rel="noopener">https://segmentfault.com/a/1190000004639325</a> ，此处稍加修改<br>本文仅记录Jenkins的安装与基础配置，具体的使用将在下回分解</p></blockquote><h2 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h2><p>看到当前系统Java版本的命令:</p><pre><code class="hljs java">如果显示Java版本号，说明已经正确安装，如果显示没有该命令，需要安装Java：```yum install java</code></pre><p>该命令如果检测到Java不存在可以直接安装Java,如果已存在则可以升级Java。</p><h2 id="安装Jeckins"><a href="#安装Jeckins" class="headerlink" title="安装Jeckins"></a>安装Jeckins</h2><p>添加Jenkins源：</p><pre><code class="hljs plain">&gt; wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;jenkins.repo http:&#x2F;&#x2F;jenkins-ci.org&#x2F;redhat&#x2F;jenkins.repo&gt; rpm --import http:&#x2F;&#x2F;pkg.jenkins-ci.org&#x2F;redhat&#x2F;jenkins-ci.org.key</code></pre><p>添加完成之后直接使用yum命令安装Jenkins:</p><pre><code class="hljs yum">## 启动Jenkins使用命令启动Jenkins:</code></pre><p>service jenkins start</p><pre><code class="hljs plain">看到如下提示说明启动成功：</code></pre><p>Starting jenkins (via systemctl):                          [  OK  ]</p><pre><code class="hljs plain">在浏览器中输入：http:&#x2F;&#x2F;&lt;服务器ip&gt;:8080&#x2F; 就可以进入Jenkins界面直接使用了 。## 停止Jenkins</code></pre><p>service jenkins stop</p><pre><code class="hljs plain">## 相关配置* Jenkins安装目录：&#96;&#96;&#96;&#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;</code></pre><ul><li>Jenkins配置文件位置：<pre><code class="hljs /etc/sysconfig/jenkins```">其中三个比较重要的配置分别为 &#96;JENKINS_HOME&#96;,&#96;JENKINS_USER&#96;,&#96;JENKINS_PORT&#96;    * JENKINS_HOME是Jenkins的主目录，Jenkins工作的目录都放在这里,Jenkins储存文件的地址,Jenkins的插件，生成的文件都在这个目录下。</code></pre><h2 id="Path-Development-Jenkins"><a href="#Path-Development-Jenkins" class="headerlink" title="Path:        Development/Jenkins"></a>Path:        Development/Jenkins</h2><h2 id="Description-Jenkins-Continuous-Integration-Server"><a href="#Description-Jenkins-Continuous-Integration-Server" class="headerlink" title="Description: Jenkins Continuous Integration Server"></a>Description: Jenkins Continuous Integration Server</h2><h2 id="Type-string"><a href="#Type-string" class="headerlink" title="Type:        string"></a>Type:        string</h2><h2 id="Default-“-var-lib-jenkins”"><a href="#Default-“-var-lib-jenkins”" class="headerlink" title="Default:     “/var/lib/jenkins”"></a>Default:     “/var/lib/jenkins”</h2><h2 id="ServiceRestart-jenkins"><a href="#ServiceRestart-jenkins" class="headerlink" title="ServiceRestart: jenkins"></a>ServiceRestart: jenkins</h2>  #<h1 id="Directory-where-Jenkins-store-its-configuration-and-working"><a href="#Directory-where-Jenkins-store-its-configuration-and-working" class="headerlink" title="Directory where Jenkins store its configuration and working"></a>Directory where Jenkins store its configuration and working</h1><h1 id="files-checkouts-build-reports-artifacts-…"><a href="#files-checkouts-build-reports-artifacts-…" class="headerlink" title="files (checkouts, build reports, artifacts, …)."></a>files (checkouts, build reports, artifacts, …).</h1>  #<br>  JENKINS_HOME=”/var/lib/jenkins”<pre><code class="hljs plain">* JENKINS_USER 是Jenkins的用户，拥有$JENKINS_HOME和&#x2F;var&#x2F;log&#x2F;jenkins的权限。</code></pre><h2 id="Type-string-1"><a href="#Type-string-1" class="headerlink" title="Type:        string"></a>Type:        string</h2><h2 id="Default-“jenkins”"><a href="#Default-“jenkins”" class="headerlink" title="Default:     “jenkins”"></a>Default:     “jenkins”</h2><h2 id="ServiceRestart-jenkins-1"><a href="#ServiceRestart-jenkins-1" class="headerlink" title="ServiceRestart: jenkins"></a>ServiceRestart: jenkins</h2>  #<h1 id="Unix-user-account-that-runs-the-Jenkins-daemon"><a href="#Unix-user-account-that-runs-the-Jenkins-daemon" class="headerlink" title="Unix user account that runs the Jenkins daemon"></a>Unix user account that runs the Jenkins daemon</h1><h1 id="Be-careful-when-you-change-this-as-you-need-to-update"><a href="#Be-careful-when-you-change-this-as-you-need-to-update" class="headerlink" title="Be careful when you change this, as you need to update"></a>Be careful when you change this, as you need to update</h1><h1 id="permissions-of-JENKINS-HOME-and-var-log-jenkins"><a href="#permissions-of-JENKINS-HOME-and-var-log-jenkins" class="headerlink" title="permissions of $JENKINS_HOME and /var/log/jenkins."></a>permissions of $JENKINS_HOME and /var/log/jenkins.</h1>  #<br>  JENKINS_USER=”jenkins”<pre><code class="hljs plain">* ENKINS_PORT 是Jenkins的端口，默认端口是8080。</code></pre><h2 id="Type-integer-0-65535"><a href="#Type-integer-0-65535" class="headerlink" title="Type:        integer(0:65535)"></a>Type:        integer(0:65535)</h2><h2 id="Default-8080"><a href="#Default-8080" class="headerlink" title="Default:     8080"></a>Default:     8080</h2><h2 id="ServiceRestart-jenkins-2"><a href="#ServiceRestart-jenkins-2" class="headerlink" title="ServiceRestart: jenkins"></a>ServiceRestart: jenkins</h2>  #<h1 id="Port-Jenkins-is-listening-on"><a href="#Port-Jenkins-is-listening-on" class="headerlink" title="Port Jenkins is listening on."></a>Port Jenkins is listening on.</h1><h1 id="Set-to-1-to-disable"><a href="#Set-to-1-to-disable" class="headerlink" title="Set to -1 to disable"></a>Set to -1 to disable</h1>  #<br>  JENKINS_PORT=”8080”<pre><code></code></pre></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>jenkins</tag>
      
      <tag>安装教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS安装aapt【避坑指南】</title>
    <link href="/posts/18473/"/>
    <url>/posts/18473/</url>
    
    <content type="html"><![CDATA[<h1 id="CentOS安装并使用aapt"><a href="#CentOS安装并使用aapt" class="headerlink" title="CentOS安装并使用aapt"></a>CentOS安装并使用aapt</h1><h2 id="1-下载并上传aapt"><a href="#1-下载并上传aapt" class="headerlink" title="1. 下载并上传aapt"></a>1. 下载并上传aapt</h2><p><a href="https://dl.google.com/android/repository/build-tools_r28.0.2-linux.zip" target="_blank" rel="noopener">https://dl.google.com/android/repository/build-tools_r28.0.2-linux.zip</a><br>下载linux版本的aapt build-tool，<br>解压缩后将<code>/build-tools_r28.0.2-linux/android-9</code>目录下的<code>appt</code>文件上传到<code>/usr/bin</code>目录，<br>设置权限：</p><pre><code class="hljs plain">chmod +x aapt</code></pre><h2 id="2-安装依赖"><a href="#2-安装依赖" class="headerlink" title="2. 安装依赖"></a>2. 安装依赖</h2><ul><li>yum install …<pre><code class="hljs plain">&gt; yum install glibc.i686&gt; yum install zlib.i686&gt; yum install libstdc++.i686</code></pre></li><li>将aapt build-tool中<code>/build-tools_r28.0.2-linux/android-9/lib64</code>目录下的<code>libc++.so</code>文件上传到<code>/usr/lib64</code>目录</li></ul><h2 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h2><p>执行<code>aapt</code>命令，查看是否安装成功</p><pre><code class="hljs plain">[root@localhost admin]# aaptAndroid Asset Packaging ToolUsage: aapt l[ist] [-v] [-a] file.&#123;zip,jar,apk&#125;   List contents of Zip-compatible archive. aapt d[ump] [--values] [--include-meta-data] WHAT file.&#123;apk&#125; [asset [asset ...]]   strings          Print the contents of the resource table string pool in the APK.   badging          Print the label and icon for the app declared in APK.   permissions      Print the permissions from the APK.   resources        Print the resource table from the APK.   configurations   Print the configurations in the APK.   xmltree          Print the compiled xmls in the given assets.   xmlstrings       Print the strings of the given compiled xml assets. aapt p[ackage] [-d][-f][-m][-u][-v][-x][-z][-M AndroidManifest.xml] \        [-0 extension [-0 extension ...]] [-g tolerance] [-j jarfile] \        [--debug-mode] [--min-sdk-version VAL] [--target-sdk-version VAL] \        [--app-version VAL] [--app-version-name TEXT] [--custom-package VAL] \        [--rename-manifest-package PACKAGE] \        [--rename-instrumentation-target-package PACKAGE] \        [--utf16] [--auto-add-overlay] \        [--max-res-version VAL] \        [-I base-package [-I base-package ...]] \        [-A asset-source-dir]  [-G class-list-file] [-P public-definitions-file] \        [-D main-dex-class-list-file] \        [-S resource-sources [-S resource-sources ...]] \        [-F apk-file] [-J R-file-dir] \        [--product product1,product2,...] \        [-c CONFIGS] [--preferred-density DENSITY] \        [--split CONFIGS [--split CONFIGS]] \        [--feature-of package [--feature-after package]] \        [raw-files-dir [raw-files-dir] ...] \        [--output-text-symbols DIR]   Package the android resources.  It will read assets and resources that are   supplied with the -M -A -S or raw-files-dir arguments.  The -J -P -F and -R   options control which files are output. aapt r[emove] [-v] file.&#123;zip,jar,apk&#125; file1 [file2 ...]   Delete specified files from Zip-compatible archive. aapt a[dd] [-v] file.&#123;zip,jar,apk&#125; file1 [file2 ...]   Add specified files to Zip-compatible archive. aapt c[runch] [-v] -S resource-sources ... -C output-folder ...   Do PNG preprocessing on one or several resource folders   and store the results in the output folder. aapt s[ingleCrunch] [-v] -i input-file -o outputfile   Do PNG preprocessing on a single file. aapt v[ersion]   Print program version. Modifiers:   -a  print Android-specific data (resources, manifest) when listing   -c  specify which configurations to include.  The default is all       configurations.  The value of the parameter should be a comma       separated list of configuration values.  Locales should be specified       as either a language or language-region pair.  Some examples:            en            port,en            port,land,en_US   -d  one or more device assets to include, separated by commas   -f  force overwrite of existing files   -g  specify a pixel tolerance to force images to grayscale, default 0   -j  specify a jar or zip file containing classes to include   -k  junk path of file(s) added   -m  make package directories under location specified by -J   -u  update existing packages (add new, replace older, remove deleted files)   -v  verbose output   -x  create extending (non-application) resource IDs   -z  require localization of resource attributes marked with       localization&#x3D;&quot;suggested&quot;   -A  additional directory in which to find raw asset files   -G  A file to output proguard options into.   -D  A file to output proguard options for the main dex into.   -F  specify the apk file to output   -I  add an existing package to base include set   -J  specify where to output R.java resource constant definitions   -M  specify full path to AndroidManifest.xml to include in zip   -P  specify where to output public resource definitions   -S  directory in which to find resources.  Multiple directories will be scanned       and the first match found (left to right) will take precedence.   -0  specifies an additional extension for which such files will not       be stored compressed in the .apk.  An empty string means to not       compress any files at all.   --debug-mode       inserts android:debuggable&#x3D;&quot;true&quot; in to the application node of the       manifest, making the application debuggable even on production devices.   --include-meta-data       when used with &quot;dump badging&quot; also includes meta-data tags.   --pseudo-localize       generate resources for pseudo-locales (en-XA and ar-XB).   --min-sdk-version       inserts android:minSdkVersion in to manifest.  If the version is 7 or       higher, the default encoding for resources will be in UTF-8.   --target-sdk-version       inserts android:targetSdkVersion in to manifest.   --max-res-version       ignores versioned resource directories above the given value.   --values       when used with &quot;dump resources&quot; also includes resource values.   --version-code       inserts android:versionCode in to manifest.   --version-name       inserts android:versionName in to manifest.   --replace-version       If --version-code and&#x2F;or --version-name are specified, these       values will replace any value already in the manifest. By       default, nothing is changed if the manifest already defines       these attributes.   --custom-package       generates R.java into a different package.   --extra-packages       generate R.java for libraries. Separate libraries with &#39;:&#39;.   --generate-dependencies       generate dependency files in the same directories for R.java and resource package   --auto-add-overlay       Automatically add resources that are only in overlays.   --preferred-density       Specifies a preference for a particular density. Resources that do not       match this density and have variants that are a closer match are removed.   --split       Builds a separate split APK for the configurations listed. This can       be loaded alongside the base APK at runtime.   --feature-of       Builds a split APK that is a feature of the apk specified here. Resources       in the base APK can be referenced from the the feature APK.   --feature-after       An app can have multiple Feature Split APKs which must be totally ordered.       If --feature-of is specified, this flag specifies which Feature Split APK       comes before this one. The first Feature Split APK should not define       anything here.   --rename-manifest-package       Rewrite the manifest so that its package name is the package name       given here.  Relative class names (for example .Foo) will be       changed to absolute names with the old package so that the code       does not need to change.   --rename-instrumentation-target-package       Rewrite the manifest so that all of its instrumentation       components target the given package.  Useful when used in       conjunction with --rename-manifest-package to fix tests against       a package that has been renamed.   --product       Specifies which variant to choose for strings that have       product variants   --utf16       changes default encoding for resources to UTF-16.  Only useful when API       level is set to 7 or higher where the default encoding is UTF-8.   --non-constant-id       Make the resources ID non constant. This is required to make an R java class       that does not contain the final value but is used to make reusable compiled       libraries that need to access resources.   --shared-lib       Make a shared library resource package that can be loaded by an application       at runtime to access the libraries resources. Implies --non-constant-id.   --app-as-shared-lib       Make an app resource package that also can be loaded as shared library at runtime.       Implies --non-constant-id.   --error-on-failed-insert       Forces aapt to return an error if it fails to insert values into the manifest       with --debug-mode, --min-sdk-version, --target-sdk-version --version-code       and --version-name.       Insertion typically fails if the manifest already defines the attribute.   --error-on-missing-config-entry       Forces aapt to return an error if it fails to find an entry for a configuration.   --output-text-symbols       Generates a text file containing the resource symbols of the R class in the       specified folder.   --ignore-assets       Assets to be ignored. Default pattern is:       !.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir&gt;_*:!CVS:!thumbs.db:!picasa.ini:!*~   --skip-symbols-without-default-localization       Prevents symbols from being generated for strings that do not have a default       localization   --no-version-vectors       Do not automatically generate versioned copies of vector XML resources.   --no-version-transitions       Do not automatically generate versioned copies of transition XML resources.   --private-symbols       Java package name to use when generating R.java for private resources.</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>安装教程</tag>
      
      <tag>aapt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yum极速安装maven</title>
    <link href="/posts/39711/"/>
    <url>/posts/39711/</url>
    
    <content type="html"><![CDATA[<p>很多教程都是下载…解压…修改配置…<br>其实在centos上只需要通过yum就可以完成安装</p><p>输入以下指令：</p><pre><code class="hljs plain">sudo wget http:&#x2F;&#x2F;repos.fedorapeople.org&#x2F;repos&#x2F;dchen&#x2F;apache-maven&#x2F;epel-apache-maven.repo -O &#x2F;etc&#x2F;yum.repos.d&#x2F;epel-apache-maven.reposudo sed -i s&#x2F;\$releasever&#x2F;6&#x2F;g &#x2F;etc&#x2F;yum.repos.d&#x2F;epel-apache-maven.reposudo yum install -y maven</code></pre><p>以上便安装结束了！<br>检查一下是否安装成功<br><code>mvn -version</code></p><p>看到以下信息，说明安装成功</p><pre><code class="hljs plain">Apache Maven 3.5.4 (Red Hat 3.5.4-5)Maven home: &#x2F;usr&#x2F;share&#x2F;mavenJava version: 1.8.0_222, vendor: Oracle Corporation, runtime: &#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-1.8.0-openjdk-1.8.0.222.b10-0.el8_0.x86_64&#x2F;jreDefault locale: en_US, platform encoding: ANSI_X3.4-1968OS name: &quot;linux&quot;, version: &quot;4.18.0-80.11.2.el8_0.x86_64&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux部署jar包开机自启</title>
    <link href="/posts/42603/"/>
    <url>/posts/42603/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img.hacpai.com/bing/20180720.jpg?imageView2/1/w/960/h/540/interlace/1/q/100" srcset="/img/loading.gif" alt=""> </p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>运维不在自己干。</p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="编写-sh脚本"><a href="#编写-sh脚本" class="headerlink" title="编写.sh脚本"></a>编写.sh脚本</h2><p>上传<code>xxx.jar</code>到指定目录，这里以<code>/www/wwwroot/test</code>为例，上传完成后，创建一个<code>start.sh</code>脚本文件，提供<code>start</code>函数: <code>nohub java -jar xxx.jar</code></p><h2 id="创建-service服务"><a href="#创建-service服务" class="headerlink" title="创建.service服务"></a>创建.service服务</h2><p>进入system目录：<code>cd /usr/lib/systemd/system</code><br>创建.service文件：<code>vi xxxService.service</code><br>文件内容如下：</p><pre><code class="hljs plain">[Unit]Description&#x3D;robot  # 服务描述After&#x3D;network.target remote-fs.target nss-lookup.target[Service]Type&#x3D;forkingExecStart&#x3D;&#x2F;www&#x2F;wwwroot&#x2F;admin&#x2F;admin.sh start   # 启动脚本#ExecReload&#x3D;&#x2F;#ExecStop&#x3D;&#x2F;PrivateTmp&#x3D;true[Install]WantedBy&#x3D;multi-user.target</code></pre><p>保存并退出：<code>:wq</code></p><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>重载所有修改过的配置文件：<code>systemctl daemon-reload</code><br>激活开机启动：<code>systemctl enable test.service</code><br>检查是否成功：<code>systemctl status test.service</code></p><p>如果看到如下信息，说明配置成功：<br><img src="https://img.hacpai.com/file/2019/11/image-178a134a.png" srcset="/img/loading.gif" alt="image.png"></p><p>  如果看到这样的信息，应该检查<code>test.sh</code>是否存在问题：<br><img src="https://img.hacpai.com/file/2019/11/image-b47bc53e.png" srcset="/img/loading.gif" alt="image.png"></p><h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><p>配置成功后，重启系统检查服务是否自启成功：<code>reboot</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>掘金论坛头像旋转的奥秘</title>
    <link href="/posts/14884/"/>
    <url>/posts/14884/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img.hacpai.com/bing/20180928.jpg?imageView2/1/w/960/h/540/interlace/1/q/100" srcset="/img/loading.gif" alt=""> </p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  在浏览掘金用户个人主页时，无意中把鼠标放到了头像上，发现头像开始了360°旋转，并且速度越来越快，在肉眼下出现了万花筒的效果。</p><p>  这么有意思的东西当然要研究一下了，于是F12开搞。</p><h1 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h1><pre><code class="hljs plain">* &#123;transform:rotate(666turn);transition-delay:0.1s;transition-property:all;transition-duration:59s;transition-timing-function:cubic-bezier(.34,0,.84,1)&#125;</code></pre><p>给元素加上上述css属性，刷新页面就可以看到神奇的效果了。</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>|属性|值|解释|<br>|—|—|<br>|transform|rotate(666turn)| 用来旋转元素角度，这里用到的是turn，1turn = 360°|<br>|transition-delay|0.1s|效果执行前的等待时间<br>|transition-property|all|指明效果变换的位置，比如width，height等，all是所有属性|<br>|transition-duration|59s|过渡效果的持续时间|<br>|transition-timing-function|cubic-bezier(.34,0,.84,1)|过渡效果的速度曲线 四个值的范围都是0-1 代表整个过程|</p><h1 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h1><p>点开我的博客首页：<a href="https://easyboot.xyz/" target="_blank" rel="noopener">https://easyboot.xyz</a>，把鼠标放到logo上试试 👍</p>]]></content>
    
    
    
    <tags>
      
      <tag>css3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Navicat通过SSH连接数据库</title>
    <link href="/posts/27104/"/>
    <url>/posts/27104/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img.hacpai.com/bing/20180803.jpg?imageView2/1/w/960/h/540/interlace/1/q/100" srcset="/img/loading.gif" alt=""> </p><h1 id="1-常规"><a href="#1-常规" class="headerlink" title="1. 常规"></a>1. 常规</h1><p>  在<code>常规</code>中填写连接名、主机、端口、用户名、密码，如下图：</p><p><img src="https://img.hacpai.com/file/2019/11/image-d88a7aec.png" srcset="/img/loading.gif" alt="image.png"></p><ul><li><code>连接名</code>：随意填写，便于与其他连接区分即可</li><li><code>主机</code>：固定值<code>127.0.0.1</code></li><li><code>端口</code>：数据库端口</li><li><code>用户名</code>：数据库用户名</li><li><code>密码</code>：数据库密码</li></ul><h1 id="2-SSH"><a href="#2-SSH" class="headerlink" title="2. SSH"></a>2. SSH</h1><p>  点击<code>SSH</code>，填写配置信息，如下图：</p><p>   <img src="https://img.hacpai.com/file/2019/11/image-75bab710.png" srcset="/img/loading.gif" alt="image.png"></p><ul><li><p><code>主机</code>：数据库主机（IP 地址）</p></li><li><p><code>端口</code>：SSH 端口，默认端口<code>22</code></p></li><li><p><code>用户名</code>：SSH 用户名</p></li><li><p><code>验证方法</code>：密码/公钥</p></li><li><p><code>密码</code>：<br><img src="https://img.hacpai.com/file/2019/11/image-e107ca9b.png" srcset="/img/loading.gif" alt="image.png"></p><p>如果验证方法是密码，那么填写 SSH 用户名对应的密码</p></li><li><p><code>私钥</code>：<br><img src="https://img.hacpai.com/file/2019/11/image-c998a1bf.png" srcset="/img/loading.gif" alt="image.png"></p><p>选择之前生成的私钥，然后填写<code>密码短语</code>，如果没有短语就不填</p></li></ul><h1 id="3-测试连接"><a href="#3-测试连接" class="headerlink" title="3. 测试连接"></a>3. 测试连接</h1><p>  点击测试连接，出现下图<code>连接成功</code>提示，说明操作成功</p><p>   <img src="https://img.hacpai.com/file/2019/11/image-fd343ebb.png" srcset="/img/loading.gif" alt="image.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>navicat</tag>
      
      <tag>ssh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ELK（Elasticsearch、Logstash、Kibana）安装指南</title>
    <link href="/posts/28640/"/>
    <url>/posts/28640/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img.hacpai.com/bing/20190304.jpg?imageView2/1/w/960/h/540/interlace/1/q/100" srcset="/img/loading.gif" alt=""> </p><blockquote><p>我使用的环境是centos，如果是运行环境是其他系统的小伙伴，需要另行寻找资料❤️ </p></blockquote><h1 id="什么是-ELK"><a href="#什么是-ELK" class="headerlink" title="什么是 ELK"></a>什么是 ELK</h1><ul><li>E: Elasticsearch，它是一个实时的分布式搜索分析引擎，通常被用于全文检索、结构化搜索、分析以及这三个功能的组合，包括 GitHub、Stack Overflow 等大厂都在使用<br>官网：<a href="https://www.elastic.co/cn/" target="_blank" rel="noopener">https://www.elastic.co/cn/</a></li><li>L: Logstash，它是一款强大的数据处理工具，可以实现数据传输，格式处理，格式化输出，还有强大的插件功能，常用于日志处理<br>官网：</li><li>K: Kibana，它是一个开源和免费的工具，可以为 Logstash 和 Elasticsearch 提供的日志分析的 Web 界面，用来汇总、分析和搜索重要数据日志<br>官网：</li></ul><h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><blockquote><p>官网安装教程：<a href="https://computingforgeeks.com/how-to-install-elk-stack-on-centos-fedora/" target="_blank" rel="noopener">https://computingforgeeks.com/how-to-install-elk-stack-on-centos-fedora/</a></p></blockquote><blockquote><p>清华大学镜像站：<a href="https://mirrors.tuna.tsinghua.edu.cn/elasticstack/yum/elastic-7.x/7.4.2/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/elasticstack/yum/elastic-7.x/7.4.2/</a></p></blockquote><blockquote><p>其实官网提供的教程很详细，但是如果没有科学上网的话，安装过程会非常缓慢，所以我们使用清华大学的镜像，将rpm下载好后直接安装</p></blockquote><h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><p><strong>1.</strong> 下载ELK相关安装包<br><strong>1.1.</strong>   打开 <a href="https://mirrors.tuna.tsinghua.edu.cn/elasticstack/yum/elastic-7.x/7.4.2/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/elasticstack/yum/elastic-7.x/7.4.2/</a> ，这里选择的版本是7.4.2，如果需要其他版本的同学可以自己选择其他版本下载。<br>  <img src="https://img.hacpai.com/file/2019/11/image-84fcca57.png" srcset="/img/loading.gif" alt="image.png"><br>  <img src="https://img.hacpai.com/file/2019/11/image-628ed7a9.png" srcset="/img/loading.gif" alt="image.png"><br>  <img src="https://img.hacpai.com/file/2019/11/image-9d11354a.png" srcset="/img/loading.gif" alt="image.png"><br>  点击上面三个进行下载。<br><strong>1.2.</strong>  下载完成后，将上述3个安装包上传到服务器指定目录<code>/www/wwwroot/elk</code>。<br>  推荐一个SSH工具：<code>FinalShell</code>，提供了可视化的UI界面，可以很方便的上传、编辑文件。</p><h2 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h2><p><strong>2.</strong> 通过SSH连接服务器，使用yum安装Java</p><pre><code class="hljs plain">yum -y install java-1.8.0-openjdk-devel java-1.8.0-openjdk</code></pre><p>安装完成后输入<code>java -version</code>验证是否成功，出现下图即说明安装成功：<br><img src="https://img.hacpai.com/file/2019/11/image-b8060ee1.png" srcset="/img/loading.gif" alt="image.png"></p><h2 id="安装ELK"><a href="#安装ELK" class="headerlink" title="安装ELK"></a>安装ELK</h2><p><strong>3.</strong> 分别安装ELK<br><strong>3.1.</strong> Elasticsearch</p><pre><code class="hljs plain">cd  &#x2F;www&#x2F;wwwroot&#x2F;elk  &#x2F;&#x2F;进入刚才上传的rpm目录 rpm -ivh elasticsearch-7.4.2-x86_64.rpm</code></pre><p>稍等片刻，安装完成之后，可以使用下面的命令确认安装是否成功</p><pre><code class="hljs plain">rpm -qi elasticsearch</code></pre><p>出现如下信息，说明安装成功：</p><pre><code class="hljs plain">Name        : elasticsearchEpoch       : 0Version     : 7.4.2Release     : 1Architecture: x86_64Install Date: Sat 16 Nov 2019 10:11:37 PM CSTGroup       : Application&#x2F;InternetSize        : 488085180License     : Elastic LicenseSignature   : RSA&#x2F;SHA512, Tue 29 Oct 2019 07:14:54 AM CST, Key ID d27d666cd88e42b4Source RPM  : elasticsearch-7.4.2-1-src.rpmBuild Date  : Tue 29 Oct 2019 04:55:59 AM CSTBuild Host  : packer-virtualbox-iso-1559162487Relocations : &#x2F;usr Packager    : ElasticsearchVendor      : ElasticsearchURL         : https:&#x2F;&#x2F;www.elastic.co&#x2F;Summary     : Distributed RESTful search engine built for the cloudDescription :Reference documentation can be found athttps:&#x2F;&#x2F;www.elastic.co&#x2F;guide&#x2F;en&#x2F;elasticsearch&#x2F;reference&#x2F;current&#x2F;index.htmland the &#39;Elasticsearch: The Definitive Guide&#39; book can be found athttps:&#x2F;&#x2F;www.elastic.co&#x2F;guide&#x2F;en&#x2F;elasticsearch&#x2F;guide&#x2F;current&#x2F;index.html</code></pre><blockquote><p>如果想要修改JVM配置，比如内存占用等配置，可以编辑 <code>/etc/elasticsearch/jvm.options</code>文件。<br>下面示例如何修改堆内存的初始、最大内存占用  </p><pre><code class="hljs plain">-Xms1g  -Xmx1g  &#96;&#96;&#96;  如果你的机器内存比较少，可以将上述两个参数改小  &#96;&#96;&#96;  -Xms256m  -Xmx512m  </code></pre></blockquote><p>启动elasticsearch服务</p><pre><code class="hljs plain">sudo systemctl enable --now elasticsearch.service</code></pre><blockquote><p>测试一下服务是否正常运行: <code>curl http://127.0.0.1:9200</code></p><p><img src="https://img.hacpai.com/file/2019/11/image-a41c0474.png" srcset="/img/loading.gif" alt="image.png"></p></blockquote><p><strong>3.2.</strong> 安装Kibana</p><pre><code class="hljs plain">cd  &#x2F;www&#x2F;wwwroot&#x2F;elk  &#x2F;&#x2F;进入刚才上传的rpm目录 rpm -ivh kibana-7.4.2-x86_64.rpm</code></pre><p>稍等片刻，安装成功后，修改Kibana配置</p><pre><code class="hljs plain">sudo vim &#x2F;etc&#x2F;kibana&#x2F;kibana.yml</code></pre><pre><code class="hljs plain">server.host: &quot;0.0.0.0&quot;server.name: &quot;kibana.example.com&quot;elasticsearch.hosts: [&quot;http:&#x2F;&#x2F;localhost:9200&quot;]</code></pre><p>开启Kibana服务</p><pre><code class="hljs plain">sudo systemctl enable --now kibana</code></pre><p>如果开着防火墙，那么应该放行TCP端口<code>5601</code></p><pre><code class="hljs plain">sudo firewall-cmd --add-port&#x3D;5601&#x2F;tcp --permanentsudo firewall-cmd --reload</code></pre><p>如果是云服务器，还要去安全组中放行5601<br>访问<code>http://ip-address:5601</code>打开Kibana面板<br><img src="https://img.hacpai.com/file/2019/11/image-63ed86cc.png" srcset="/img/loading.gif" alt="image.png"></p><p><strong>3.3.</strong> 安装Logstash</p><pre><code class="hljs plain">cd  &#x2F;www&#x2F;wwwroot&#x2F;elk  &#x2F;&#x2F;进入刚才上传的rpm目录 rpm -ivh logstash-7.4.2.rpm</code></pre><p>Logstash的配置文件在<code>/etc/logstash/conf.d/</code>目录，可以查看<a href="https://www.elastic.co/guide/en/logstash/current/index.html" target="_blank" rel="noopener"> Logstash Configuration manual </a> 来修改配置</p><p><strong>3.4.</strong> 安装其他ELK工具<br>如果需要安装其他ELK工具，安装方式与上面相同。首先去下载rpm，然后安装并修改配置。</p><p>官网推荐了如下工具：</p><ul><li><strong>Filebeat</strong>: Lightweight Shipper for Logs. It helps you keep the simple things simple by offering a lightweight way to forward and centralize logs and files</li><li><strong>Metricbeat</strong>: Collect metrics from your systems and services. From CPU to memory, Redis to NGINX, and much more, Metricbeat is a lightweight way to send system and service statistics.</li><li><strong>Packetbeat</strong>: Lightweight Shipper for Network Data</li><li><strong>Heartbeat</strong>: Lightweight Shipper for Uptime Monitoring. It helps you monitor services for their availability with active probing</li><li><strong>Auditbeat</strong>: Lightweight shipper that helps you audit the activities of users and processes on your systems</li></ul><p>有需要的同学可以自行寻找安装包。</p>]]></content>
    
    
    
    <tags>
      
      <tag>安装教程</tag>
      
      <tag>Elasticsearch</tag>
      
      <tag>Logstash</tag>
      
      <tag>Kibana</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jrebel License Server 激活（附自建教程）</title>
    <link href="/posts/13436/"/>
    <url>/posts/13436/</url>
    
    <content type="html"><![CDATA[<h2 id="激活地址"><a href="#激活地址" class="headerlink" title="激活地址"></a>激活地址</h2><ul><li><code>http://jrebel.zhurongting.com:9002/712b0014-d86f-4dd8-a937-a9dc2c3d7727</code></li><li>这是在我服务器上部署的激活地址，可以直接使用</li><li><code>/</code>后半部分为 UUID，你可以前往以下网站自行生成：<a href="https://1024tools.com/uuid" target="_blank" rel="noopener">https://1024tools.com/uuid</a></li><li>建议使用新生成的UUID</li><li>👍 重要：不保证永久有效，如果失效了，可以通过评论、Github、QQ、黑客派等方式联系我</li></ul><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p>Jrebel &amp; Jet Brains License Server for Java： <a href="https://gitee.com/gsls200808/JrebelLicenseServerforJava" target="_blank" rel="noopener">https://gitee.com/gsls200808/JrebelLicenseServerforJava</a></p><h2 id="普通安装"><a href="#普通安装" class="headerlink" title="普通安装"></a>普通安装</h2><ol><li><p>克隆Jrebel License Server 项目</p><pre><code class="hljs plain">git clone https:&#x2F;&#x2F;gitee.com&#x2F;gsls200808&#x2F;JrebelLicenseServerforJava.git</code></pre></li><li><p>使用maven打包</p><pre><code class="hljs plain">cd &#x2F;path&#x2F;to&#x2F;projectmvn compile mvn exec:java -Dexec.mainClass&#x3D;&quot;com.vvvtimes.server.MainServer&quot; -Dexec.args&#x3D;&quot;-p 8081&quot;mvn package</code></pre></li><li><p>打包后会生成jar包，通过<code>java -jar</code>命令运行</p></li></ol><pre><code class="hljs plain">nohup java -jar JrebelBrainsLicenseServerforJava-1.0-SNAPSHOT-jar-with-dependencies.jar -p 8081 &gt;&#x2F;dev&#x2F;null &amp;</code></pre><p>这里使用的端口是<code>8081</code>，并常驻后台</p><ol start="4"><li>配置域名</li></ol><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><ol><li>克隆项目（同上）</li><li>创建镜像<pre><code class="hljs plain">cd &#x2F;path&#x2F;to&#x2F;project   mvn package   docker build -t jrebel-ls</code></pre></li><li>运行镜像<pre><code class="hljs plain">docker run -d --name jrebel-ls --restart always -e PORT&#x3D;9001 -p 9001:9001 jrebel-ls</code></pre></li><li>配置域名</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>idea</tag>
      
      <tag>jrebel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Required request body is missing 解决方案</title>
    <link href="/posts/52559/"/>
    <url>/posts/52559/</url>
    
    <content type="html"><![CDATA[<h1 id="问题产生原因"><a href="#问题产生原因" class="headerlink" title="问题产生原因"></a>问题产生原因</h1><ol><li>POST 请求</li><li>使用<code>Filter</code>或<code>Interceptor</code>对<code>HttpServletRequest</code>中的数据进行了读取</li><li>在 Controller 中使用<code>@RequestBody</code>解析请求参数</li></ol><ul><li>如果看官使用的是<code>Shiro</code>的<code>Filter</code>，建议替换成 Servlet 原生的 Filter，对于 Shiro 过滤器出现该问题时的解决方案，暂时还没有研究出来</li></ul><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ul><li><p><code>HttpServletRequest</code>好比是<strong>容器（瓶子）</strong>，其自带的信息流（<code>InputStream</code>）相当于<strong>水</strong>。进行读取时，会调用<code>getInputStream()</code>，这个操作就是<strong>从容器（瓶子）中把水抽取出来</strong>，这时候<strong>容器</strong>中的<strong>水</strong>就没了，当再想抽取时，自然无法再获得<strong>水</strong>。</p></li><li><p>复现一下我们报错的场景，先在Filter中通过<code>HttpServletRequest.getInputStream()</code>读取数据流，这时候容器中的水已经抽取过了，当<code>@RequestBody</code>再去读取时，就会报错：<code>Required request body is missing</code>。</p></li><li><p>更全面的理解可以看这里：<a href="https://www.cnblogs.com/yepei/p/7011081.html" target="_blank" rel="noopener">https://www.cnblogs.com/yepei/p/7011081.html</a></p></li></ul><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ul><li>将数据流可以被多次读取，因此新建一个包装类，继承<code>HttpServletRequest</code>，在该包装类中，获取数据流并进行保存</li></ul><ol><li>定义包装类</li></ol><pre><code class="hljs plain">package com.w.module.api.filter;import org.apache.commons.io.IOUtils;import javax.servlet.ReadListener;import javax.servlet.ServletInputStream;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletRequestWrapper;import java.io.ByteArrayInputStream;import java.io.IOException;&#x2F;** * 包装HttpServletRequest，将数据流进行拷贝 * * @author wujiawei0926@yeah.net * @see * @since  *&#x2F;public class WrapperHttpServletRequest extends HttpServletRequestWrapper &#123;    private static byte[] requestBody;    public WrapperHttpServletRequest(HttpServletRequest request) &#123;        super(request);        try &#123;            requestBody &#x3D; IOUtils.toByteArray(request.getInputStream());        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;    @Override    public ServletInputStream getInputStream() throws IOException &#123;        if(requestBody &#x3D;&#x3D; null) &#123;            requestBody &#x3D; new byte[0];        &#125;        return new BufferedServletInputStream(requestBody);    &#125;    class BufferedServletInputStream extends ServletInputStream&#123;        private ByteArrayInputStream inputStream;        public BufferedServletInputStream(byte[] buffer) &#123;            this.inputStream &#x3D; new ByteArrayInputStream( buffer );        &#125;        @Override        public int available() throws IOException &#123;            return inputStream.available();        &#125;        @Override        public int read() throws IOException &#123;            return inputStream.read();        &#125;        @Override        public int read(byte[] b, int off, int len) throws IOException &#123;            return inputStream.read( b, off, len );        &#125;        @Override        public boolean isFinished() &#123;            return false;        &#125;        @Override        public boolean isReady() &#123;            return false;        &#125;        @Override        public void setReadListener(ReadListener readListener) &#123;        &#125;    &#125;&#125;</code></pre><ol start="2"><li><p>定义好包装类后，在自己的Filter或Interceptor中，通过包装类进行inputStream读取</p><pre><code class="hljs plain">package com.w.module.api.filter;import javax.servlet.*;&#x2F;** * * API接口过滤器 * v1.0 * * @author wujiawei0926@yeah.net * @see * @since *&#x2F;@WebFilterpublic class ApiV1Filter implements Filter &#123;    @Override    public void init(FilterConfig filterConfig) throws ServletException &#123;    &#125;    @Override    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;        WrapperHttpServletRequest request &#x3D; new WrapperHttpServletRequest((HttpServletRequest) servletRequest);        &#x2F;&#x2F; TODO 在这里进行数据流的读取或其他操作，所有方法调用方式与HttpServletRequest相同        filterChain.doFilter(request, servletResponse);    &#125;    @Override    public void destroy() &#123;    &#125;&#125;</code></pre></li><li><p>这时候重新进行调试，发现不再报错，并且可以获取到参数</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>filter</tag>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Electron打包vue项目成.exe</title>
    <link href="/posts/11375/"/>
    <url>/posts/11375/</url>
    
    <content type="html"><![CDATA[<ol><li>把electron的官方例子clone下来</li></ol><pre><code class="hljs git">2. 找到项目的入口文件&#96;main.js&#96;，会发现它的打包方式，&#96;index.html&#96;是打包的文件路径&#96;&#96;&#96;mainWindow.loadFile(&#39;index.html&#39;)</code></pre><ol start="3"><li>把自己的项目打包以后的dist文件复制过来，并修改第2步中打开的<code>main.js</code></li></ol><pre><code class="hljs mainWindow.loadFile('dist/index.html')```">4. 在&#96;package.json&#96;中找一下它的命令，之后运行项目&#96;&#96;&#96;npm run start</code></pre><p>成功以后会出来一个桌面应用，有没有觉得很眼熟？<br>打包需要electron的依赖electron-packager</p><pre><code class="hljs cnpm">4. 在package.json中添加命令</code></pre><p>“scripts”: {<br>    “start”: “electron .”,<br>    “packager”: “electron-packager ./ App –platform=win32 –arch=x64 –electron-version=2.0.0 –overwrite”<br>  }</p><pre><code class="hljs plain">  然后运行命令打包&#96;&#96;&#96;npm run packager</code></pre><p>然后项目中会出现一个App-win32-x64的文件夹，这个文件就是打包好的桌面应用，文件夹里有一个App.exe文件，App.exe就是这个项目的启动文件</p>]]></content>
    
    
    
    <tags>
      
      <tag>Electron</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用Linux指令</title>
    <link href="/posts/58532/"/>
    <url>/posts/58532/</url>
    
    <content type="html"><![CDATA[<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><ul><li>查看容器列表 <code>docker ps</code></li><li>停止所有容器 <code>docker stop $(docker ps -aq)</code></li><li>删除所有容器 <code>docker stop $(docker ps -aq)</code></li></ul><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><ul><li>根据key模糊删除 <code>redis-cli KEYS &quot;pattern&quot; | xargs redis-cli DEL</code><br>示例：删除包含<code>user:</code>的所有缓存数据：<code>redis-cli KEYS &quot;user:&quot; | xargs redis-cli DEL</code></li></ul><h2 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h2><ul><li><strong>centos安装jdk1.8</strong><br>查看JDK包列表：<code>yum search java | grep -i --color JDK</code><br>安装open jdk：<code>yum install java-1.8.0-openjdk  java-1.8.0-openjdk-devel</code></li></ul><h2 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h2><ul><li>查看IP <code>ip addr</code></li><li>安装rpm <pre><code class="hljs plain">cd &#x2F;usr&#x2F;local&#x2F;src    &#x2F;&#x2F;找到下载的rpm包  rpm -ivh xxx.rpm</code></pre></li><li>查看防火墙端口 <code>firewall-cmd --list-ports</code></li><li>防火墙开启端口<pre><code class="hljs plain">firewall-cmd --zone&#x3D;public --add-port&#x3D;3000&#x2F;tcp --permanentfirewall-cmd --reload</code></pre></li><li>关闭防火墙 <code>systemctl stop firewalld.service</code></li></ul><h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><ul><li>重启 <pre><code class="hljs plain">rabbitmqctl stop #先停止rabbitmq-server restart #再重启服务</code></pre></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>指令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>接口开发规范</title>
    <link href="/posts/6199/"/>
    <url>/posts/6199/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img.hacpai.com/bing/20180218.jpg?imageView2/1/w/960/h/540/interlace/1/q/100" srcset="/img/loading.gif" alt=""> </p><h1 id="REST-API-介绍"><a href="#REST-API-介绍" class="headerlink" title="REST API 介绍"></a>REST API 介绍</h1><p>本接口规范对XXX小程序接口操作，相关参数、响应和错误码进行定义，所有提交及返回接收的变量均使用小写。目前仅提供 HTTP(S) 接口，并提供接口操作请求和响应范例。</p><h1 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h1><h2 id="请求URL"><a href="#请求URL" class="headerlink" title="请求URL"></a>请求URL</h2><p>REST API 的 URL 格式如下：</p><pre><code class="hljs plain">https:&#x2F;&#x2F;test.easyboot.xyz&#x2F;$ver&#x2F;$servicename&#x2F;$command?sign&#x3D;$sign&amp;random&#x3D;$random&amp;timestamp&#x3D;$timestamp</code></pre><p>其中各个参数的含义以及取值如下（参数名称及其取值均区分大小写）：</p><table><thead><tr><th>参数</th><th>含义</th><th>取值</th></tr></thead><tbody><tr><td>https</td><td>请求协议</td><td>请求协议为 HTTPS，请求方式为 POST</td></tr><tr><td>cxjwx.saicdh.com</td><td>请求域名</td><td>固定为 <code>test.easyboot.xyz</code></td></tr><tr><td>ver</td><td>版本号</td><td>固定为 <code>v1</code></td></tr><tr><td>servicename</td><td>内部服务名</td><td>示例：<code>v1/user/login</code>，其中<code>user</code>为<code>servicename</code></td></tr><tr><td>command</td><td>命令字，与 servicename 组合用来标识具体的业务功能</td><td>示例：<code>v1/user/login</code>，其中<code>login</code>为<code>command</code></td></tr><tr><td>sign</td><td>签名</td><td>根据body中参数进行加密签名</td></tr><tr><td>random</td><td>随机数</td><td>32位无符号整数随机数</td></tr><tr><td>timestamp</td><td>时间戳</td><td>请求时间转换成的10位时间戳</td></tr></tbody></table><h3 id="Sign签名方式"><a href="#Sign签名方式" class="headerlink" title="Sign签名方式"></a>Sign签名方式</h3><ol><li>将Body的JSON参数用ASCII码进行排序，并通过<code>&amp;</code>连接，如：<code>a=a&amp;b=b&amp;c=c</code></li><li>对排序后的参数进行MD5加密，加密后的字符串即为<code>sign</code></li><li>把生成的<code>sign</code>追加在请求URL后面，如：<code>https://xxx.com?sign=$sign</code></li></ol><h2 id="HTTP-请求包体格式"><a href="#HTTP-请求包体格式" class="headerlink" title="HTTP 请求包体格式"></a>HTTP 请求包体格式</h2><p>REST API 仅支持 POST 方法，其请求包体为 JSON 格式，具体的包体格式参见每个 API 的详细描述。<br>需要特别注意的是，POST 包体不能为空，即使某条协议包体中不需要携带任何信息，也需要携带一个空的 JSON 对象，即 <code>{}</code>。</p><h2 id="HTTP-返回码"><a href="#HTTP-返回码" class="headerlink" title="HTTP 返回码"></a>HTTP 返回码</h2><p>除非发生网络错误（例如502错误），否则 REST API 的调用结果均为200，真正的 API 调用错误码与错误信息在 HTTP 应答包体中返回。</p><h2 id="HTTP-应答包体格式"><a href="#HTTP-应答包体格式" class="headerlink" title="HTTP 应答包体格式"></a>HTTP 应答包体格式</h2><p>REST API 的应答包体也是 JSON 格式，其格式符合如下特征：</p><pre><code class="hljs plain">&#123;    &quot;code&quot;: 200,     &quot;msg&quot;: &quot;success&quot;,     &quot;data&quot;: &#123;&#125;&#125;</code></pre><p>应答包体中必然包含 code、msg、data 这三个属性，其含义如下：</p><table><thead><tr><th>字段</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>code</td><td>int</td><td>错误码，200为成功，其他为失败</td></tr><tr><td>msg</td><td>String</td><td>失败原因</td></tr><tr><td>data</td><td>Object</td><td>成功后返回的数据</td></tr></tbody></table><h2 id="请求示例"><a href="#请求示例" class="headerlink" title="请求示例"></a>请求示例</h2><p>以下为通过 REST API来进行用户登录操作的示例。<br>HTTPS 请求：</p><pre><code class="hljs plain">POST &#x2F;v1&#x2F;user&#x2F;login?sign&#x3D;xxx&amp;random&#x3D;99999999&amp;timestamp&#x3D;1546335259 Host: test.easyboot.xyzBody: &#123;    &quot;username&quot;: &quot;test&quot;,    &quot;password&quot;: &quot;test_pass&quot;&#125;</code></pre><p>HTTPS 应答：</p><pre><code class="hljs plain">&#123;    &quot;code&quot;: 200,     &quot;msg&quot;: &quot;操作成功&quot;,     &quot;data&quot;: &#123;         &quot;uid&quot;: 123456,         &quot;nickName&quot;: &quot;test user&quot;,         &quot;avatar&quot;: &quot;https:&#x2F;&#x2F;xxx.com&#x2F;xxx.jpg&quot;    &#125;&#125;</code></pre><hr><h1 id="Java校验源码"><a href="#Java校验源码" class="headerlink" title="Java校验源码"></a>Java校验源码</h1><pre><code class="hljs plain">import cn.hutool.core.date.DateUtil;import cn.hutool.core.util.ReUtil;import cn.hutool.core.util.StrUtil;import cn.hutool.crypto.SecureUtil;import cn.hutool.extra.servlet.ServletUtil;import cn.hutool.json.JSONUtil;import org.apache.shiro.web.filter.AccessControlFilter;import javax.servlet.ServletRequest;import javax.servlet.ServletResponse;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.io.PrintWriter;import java.util.Arrays;import java.util.Enumeration;import java.util.Map;import java.util.Set;</code></pre><pre><code class="hljs plain">public static final String TIMESTAMP &#x3D; &quot;timestamp&quot;;public static final String RANDOM &#x3D; &quot;random&quot;;public static final String SIGN &#x3D; &quot;sign&quot;;</code></pre><pre><code class="hljs plain">HttpServletRequest request &#x3D; (HttpServletRequest) servletRequest;       HttpServletResponse response &#x3D; (HttpServletResponse) servletResponse;&#x2F;&#x2F; 请求是否过期       String timestampStr &#x3D; request.getParameter(TIMESTAMP);       if (StrUtil.isBlank(timestampStr)) &#123;           renderError(response, &quot;缺少参数：timestamp&quot;);           return false;       &#125;       long timestamp &#x3D; Long.parseLong(timestampStr);       long currDate &#x3D; DateUtil.currentSeconds();       if (timestamp + 18000 &lt; currDate) &#123;           renderError(response, &quot;timestamp已过期&quot;);           return false;       &#125;       &#x2F;&#x2F; 检查随机数       String pattern &#x3D; &quot;[1-9]\\d*&quot;;       String random &#x3D; request.getParameter(RANDOM);       if (StrUtil.isBlank(random)) &#123;           renderError(response, &quot;缺少参数：random&quot;);           return false;       &#125; else if (!(ReUtil.isMatch(pattern, random) &amp;&amp; random.length() &#x3D;&#x3D; 32))&#123;           renderError(response, &quot;random非法&quot;);           return false;       &#125;       &#x2F;&#x2F; 检查sign       String signature &#x3D; request.getParameter(SIGN);       if (StrUtil.isBlank(signature)) &#123;           renderError(response, &quot;缺少参数：sign&quot;);           return false;       &#125;       &#x2F;&#x2F; 请求参数       String body &#x3D; ServletUtil.getBody(request);       if (StrUtil.isBlank(body)) &#123;           renderError(response, &quot;请求体body不能为空&quot;);           return false;       &#125;       Map map &#x3D; JSONUtil.toBean(body, Map.class);       &#x2F;&#x2F; 参数排序       Set keySet &#x3D; map.keySet();       Object[] keys &#x3D; keySet.toArray();       Arrays.sort(keys);       StringBuilder strBuilder &#x3D; new StringBuilder();       for (int i &#x3D; 0; i &lt; keys.length; i++) &#123;           Object str &#x3D; keys[i];           strBuilder.append(str.toString())                   .append(&quot;&#x3D;&quot;)                   .append(map.get(str.toString()));           if (i !&#x3D; keys.length - 1) &#123;               strBuilder.append(&quot;&amp;&quot;);           &#125;       &#125;       &#x2F;&#x2F; 校验sign       String newSignature &#x3D; SecureUtil.md5(strBuilder.toString());       if (!StrUtil.equals(signature, newSignature)) &#123;           renderError(response, &quot;sign校验失败&quot;);           return false;       &#125;</code></pre><pre><code class="hljs plain">private void renderError(HttpServletResponse response, String message) &#123;       if (StrUtil.isEmpty(message)) &#123;           message &#x3D; &quot;非法请求&quot;;       &#125;       response.setContentType(&quot;application&#x2F;json;charset&#x3D;UTF-8&quot;);       PrintWriter out &#x3D; null;       try &#123;           out &#x3D; response.getWriter();           out.write(&quot;&#123;\&quot;message\&quot;:\&quot;&quot;+ message +&quot;\&quot;,\&quot;code\&quot;:403&#125;&quot;);           out.flush();       &#125; catch (IOException e) &#123;           e.printStackTrace();       &#125;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>规范</tag>
      
      <tag>范文</tag>
      
      <tag>RESTAPI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正确安装Solo的姿势</title>
    <link href="/posts/2345/"/>
    <url>/posts/2345/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img.hacpai.com/bing/20180412.jpg?imageView2/1/w/960/h/540/interlace/1/q/100" srcset="/img/loading.gif" alt=""> </p><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>这是一篇来自知乎的安装教程：<a href="https://zhuanlan.zhihu.com/p/54147784" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/54147784</a>，号称 <code>史上最全（全平台）docker安装方法！</code></p><p>也在这里埋个坑，计划开个专栏专门讲一讲Docker的安装，包括使用命令行安装和在宝塔中安装。</p><h2 id="使用Docker部署"><a href="#使用Docker部署" class="headerlink" title="使用Docker部署"></a>使用Docker部署</h2><ol><li><p>获取Docker镜像</p><pre><code class="hljs plain">docker pull b3log&#x2F;solo</code></pre></li><li><p>创建数据库<br>库名 <code>solo</code>，字符集使用 <code>utf8mb4</code>，排序规则 <code>utf8mb4_general_ci</code></p></li><li><p>启动容器</p><pre><code class="hljs plain">docker run --detach --name solo --network&#x3D;host \    --env RUNTIME_DB&#x3D;&quot;MYSQL&quot; \    --env JDBC_USERNAME&#x3D;&quot;test&quot; \    --env JDBC_PASSWORD&#x3D;&quot;123&quot; \    --env JDBC_DRIVER&#x3D;&quot;com.mysql.cj.jdbc.Driver&quot; \    --env JDBC_URL&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;solo?useUnicode&#x3D;yes&amp;characterEncoding&#x3D;UTF-8&amp;useSSL&#x3D;false&amp;serverTimezone&#x3D;UTC&quot; \    b3log&#x2F;solo --listen_port&#x3D;8080 --server_scheme&#x3D;http --server_host&#x3D;easyboot.xyz</code></pre></li></ol><p>参数说明（很重要👍 ）：</p><ul><li><code>--env JDBC_USERNAME</code>：第2步中创建数据库名</li><li><code>--env JDBC_USERNAME</code>：数据库用户名</li><li><code>--env JDBC_PASSWORD</code>：数据库密码</li><li><code>--env JDBC_URL</code>：数据库连接地址</li><li><code>--listen_port</code>：进程监听端口（访问时的端口）</li><li><code>--server_scheme</code>：最终访问协议，如果反代服务启用了 HTTPS 这里也需要改为 <code>https</code></li><li><code>--server_host</code>：最终访问域名或公网 IP，不要带端口</li><li><code>--server_port</code>：最终访问端口，<strong>不建议添加</strong>，官网上说如果是80或443就留空，但百般周折后发现留空会导致Lakta配置错误，所以<strong>不建议添加</strong></li></ul><p>到这里就基本完成了，打开浏览器输入<code>${server_scheme}://${server_host}:${listen_port}</code>，如：<code>http://easyboot.xyz:8080</code>，如果看到Solo的欢迎页面（如下图），那就说明上面的步骤完全正确。<br><img src="https://user-images.githubusercontent.com/970828/61179568-96819e80-a637-11e9-8f73-5188d99ba454.png" srcset="/img/loading.gif" alt="start"></p><h2 id="配置Nginx反向代理"><a href="#配置Nginx反向代理" class="headerlink" title="配置Nginx反向代理"></a>配置Nginx反向代理</h2><p>Nginx的安装这里不再赘述，需要教程的同学可以看这篇文章：<a href="https://www.jianshu.com/p/beb7b4f7a274" target="_blank" rel="noopener">https://www.jianshu.com/p/beb7b4f7a274</a></p><p>安装完成后修改nginx.conf，当然更建议新建一个conf文件，然后在nginx.cong中通过include引用，下面贴上完整配置：</p><pre><code class="hljs plain">server&#123;        listen 80;#域名        server_name www.easyboot.xyz easyboot.xyz;#PROXY-START&#x2F;location &#x2F;&#123;    expires 12h;    if ($request_uri ~* &quot;(php|jsp|cgi|asp|aspx)&quot;)    &#123;         expires 0;    &#125;#一开始配置的8080端口的完整访问路径    proxy_pass http:&#x2F;&#x2F;easyboot.xyz:8080;#域名    proxy_set_header Host easyboot.xyz;    proxy_set_header X-Real-IP $remote_addr;    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;    proxy_set_header REMOTE-HOST $remote_addr;    add_header X-Cache $upstream_cache_status;#Set Nginx Cache    proxy_cache cache_one;    proxy_cache_key $host$uri$is_args$args;    proxy_cache_valid 200 304 301 302 1m;&#125;#PROXY-END&#x2F;        location ~ &#x2F;purge(&#x2F;.*) &#123;            proxy_cache_purge cache_one $host$1$is_args$args;            #access_log  &#x2F;www&#x2F;wwwlogs&#x2F;www.easyboot.xyz_purge_cache.log;        &#125;        #禁止访问的文件或目录        location ~ ^&#x2F;(\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md)        &#123;            return 404;        &#125;        #请求日志        access_log  &#x2F;www&#x2F;wwwlogs&#x2F;www.easyboot.xyz.log;        error_log  &#x2F;www&#x2F;wwwlogs&#x2F;www.easyboot.xyz.error.log;&#125;</code></pre><p>参照上面的注释修改域名等参数后，记得<code>:wq</code>保存并退出。<br>退出后重载nginx配置 <code>nginx -s reload</code>，打开浏览器输入你的域名，就又可以看到熟悉的solo页面了</p>]]></content>
    
    
    
    <tags>
      
      <tag>Solo安装</tag>
      
      <tag>Solo</tag>
      
      <tag>Docker</tag>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
